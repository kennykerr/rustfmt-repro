use windows::application_model::data_transfer::IDataPackage;

fn main() {
    let _ = IDataPackage::default();
}

pub mod windows {
    pub mod application_model {
        pub mod data_transfer {
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DataPackage {
                ptr: ::winrt::ComPtr<IDataPackage>,
            }
            impl DataPackage {
                pub fn new() -> ::winrt::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn get_view(&self) -> ::winrt::Result<DataPackageView> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageView = ::std::mem::zeroed();
                        (this.vtable().get_view)(
                            this,
                            <DataPackageView as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn properties(&self) -> ::winrt::Result<DataPackagePropertySet> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackagePropertySet = ::std::mem::zeroed();
                        (this.vtable().properties)(
                            this,
                            <DataPackagePropertySet as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn requested_operation(&self) -> ::winrt::Result<DataPackageOperation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageOperation = ::std::mem::zeroed();
                        (this.vtable().requested_operation)(
                            this,
                            <DataPackageOperation as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_requested_operation(
                    &self,
                    value: DataPackageOperation,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_requested_operation)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn operation_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                DataPackage,
                                OperationCompletedEventArgs,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . operation_completed)
                        (this, handler . into() . get_abi(), < super :: super
                         :: foundation :: EventRegistrationToken as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn remove_operation_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_operation_completed)(
                            this,
                            event_cookie.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn destroyed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                DataPackage,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . destroyed)
                        (this, handler . into() . get_abi(), < super :: super
                         :: foundation :: EventRegistrationToken as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn remove_destroyed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_destroyed)(this, event_cookie.into().get_abi()).ok()
                    }
                }
                pub fn set_data<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    format_id: T0__,
                    value: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_data)(
                            this,
                            format_id.into().get_abi(),
                            value.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn set_data_provider<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, DataProviderHandler>>,
                >(
                    &self,
                    format_id: T0__,
                    delay_renderer: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_data_provider)(
                            this,
                            format_id.into().get_abi(),
                            delay_renderer.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn set_text<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_text)(this, value.into().get_abi()).ok() }
                }
                pub fn set_uri<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_uri)(this, value.into().get_abi()).ok() }
                }
                pub fn set_html_format<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_html_format)(this, value.into().get_abi()).ok() }
                }
                pub fn resource_map(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IMap<
                        ::winrt::HString,
                        super::super::storage::streams::RandomAccessStreamReference,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            super::super::storage::streams::RandomAccessStreamReference,
                        > = ::std::mem::zeroed();
                        (this.vtable().resource_map)(
                            this,
                            <super::super::foundation::collections::IMap<
                                ::winrt::HString,
                                super::super::storage::streams::RandomAccessStreamReference,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rtf<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rtf)(this, value.into().get_abi()).ok() }
                }
                pub fn set_bitmap<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::RandomAccessStreamReference,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_bitmap)(this, value.into().get_abi()).ok() }
                }
                pub fn set_storage_items_read_only<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::storage::IStorageItem,
                            >,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_storage_items_read_only)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn set_storage_items<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::storage::IStorageItem,
                            >,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                    read_only: bool,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_storage_items)(this, value.into().get_abi(), read_only)
                            .ok()
                    }
                }
                pub fn set_application_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackage2 as ::std::convert::From<&Self>>::from(self)
                        .set_application_link(value)
                }
                pub fn set_web_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackage2 as ::std::convert::From<&Self>>::from(self).set_web_link(value)
                }
                pub fn share_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                DataPackage,
                                ShareCompletedEventArgs,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IDataPackage3 as ::std::convert::From<&Self>>::from(self)
                        .share_completed(handler)
                }
                pub fn remove_share_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    token: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackage3 as ::std::convert::From<&Self>>::from(self)
                        .remove_share_completed(token)
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::winrt::IActivationFactory) -> ::winrt::Result<R>,
                >(
                    callback: F,
                ) -> ::winrt::Result<R> {
                    static mut SHARED: ::winrt::FactoryCache<
                        DataPackage,
                        ::winrt::IActivationFactory,
                    > = ::winrt::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::winrt::RuntimeName for DataPackage {
                const NAME: &'static str = "Windows.ApplicationModel.DataTransfer.DataPackage";
            }
            unsafe impl ::winrt::ComInterface for DataPackage {
                type VTable = abi_IDataPackage;
                fn iid() -> ::winrt::Guid {
                    <IDataPackage as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DataPackage {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.DataPackage;{61ebf5c7-efea-4346-9554-981d7e198ffe})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataPackage {
                type Abi = ::winrt::RawComPtr<IDataPackage>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackage> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackage> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DataPackage {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DataPackage",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DataPackage> for IDataPackage {
                fn from(value: DataPackage) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackage> for IDataPackage {
                fn from(value: &DataPackage) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackage>> for DataPackage {
                fn into(self) -> ::winrt::Param<'a, IDataPackage> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackage>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackage>> for &'a DataPackage {
                fn into(self) -> ::winrt::Param<'a, IDataPackage> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackage>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackage> for IDataPackage2 {
                fn from(value: DataPackage) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackage> for IDataPackage2 {
                fn from(value: &DataPackage) -> Self {
                    <DataPackage as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackage2>> for DataPackage {
                fn into(self) -> ::winrt::Param<'a, IDataPackage2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackage2>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackage2>> for &'a DataPackage {
                fn into(self) -> ::winrt::Param<'a, IDataPackage2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackage2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackage> for IDataPackage3 {
                fn from(value: DataPackage) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackage> for IDataPackage3 {
                fn from(value: &DataPackage) -> Self {
                    <DataPackage as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackage3>> for DataPackage {
                fn into(self) -> ::winrt::Param<'a, IDataPackage3> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackage3>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackage3>> for &'a DataPackage {
                fn into(self) -> ::winrt::Param<'a, IDataPackage3> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackage3>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackage> for ::winrt::Object {
                fn from(value: DataPackage) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackage> for ::winrt::Object {
                fn from(value: &DataPackage) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for DataPackage {}
            unsafe impl ::std::marker::Sync for DataPackage {}
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct DataPackageOperation {
                value: u32,
            }
            impl DataPackageOperation {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self { value: 0u32 };
                pub const Copy: Self = Self { value: 1u32 };
                pub const Move: Self = Self { value: 2u32 };
                pub const Link: Self = Self { value: 4u32 };
            }
            unsafe impl ::winrt::RuntimeType for DataPackageOperation {
                fn signature() -> String {
                    "enum(Windows.ApplicationModel.DataTransfer.DataPackageOperation;u4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataPackageOperation {
                type Abi = u32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for DataPackageOperation {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for DataPackageOperation {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DataPackagePropertySet {
                ptr: ::winrt::ComPtr<IDataPackagePropertySet>,
            }
            impl DataPackagePropertySet {
                pub fn first(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IIterator<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    > as ::std::convert::From<&Self>>::from(self)
                    .first()
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<::winrt::Object> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . lookup(key,)
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . size()
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<bool> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . has_key(key,)
                }
                pub fn get_view(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                > {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . get_view()
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::winrt::Result<bool> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) .
                    insert(key, value,)
                }
                pub fn remove<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<()> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . remove(key,)
                }
                pub fn clear(&self) -> ::winrt::Result<()> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . clear()
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn description(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().description)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_description<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_description)(this, value.into().get_abi()).ok() }
                }
                pub fn thumbnail(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: IRandomAccessStreamReference = :: std ::
                        mem :: zeroed() ;
                        (this . vtable() . thumbnail)
                        (this, < super :: super :: storage :: streams ::
                         IRandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn set_thumbnail<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::IRandomAccessStreamReference,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_thumbnail)(this, value.into().get_abi()).ok() }
                }
                pub fn file_types(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . file_types)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn application_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().application_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_application_name<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_name)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn application_listing_uri(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().application_listing_uri)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_application_listing_uri<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_listing_uri)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn content_source_web_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .content_source_web_link()
                }
                pub fn set_content_source_web_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .set_content_source_web_link(value)
                }
                pub fn content_source_application_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .content_source_application_link()
                }
                pub fn set_content_source_application_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .set_content_source_application_link(value)
                }
                pub fn package_family_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .package_family_name()
                }
                pub fn set_package_family_name<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .set_package_family_name(value)
                }
                pub fn square30x30_logo(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>
                {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .square30x30_logo()
                }
                pub fn set_square30x30_logo<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::IRandomAccessStreamReference,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .set_square30x30_logo(value)
                }
                pub fn logo_background_color(&self) -> ::winrt::Result<super::super::ui::Color> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .logo_background_color()
                }
                pub fn set_logo_background_color<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::ui::Color>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet2 as ::std::convert::From<&Self>>::from(self)
                        .set_logo_background_color(value)
                }
                pub fn enterprise_id(&self) -> ::winrt::Result<::winrt::HString> {
                    <IDataPackagePropertySet3 as ::std::convert::From<&Self>>::from(self)
                        .enterprise_id()
                }
                pub fn set_enterprise_id<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet3 as ::std::convert::From<&Self>>::from(self)
                        .set_enterprise_id(value)
                }
                pub fn content_source_user_activity_json(
                    &self,
                ) -> ::winrt::Result<::winrt::HString> {
                    <IDataPackagePropertySet4 as ::std::convert::From<&Self>>::from(self)
                        .content_source_user_activity_json()
                }
                pub fn set_content_source_user_activity_json<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackagePropertySet4 as ::std::convert::From<&Self>>::from(self)
                        .set_content_source_user_activity_json(value)
                }
            }
            impl ::winrt::RuntimeName for DataPackagePropertySet {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.DataPackagePropertySet";
            }
            unsafe impl ::winrt::ComInterface for DataPackagePropertySet {
                type VTable = abi_IDataPackagePropertySet;
                fn iid() -> ::winrt::Guid {
                    <IDataPackagePropertySet as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DataPackagePropertySet {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.DataPackagePropertySet;{cd1c93eb-4c4c-443a-a8d3-f5c241e91689})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataPackagePropertySet {
                type Abi = ::winrt::RawComPtr<IDataPackagePropertySet>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DataPackagePropertySet {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DataPackagePropertySet",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySet>
                for super::super::foundation::collections::IIterable<
                    super::super::foundation::collections::IKeyValuePair<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                >
            {
                fn from(value: DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet>
                for super::super::foundation::collections::IIterable<
                    super::super::foundation::collections::IKeyValuePair<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                >
            {
                fn from(value: &DataPackagePropertySet) -> Self {
                    <DataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                > for DataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                > for &'a DataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DataPackagePropertySet>
                for super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>
            {
                fn from(value: DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet>
                for super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>
            {
                fn from(value: &DataPackagePropertySet) -> Self {
                    <DataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > for DataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > for &'a DataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DataPackagePropertySet> for IDataPackagePropertySet {
                fn from(value: DataPackagePropertySet) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet> for IDataPackagePropertySet {
                fn from(value: &DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet>>
                for DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet>>
                for &'a DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackagePropertySet> for IDataPackagePropertySet2 {
                fn from(value: DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet> for IDataPackagePropertySet2 {
                fn from(value: &DataPackagePropertySet) -> Self {
                    <DataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet2>>
                for DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet2>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet2>>
                for &'a DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackagePropertySet> for IDataPackagePropertySet3 {
                fn from(value: DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet> for IDataPackagePropertySet3 {
                fn from(value: &DataPackagePropertySet) -> Self {
                    <DataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet3>>
                for DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet3> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet3>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet3>>
                for &'a DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet3> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet3>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackagePropertySet> for IDataPackagePropertySet4 {
                fn from(value: DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet> for IDataPackagePropertySet4 {
                fn from(value: &DataPackagePropertySet) -> Self {
                    <DataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet4>>
                for DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet4> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet4>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySet4>>
                for &'a DataPackagePropertySet
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySet4> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackagePropertySet4>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackagePropertySet> for ::winrt::Object {
                fn from(value: DataPackagePropertySet) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackagePropertySet> for ::winrt::Object {
                fn from(value: &DataPackagePropertySet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::iter::IntoIterator for DataPackagePropertySet {
                type Item = super::super::foundation::collections::IKeyValuePair<
                    ::winrt::HString,
                    ::winrt::Object,
                >;
                type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a DataPackagePropertySet {
                type Item = super::super::foundation::collections::IKeyValuePair<
                    ::winrt::HString,
                    ::winrt::Object,
                >;
                type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            unsafe impl ::std::marker::Send for DataPackagePropertySet {}
            unsafe impl ::std::marker::Sync for DataPackagePropertySet {}
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DataPackagePropertySetView {
                ptr: ::winrt::ComPtr<IDataPackagePropertySetView>,
            }
            impl DataPackagePropertySetView {
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn description(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().description)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn thumbnail(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::RandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: RandomAccessStreamReference = :: std :: mem
                        :: zeroed() ;
                        (this . vtable() . thumbnail)
                        (this, < super :: super :: storage :: streams ::
                         RandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn file_types(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IVectorView<::winrt::HString>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . file_types)
                        (this, < super :: super :: foundation :: collections
                         :: IVectorView :: < :: winrt :: HString > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn application_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().application_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn application_listing_uri(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().application_listing_uri)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn package_family_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <IDataPackagePropertySetView2 as ::std::convert::From<&Self>>::from(self)
                        .package_family_name()
                }
                pub fn content_source_web_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    <IDataPackagePropertySetView2 as ::std::convert::From<&Self>>::from(self)
                        .content_source_web_link()
                }
                pub fn content_source_application_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    <IDataPackagePropertySetView2 as ::std::convert::From<&Self>>::from(self)
                        .content_source_application_link()
                }
                pub fn square30x30_logo(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>
                {
                    <IDataPackagePropertySetView2 as ::std::convert::From<&Self>>::from(self)
                        .square30x30_logo()
                }
                pub fn logo_background_color(&self) -> ::winrt::Result<super::super::ui::Color> {
                    <IDataPackagePropertySetView2 as ::std::convert::From<&Self>>::from(self)
                        .logo_background_color()
                }
                pub fn enterprise_id(&self) -> ::winrt::Result<::winrt::HString> {
                    <IDataPackagePropertySetView3 as ::std::convert::From<&Self>>::from(self)
                        .enterprise_id()
                }
                pub fn content_source_user_activity_json(
                    &self,
                ) -> ::winrt::Result<::winrt::HString> {
                    <IDataPackagePropertySetView4 as ::std::convert::From<&Self>>::from(self)
                        .content_source_user_activity_json()
                }
                pub fn is_from_roaming_clipboard(&self) -> ::winrt::Result<bool> {
                    <IDataPackagePropertySetView5 as ::std::convert::From<&Self>>::from(self)
                        .is_from_roaming_clipboard()
                }
                pub fn first(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IIterator<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    > as ::std::convert::From<&Self>>::from(self)
                    .first()
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<::winrt::Object> {
                    <super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    > as ::std::convert::From<&Self>>::from(self)
                    .lookup(key)
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    <super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    > as ::std::convert::From<&Self>>::from(self)
                    .size()
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<bool> {
                    <super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    > as ::std::convert::From<&Self>>::from(self)
                    .has_key(key)
                }
                pub fn split(
                    &self,
                    first: &mut super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                    second: &mut super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                ) -> ::winrt::Result<()> {
                    <super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    > as ::std::convert::From<&Self>>::from(self)
                    .split(first, second)
                }
            }
            impl ::winrt::RuntimeName for DataPackagePropertySetView {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView";
            }
            unsafe impl ::winrt::ComInterface for DataPackagePropertySetView {
                type VTable = abi_IDataPackagePropertySetView;
                fn iid() -> ::winrt::Guid {
                    <IDataPackagePropertySetView as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DataPackagePropertySetView {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView;{b94cec01-0c1a-4c57-be55-75d01289735d})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataPackagePropertySetView {
                type Abi = ::winrt::RawComPtr<IDataPackagePropertySetView>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView > as ::
                    winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView > as ::
                    winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for DataPackagePropertySetView {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DataPackagePropertySetView",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView> for IDataPackagePropertySetView {
                fn from(value: DataPackagePropertySetView) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView> for IDataPackagePropertySetView {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView>>
                for DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView>>
                for &'a DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView> for IDataPackagePropertySetView2 {
                fn from(value: DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView> for IDataPackagePropertySetView2 {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    <DataPackagePropertySetView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView2>>
                for DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView2> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView2>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView2>>
                for &'a DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView2> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView2>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView> for IDataPackagePropertySetView3 {
                fn from(value: DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView> for IDataPackagePropertySetView3 {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    <DataPackagePropertySetView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView3>>
                for DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView3> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView3>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView3>>
                for &'a DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView3> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView3>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView> for IDataPackagePropertySetView4 {
                fn from(value: DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView> for IDataPackagePropertySetView4 {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    <DataPackagePropertySetView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView4>>
                for DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView4> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView4>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView4>>
                for &'a DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView4> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView4>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView> for IDataPackagePropertySetView5 {
                fn from(value: DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView> for IDataPackagePropertySetView5 {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    <DataPackagePropertySetView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView5>>
                for DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView5> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView5>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackagePropertySetView5>>
                for &'a DataPackagePropertySetView
            {
                fn into(self) -> ::winrt::Param<'a, IDataPackagePropertySetView5> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IDataPackagePropertySetView5>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView>
                for super::super::foundation::collections::IIterable<
                    super::super::foundation::collections::IKeyValuePair<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                >
            {
                fn from(value: DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView>
                for super::super::foundation::collections::IIterable<
                    super::super::foundation::collections::IKeyValuePair<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                >
            {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    <DataPackagePropertySetView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                > for DataPackagePropertySetView
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                > for &'a DataPackagePropertySetView
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView>
                for super::super::foundation::collections::IMapView<
                    ::winrt::HString,
                    ::winrt::Object,
                >
            {
                fn from(value: DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView>
                for super::super::foundation::collections::IMapView<
                    ::winrt::HString,
                    ::winrt::Object,
                >
            {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    <DataPackagePropertySetView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IMapView<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > for DataPackagePropertySetView
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IMapView<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IMapView<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > for &'a DataPackagePropertySetView
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IMapView<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DataPackagePropertySetView> for ::winrt::Object {
                fn from(value: DataPackagePropertySetView) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackagePropertySetView> for ::winrt::Object {
                fn from(value: &DataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::iter::IntoIterator for DataPackagePropertySetView {
                type Item = super::super::foundation::collections::IKeyValuePair<
                    ::winrt::HString,
                    ::winrt::Object,
                >;
                type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a DataPackagePropertySetView {
                type Item = super::super::foundation::collections::IKeyValuePair<
                    ::winrt::HString,
                    ::winrt::Object,
                >;
                type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            unsafe impl ::std::marker::Send for DataPackagePropertySetView {}
            unsafe impl ::std::marker::Sync for DataPackagePropertySetView {}
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DataPackageView {
                ptr: ::winrt::ComPtr<IDataPackageView>,
            }
            impl DataPackageView {
                pub fn properties(&self) -> ::winrt::Result<DataPackagePropertySetView> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackagePropertySetView = ::std::mem::zeroed();
                        (this.vtable().properties)(
                            this,
                            <DataPackagePropertySetView as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn requested_operation(&self) -> ::winrt::Result<DataPackageOperation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageOperation = ::std::mem::zeroed();
                        (this.vtable().requested_operation)(
                            this,
                            <DataPackageOperation as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn report_operation_completed(
                    &self,
                    value: DataPackageOperation,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().report_operation_completed)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn available_formats(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IVectorView<::winrt::HString>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . available_formats)
                        (this, < super :: super :: foundation :: collections
                         :: IVectorView :: < :: winrt :: HString > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn contains<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().contains)(
                            this,
                            format_id.into().get_abi(),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_data_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::Object>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::Object,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_data_async)
                        (this, format_id . into() . get_abi(), < super ::
                         super :: foundation :: IAsyncOperation :: < :: winrt
                         :: Object > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_text_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_text_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < :: winrt :: HString > as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_custom_text_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_custom_text_async)
                        (this, format_id . into() . get_abi(), < super ::
                         super :: foundation :: IAsyncOperation :: < :: winrt
                         :: HString > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_uri_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<super::super::foundation::Uri>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::Uri,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_uri_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::Uri,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_html_format_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_html_format_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < :: winrt :: HString > as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_resource_map_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMapView<
                            ::winrt::HString,
                            super::super::storage::streams::RandomAccessStreamReference,
                        >,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMapView<
                                ::winrt::HString,
                                super::super::storage::streams::RandomAccessStreamReference,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_resource_map_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IMapView<
                                    ::winrt::HString,
                                    super::super::storage::streams::RandomAccessStreamReference,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_rtf_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_rtf_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < :: winrt :: HString > as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_bitmap_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::storage::streams::RandomAccessStreamReference,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::storage::streams::RandomAccessStreamReference,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_bitmap_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::storage::streams::RandomAccessStreamReference,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_storage_items_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<
                            super::super::storage::IStorageItem,
                        >,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::super::storage::IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_storage_items_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::super::storage::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_application_link_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<super::super::foundation::Uri>,
                > {
                    <IDataPackageView2 as ::std::convert::From<&Self>>::from(self)
                        .get_application_link_async()
                }
                pub fn get_web_link_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<super::super::foundation::Uri>,
                > {
                    <IDataPackageView2 as ::std::convert::From<&Self>>::from(self)
                        .get_web_link_async()
                }
                pub fn request_access_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::security::enterprise_data::ProtectionPolicyEvaluationResult,
                    >,
                > {
                    <IDataPackageView3 as ::std::convert::From<&Self>>::from(self)
                        .request_access_async()
                }
                pub fn request_access_with_enterprise_id_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    enterprise_id: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::security::enterprise_data::ProtectionPolicyEvaluationResult,
                    >,
                > {
                    <IDataPackageView3 as ::std::convert::From<&Self>>::from(self)
                        .request_access_with_enterprise_id_async(enterprise_id)
                }
                pub fn unlock_and_assume_enterprise_identity(
                    &self,
                ) -> ::winrt::Result<
                    super::super::security::enterprise_data::ProtectionPolicyEvaluationResult,
                > {
                    <IDataPackageView3 as ::std::convert::From<&Self>>::from(self)
                        .unlock_and_assume_enterprise_identity()
                }
                pub fn set_accepted_format_id<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<()> {
                    <IDataPackageView4 as ::std::convert::From<&Self>>::from(self)
                        .set_accepted_format_id(format_id)
                }
            }
            impl ::winrt::RuntimeName for DataPackageView {
                const NAME: &'static str = "Windows.ApplicationModel.DataTransfer.DataPackageView";
            }
            unsafe impl ::winrt::ComInterface for DataPackageView {
                type VTable = abi_IDataPackageView;
                fn iid() -> ::winrt::Guid {
                    <IDataPackageView as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DataPackageView {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.DataPackageView;{7b840471-5900-4d85-a90b-10cb85fe3552})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataPackageView {
                type Abi = ::winrt::RawComPtr<IDataPackageView>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackageView> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackageView> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DataPackageView {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DataPackageView",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DataPackageView> for IDataPackageView {
                fn from(value: DataPackageView) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackageView> for IDataPackageView {
                fn from(value: &DataPackageView) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView>> for DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView>> for &'a DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackageView> for IDataPackageView2 {
                fn from(value: DataPackageView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackageView> for IDataPackageView2 {
                fn from(value: &DataPackageView) -> Self {
                    <DataPackageView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView2>> for DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView2>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView2>> for &'a DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackageView> for IDataPackageView3 {
                fn from(value: DataPackageView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackageView> for IDataPackageView3 {
                fn from(value: &DataPackageView) -> Self {
                    <DataPackageView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView3>> for DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView3> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView3>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView3>> for &'a DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView3> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView3>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackageView> for IDataPackageView4 {
                fn from(value: DataPackageView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataPackageView> for IDataPackageView4 {
                fn from(value: &DataPackageView) -> Self {
                    <DataPackageView as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView4>> for DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView4> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView4>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataPackageView4>> for &'a DataPackageView {
                fn into(self) -> ::winrt::Param<'a, IDataPackageView4> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataPackageView4>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataPackageView> for ::winrt::Object {
                fn from(value: DataPackageView) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataPackageView> for ::winrt::Object {
                fn from(value: &DataPackageView) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for DataPackageView {}
            unsafe impl ::std::marker::Sync for DataPackageView {}
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DataProviderDeferral {
                ptr: ::winrt::ComPtr<IDataProviderDeferral>,
            }
            impl DataProviderDeferral {
                pub fn complete(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().complete)(this).ok() }
                }
            }
            impl ::winrt::RuntimeName for DataProviderDeferral {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.DataProviderDeferral";
            }
            unsafe impl ::winrt::ComInterface for DataProviderDeferral {
                type VTable = abi_IDataProviderDeferral;
                fn iid() -> ::winrt::Guid {
                    <IDataProviderDeferral as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DataProviderDeferral {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.DataProviderDeferral;{c2cf2373-2d26-43d9-b69d-dcb86d03f6da})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataProviderDeferral {
                type Abi = ::winrt::RawComPtr<IDataProviderDeferral>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataProviderDeferral> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataProviderDeferral> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DataProviderDeferral {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DataProviderDeferral",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DataProviderDeferral> for IDataProviderDeferral {
                fn from(value: DataProviderDeferral) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataProviderDeferral> for IDataProviderDeferral {
                fn from(value: &DataProviderDeferral) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataProviderDeferral>> for DataProviderDeferral {
                fn into(self) -> ::winrt::Param<'a, IDataProviderDeferral> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataProviderDeferral>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataProviderDeferral>>
                for &'a DataProviderDeferral
            {
                fn into(self) -> ::winrt::Param<'a, IDataProviderDeferral> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataProviderDeferral>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataProviderDeferral> for ::winrt::Object {
                fn from(value: DataProviderDeferral) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataProviderDeferral> for ::winrt::Object {
                fn from(value: &DataProviderDeferral) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for DataProviderDeferral {}
            unsafe impl ::std::marker::Sync for DataProviderDeferral {}
            #[repr(transparent)]
            pub struct DataProviderHandler {
                ptr: ::winrt::ComPtr<DataProviderHandler>,
            }
            impl DataProviderHandler {
                pub fn invoke<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, DataProviderRequest>>,
                >(
                    &self,
                    request: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().invoke)(this, request.into().get_abi()).ok() }
                }
                pub fn new<F: FnMut(&DataProviderRequest) -> ::winrt::Result<()> + 'static>(
                    invoke: F,
                ) -> Self {
                    impl_DataProviderHandler::<F>::new(invoke)
                }
            }
            unsafe impl ::winrt::ComInterface for DataProviderHandler {
                type VTable = abi_DataProviderHandler;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3891058464,
                        62196,
                        18989,
                        [146, 14, 23, 10, 47, 72, 42, 39],
                    )
                }
            }
            impl ::std::clone::Clone for DataProviderHandler {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_DataProviderHandler {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
                pub invoke: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<DataProviderHandler>,
                    request: <DataProviderRequest as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for DataProviderHandler {
                fn signature() -> String {
                    "delegate({e7ecd720-f2f4-4a2d-920e-170a2f482a27})".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataProviderHandler {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<DataProviderHandler> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<DataProviderHandler> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DataProviderHandler {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}({:?})",
                        "DataProviderHandler",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                }
            }
            impl ::std::default::Default for DataProviderHandler {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for DataProviderHandler {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            #[repr(C)]
            struct impl_DataProviderHandler<
                F: FnMut(&DataProviderRequest) -> ::winrt::Result<()> + 'static,
            > {
                vtable: *const abi_DataProviderHandler,
                count: ::winrt::RefCount,
                invoke: F,
            }
            impl<F: FnMut(&DataProviderRequest) -> ::winrt::Result<()> + 'static> impl_DataProviderHandler<F> {
                const VTABLE: abi_DataProviderHandler = abi_DataProviderHandler {
                    unknown_query_interface: impl_DataProviderHandler::<F>::unknown_query_interface,
                    unknown_add_ref: impl_DataProviderHandler::<F>::unknown_add_ref,
                    unknown_release: impl_DataProviderHandler::<F>::unknown_release,
                    invoke: impl_DataProviderHandler::<F>::invoke,
                };
                pub fn new(invoke: F) -> DataProviderHandler {
                    let value = Self {
                        vtable: &Self::VTABLE,
                        count: ::winrt::RefCount::new(),
                        invoke,
                    };
                    unsafe {
                        let mut result: DataProviderHandler = std::mem::zeroed();
                        let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                            ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                        );
                        *<DataProviderHandler as ::winrt::AbiTransferable>::set_abi(&mut result) =
                            Some(::winrt::NonNullRawComPtr::new(ptr.cast()));
                        result
                    }
                }
                extern "system" fn unknown_query_interface(
                    this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                    iid: &::winrt::Guid,
                    interface: *mut ::winrt::RawPtr,
                ) -> ::winrt::ErrorCode {
                    unsafe {
                        let this: *mut Self = this.as_raw() as _;
                        if iid == &<DataProviderHandler as ::winrt::ComInterface>::iid()
                            || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                            || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                        {
                            *interface = this as ::winrt::RawPtr;
                            (*this).count.add_ref();
                            return ::winrt::ErrorCode(0);
                        }
                        *interface = std::ptr::null_mut();
                        ::winrt::ErrorCode(0x80004002)
                    }
                }
                extern "system" fn unknown_add_ref(
                    this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                ) -> u32 {
                    unsafe {
                        let this: *mut Self = this.as_raw() as _;
                        (*this).count.add_ref()
                    }
                }
                extern "system" fn unknown_release(
                    this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                ) -> u32 {
                    unsafe {
                        let this: *mut Self = this.as_raw() as _;
                        let remaining = (*this).count.release();
                        if remaining == 0 {
                            Box::from_raw(this);
                        }
                        remaining
                    }
                }
                unsafe extern "system" fn invoke(
                    this: ::winrt::NonNullRawComPtr<DataProviderHandler>,
                    request: <DataProviderRequest as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode {
                    let this: *mut Self = this.as_raw() as _;
                    ((*this).invoke)(::winrt::AbiTransferable::from_abi(&request)).into()
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DataProviderRequest {
                ptr: ::winrt::ComPtr<IDataProviderRequest>,
            }
            impl DataProviderRequest {
                pub fn format_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().format_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn deadline(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . deadline)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_deferral(&self) -> ::winrt::Result<DataProviderDeferral> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataProviderDeferral = ::std::mem::zeroed();
                        (this.vtable().get_deferral)(
                            this,
                            <DataProviderDeferral as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_data<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_data)(this, value.into().get_abi()).ok() }
                }
            }
            impl ::winrt::RuntimeName for DataProviderRequest {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.DataProviderRequest";
            }
            unsafe impl ::winrt::ComInterface for DataProviderRequest {
                type VTable = abi_IDataProviderRequest;
                fn iid() -> ::winrt::Guid {
                    <IDataProviderRequest as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DataProviderRequest {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.DataProviderRequest;{ebbc7157-d3c8-47da-acde-f82388d5f716})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DataProviderRequest {
                type Abi = ::winrt::RawComPtr<IDataProviderRequest>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataProviderRequest> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataProviderRequest> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DataProviderRequest {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DataProviderRequest",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DataProviderRequest> for IDataProviderRequest {
                fn from(value: DataProviderRequest) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataProviderRequest> for IDataProviderRequest {
                fn from(value: &DataProviderRequest) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataProviderRequest>> for DataProviderRequest {
                fn into(self) -> ::winrt::Param<'a, IDataProviderRequest> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataProviderRequest>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDataProviderRequest>>
                for &'a DataProviderRequest
            {
                fn into(self) -> ::winrt::Param<'a, IDataProviderRequest> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDataProviderRequest>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataProviderRequest> for ::winrt::Object {
                fn from(value: DataProviderRequest) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DataProviderRequest> for ::winrt::Object {
                fn from(value: &DataProviderRequest) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for DataProviderRequest {}
            unsafe impl ::std::marker::Sync for DataProviderRequest {}
            #[repr(transparent)]
            pub struct IDataPackage {
                ptr: ::winrt::ComPtr<IDataPackage>,
            }
            impl IDataPackage {
                pub fn get_view(&self) -> ::winrt::Result<DataPackageView> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageView = ::std::mem::zeroed();
                        (this.vtable().get_view)(
                            this,
                            <DataPackageView as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn properties(&self) -> ::winrt::Result<DataPackagePropertySet> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackagePropertySet = ::std::mem::zeroed();
                        (this.vtable().properties)(
                            this,
                            <DataPackagePropertySet as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn requested_operation(&self) -> ::winrt::Result<DataPackageOperation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageOperation = ::std::mem::zeroed();
                        (this.vtable().requested_operation)(
                            this,
                            <DataPackageOperation as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_requested_operation(
                    &self,
                    value: DataPackageOperation,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_requested_operation)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn operation_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                DataPackage,
                                OperationCompletedEventArgs,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . operation_completed)
                        (this, handler . into() . get_abi(), < super :: super
                         :: foundation :: EventRegistrationToken as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn remove_operation_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_operation_completed)(
                            this,
                            event_cookie.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn destroyed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                DataPackage,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . destroyed)
                        (this, handler . into() . get_abi(), < super :: super
                         :: foundation :: EventRegistrationToken as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn remove_destroyed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_destroyed)(this, event_cookie.into().get_abi()).ok()
                    }
                }
                pub fn set_data<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    format_id: T0__,
                    value: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_data)(
                            this,
                            format_id.into().get_abi(),
                            value.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn set_data_provider<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, DataProviderHandler>>,
                >(
                    &self,
                    format_id: T0__,
                    delay_renderer: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_data_provider)(
                            this,
                            format_id.into().get_abi(),
                            delay_renderer.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn set_text<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_text)(this, value.into().get_abi()).ok() }
                }
                pub fn set_uri<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_uri)(this, value.into().get_abi()).ok() }
                }
                pub fn set_html_format<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_html_format)(this, value.into().get_abi()).ok() }
                }
                pub fn resource_map(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IMap<
                        ::winrt::HString,
                        super::super::storage::streams::RandomAccessStreamReference,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            super::super::storage::streams::RandomAccessStreamReference,
                        > = ::std::mem::zeroed();
                        (this.vtable().resource_map)(
                            this,
                            <super::super::foundation::collections::IMap<
                                ::winrt::HString,
                                super::super::storage::streams::RandomAccessStreamReference,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rtf<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rtf)(this, value.into().get_abi()).ok() }
                }
                pub fn set_bitmap<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::RandomAccessStreamReference,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_bitmap)(this, value.into().get_abi()).ok() }
                }
                pub fn set_storage_items_read_only<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::storage::IStorageItem,
                            >,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_storage_items_read_only)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn set_storage_items<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::storage::IStorageItem,
                            >,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                    read_only: bool,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_storage_items)(this, value.into().get_abi(), read_only)
                            .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackage {
                type VTable = abi_IDataPackage;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1642853831,
                        61418,
                        17222,
                        [149, 84, 152, 29, 126, 25, 143, 254],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackage {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackage where
            {
                base__ : [usize ; 6], pub get_view : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, result__ : *
                   mut < DataPackageView as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub properties : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, result__ : *
                   mut < DataPackagePropertySet as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub
                requested_operation : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, result__ : *
                   mut < DataPackageOperation as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub
                set_requested_operation : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : <
                   DataPackageOperation as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub operation_completed :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, handler : <
                   super :: super :: foundation :: TypedEventHandler :: <
                   DataPackage, OperationCompletedEventArgs > as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut < super :: super
                   :: foundation :: EventRegistrationToken as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                remove_operation_completed : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, event_cookie
                   : < super :: super :: foundation :: EventRegistrationToken
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub destroyed : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, handler : <
                   super :: super :: foundation :: TypedEventHandler :: <
                   DataPackage, :: winrt :: Object > as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut < super :: super
                   :: foundation :: EventRegistrationToken as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                remove_destroyed : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, event_cookie
                   : < super :: super :: foundation :: EventRegistrationToken
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub set_data : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, format_id :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi, value : < :: winrt :: Object as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_data_provider : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, format_id :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi, delay_renderer : < DataProviderHandler as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_text : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : < ::
                   winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub set_uri : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : <
                   super :: super :: foundation :: Uri as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_html_format : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : < ::
                   winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub resource_map : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, result__ : *
                   mut < super :: super :: foundation :: collections :: IMap
                   :: < :: winrt :: HString, super :: super :: storage ::
                   streams :: RandomAccessStreamReference > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_rtf : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : < ::
                   winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub set_bitmap : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : <
                   super :: super :: storage :: streams ::
                   RandomAccessStreamReference as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_storage_items_read_only : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : <
                   super :: super :: foundation :: collections :: IIterable ::
                   < super :: super :: storage :: IStorageItem > as :: winrt
                   :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_storage_items : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage >, value : <
                   super :: super :: foundation :: collections :: IIterable ::
                   < super :: super :: storage :: IStorageItem > as :: winrt
                   :: AbiTransferable > :: Abi, read_only : bool,) -> :: winrt
                :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackage {
                fn signature() -> String {
                    "{61ebf5c7-efea-4346-9554-981d7e198ffe}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackage {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackage> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackage> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackage {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackage",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackage {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackage {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackage> for ::winrt::Object {
                fn from(value: IDataPackage) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackage> for ::winrt::Object {
                fn from(value: &IDataPackage) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackage2 {
                ptr: ::winrt::ComPtr<IDataPackage2>,
            }
            impl IDataPackage2 {
                pub fn set_application_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_link)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn set_web_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_web_link)(this, value.into().get_abi()).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackage2 {
                type VTable = abi_IDataPackage2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        68952041,
                        9225,
                        17889,
                        [165, 56, 76, 83, 238, 238, 4, 167],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackage2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackage2 {
                base__: [usize; 6],
                pub set_application_link: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackage2>,
                    value: <super::super::foundation::Uri as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub set_web_link: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackage2>,
                    value: <super::super::foundation::Uri as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackage2 {
                fn signature() -> String {
                    "{041c1fe9-2409-45e1-a538-4c53eeee04a7}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackage2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackage2> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackage2> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackage2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackage2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackage2 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackage2 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackage2> for ::winrt::Object {
                fn from(value: IDataPackage2) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackage2> for ::winrt::Object {
                fn from(value: &IDataPackage2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackage3 {
                ptr: ::winrt::ComPtr<IDataPackage3>,
            }
            impl IDataPackage3 {
                pub fn share_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                DataPackage,
                                ShareCompletedEventArgs,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . share_completed)
                        (this, handler . into() . get_abi(), < super :: super
                         :: foundation :: EventRegistrationToken as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn remove_share_completed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    token: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_share_completed)(this, token.into().get_abi()).ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackage3 {
                type VTable = abi_IDataPackage3;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2297634653,
                        30843,
                        19762,
                        [150, 90, 169, 131, 129, 5, 160, 86],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackage3 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackage3 where
            {
                base__ : [usize ; 6], pub share_completed : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage3 >, handler : <
                   super :: super :: foundation :: TypedEventHandler :: <
                   DataPackage, ShareCompletedEventArgs > as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut < super :: super
                   :: foundation :: EventRegistrationToken as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                remove_share_completed : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackage3 >, token : <
                   super :: super :: foundation :: EventRegistrationToken as
                   :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackage3 {
                fn signature() -> String {
                    "{88f31f5d-787b-4d32-965a-a9838105a056}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackage3 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackage3> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackage3> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackage3 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackage3",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackage3 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackage3 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackage3> for ::winrt::Object {
                fn from(value: IDataPackage3) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackage3> for ::winrt::Object {
                fn from(value: &IDataPackage3) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySet {
                ptr: ::winrt::ComPtr<IDataPackagePropertySet>,
            }
            impl IDataPackagePropertySet {
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn description(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().description)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_description<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_description)(this, value.into().get_abi()).ok() }
                }
                pub fn thumbnail(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: IRandomAccessStreamReference = :: std ::
                        mem :: zeroed() ;
                        (this . vtable() . thumbnail)
                        (this, < super :: super :: storage :: streams ::
                         IRandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn set_thumbnail<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::IRandomAccessStreamReference,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_thumbnail)(this, value.into().get_abi()).ok() }
                }
                pub fn file_types(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . file_types)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn application_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().application_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_application_name<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_name)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn application_listing_uri(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().application_listing_uri)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_application_listing_uri<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_listing_uri)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn first(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IIterator<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    > as ::std::convert::From<&Self>>::from(self)
                    .first()
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<::winrt::Object> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . lookup(key,)
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . size()
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<bool> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . has_key(key,)
                }
                pub fn get_view(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IMapView<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                > {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . get_view()
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::winrt::Result<bool> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) .
                    insert(key, value,)
                }
                pub fn remove<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<()> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . remove(key,)
                }
                pub fn clear(&self) -> ::winrt::Result<()> {
                    < super :: super :: foundation :: collections :: IMap :: <
                    :: winrt :: HString, :: winrt :: Object > as :: std ::
                    convert :: From < & Self >> :: from(self) . clear()
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySet {
                type VTable = abi_IDataPackagePropertySet;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3441202155,
                        19532,
                        17466,
                        [168, 211, 245, 194, 65, 233, 22, 137],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySet {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySet where
            {
                base__ : [usize ; 6], pub title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   value : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                description : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_description : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   value : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                thumbnail : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   result__ : * mut < super :: super :: storage :: streams ::
                   IRandomAccessStreamReference as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub set_thumbnail :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   value : < super :: super :: storage :: streams ::
                   IRandomAccessStreamReference as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub file_types :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   result__ : * mut < super :: super :: foundation ::
                   collections :: IVector :: < :: winrt :: HString > as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub application_name : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_application_name : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   value : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                application_listing_uri : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   result__ : * mut < super :: super :: foundation :: Uri as
                   :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub set_application_listing_uri : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet >,
                   value : < super :: super :: foundation :: Uri as :: winrt
                   :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySet {
                fn signature() -> String {
                    "{cd1c93eb-4c4c-443a-a8d3-f5c241e91689}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySet {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySet {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySet",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySet {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySet {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySet>
                for super::super::foundation::collections::IIterable<
                    super::super::foundation::collections::IKeyValuePair<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                >
            {
                fn from(value: IDataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySet>
                for super::super::foundation::collections::IIterable<
                    super::super::foundation::collections::IKeyValuePair<
                        ::winrt::HString,
                        ::winrt::Object,
                    >,
                >
            {
                fn from(value: &IDataPackagePropertySet) -> Self {
                    <IDataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                > for IDataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                > for &'a IDataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IIterable<
                        super::super::foundation::collections::IKeyValuePair<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IIterable<
                            super::super::foundation::collections::IKeyValuePair<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<IDataPackagePropertySet>
                for super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>
            {
                fn from(value: IDataPackagePropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySet>
                for super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>
            {
                fn from(value: &IDataPackagePropertySet) -> Self {
                    <IDataPackagePropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > for IDataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > for &'a IDataPackagePropertySet
            {
                fn into(
                    self,
                ) -> ::winrt::Param<
                    'a,
                    super::super::foundation::collections::IMap<::winrt::HString, ::winrt::Object>,
                > {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<IDataPackagePropertySet> for ::winrt::Object {
                fn from(value: IDataPackagePropertySet) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySet> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::iter::IntoIterator for IDataPackagePropertySet {
                type Item = super::super::foundation::collections::IKeyValuePair<
                    ::winrt::HString,
                    ::winrt::Object,
                >;
                type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a IDataPackagePropertySet {
                type Item = super::super::foundation::collections::IKeyValuePair<
                    ::winrt::HString,
                    ::winrt::Object,
                >;
                type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySet2 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySet2>,
            }
            impl IDataPackagePropertySet2 {
                pub fn content_source_web_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().content_source_web_link)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_content_source_web_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_content_source_web_link)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn content_source_application_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().content_source_application_link)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_content_source_application_link<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_content_source_application_link)(
                            this,
                            value.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn package_family_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().package_family_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_package_family_name<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_package_family_name)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn square30x30_logo(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: IRandomAccessStreamReference = :: std ::
                        mem :: zeroed() ;
                        (this . vtable() . square30x30_logo)
                        (this, < super :: super :: storage :: streams ::
                         IRandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn set_square30x30_logo<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::IRandomAccessStreamReference,
                        >,
                    >,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_square30x30_logo)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn logo_background_color(&self) -> ::winrt::Result<super::super::ui::Color> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::ui::Color = ::std::mem::zeroed();
                        (this.vtable().logo_background_color)(
                            this,
                            <super::super::ui::Color as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_logo_background_color<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::ui::Color>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_logo_background_color)(this, value.into().get_abi()).ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySet2 {
                type VTable = abi_IDataPackagePropertySet2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3947912522,
                        38912,
                        18090,
                        [177, 129, 123, 111, 15, 43, 145, 154],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySet2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySet2 where
            {
                base__ : [usize ; 6], pub content_source_web_link : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   result__ : * mut < super :: super :: foundation :: Uri as
                   :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub set_content_source_web_link : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   value : < super :: super :: foundation :: Uri as :: winrt
                   :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                content_source_application_link : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   result__ : * mut < super :: super :: foundation :: Uri as
                   :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub set_content_source_application_link : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   value : < super :: super :: foundation :: Uri as :: winrt
                   :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                package_family_name : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_package_family_name : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   value : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                square30x30_logo : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   result__ : * mut < super :: super :: storage :: streams ::
                   IRandomAccessStreamReference as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_square30x30_logo : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   value : < super :: super :: storage :: streams ::
                   IRandomAccessStreamReference as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub
                logo_background_color : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   result__ : * mut < super :: super :: ui :: Color as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub set_logo_background_color : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySet2 >,
                   value : < super :: super :: ui :: Color as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySet2 {
                fn signature() -> String {
                    "{eb505d4a-9800-46aa-b181-7b6f0f2b919a}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySet2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet2> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet2> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySet2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySet2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySet2 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySet2 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySet2> for ::winrt::Object {
                fn from(value: IDataPackagePropertySet2) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySet2> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySet2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySet3 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySet3>,
            }
            impl IDataPackagePropertySet3 {
                pub fn enterprise_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().enterprise_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_enterprise_id<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_enterprise_id)(this, value.into().get_abi()).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySet3 {
                type VTable = abi_IDataPackagePropertySet3;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2659712411,
                        20997,
                        16411,
                        [135, 74, 69, 86, 83, 189, 57, 232],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySet3 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySet3 {
                base__: [usize; 6],
                pub enterprise_id: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackagePropertySet3>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_enterprise_id: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackagePropertySet3>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySet3 {
                fn signature() -> String {
                    "{9e87fd9b-5205-401b-874a-455653bd39e8}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySet3 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet3> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet3> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySet3 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySet3",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySet3 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySet3 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySet3> for ::winrt::Object {
                fn from(value: IDataPackagePropertySet3) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySet3> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySet3) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySet4 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySet4>,
            }
            impl IDataPackagePropertySet4 {
                pub fn content_source_user_activity_json(
                    &self,
                ) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().content_source_user_activity_json)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_content_source_user_activity_json<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_content_source_user_activity_json)(
                            this,
                            value.into().get_abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySet4 {
                type VTable = abi_IDataPackagePropertySet4;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1670441973,
                        5945,
                        19572,
                        [178, 47, 134, 95, 171, 94, 133, 69],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySet4 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySet4 {
                base__: [usize; 6],
                pub content_source_user_activity_json:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IDataPackagePropertySet4>,
                        result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub set_content_source_user_activity_json:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IDataPackagePropertySet4>,
                        value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySet4 {
                fn signature() -> String {
                    "{6390ebf5-1739-4c74-b22f-865fab5e8545}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySet4 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet4> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackagePropertySet4> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySet4 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySet4",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySet4 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySet4 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySet4> for ::winrt::Object {
                fn from(value: IDataPackagePropertySet4) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySet4> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySet4) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySetView {
                ptr: ::winrt::ComPtr<IDataPackagePropertySetView>,
            }
            impl IDataPackagePropertySetView {
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn description(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().description)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn thumbnail(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::RandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: RandomAccessStreamReference = :: std :: mem
                        :: zeroed() ;
                        (this . vtable() . thumbnail)
                        (this, < super :: super :: storage :: streams ::
                         RandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn file_types(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IVectorView<::winrt::HString>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . file_types)
                        (this, < super :: super :: foundation :: collections
                         :: IVectorView :: < :: winrt :: HString > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn application_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().application_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn application_listing_uri(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().application_listing_uri)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySetView {
                type VTable = abi_IDataPackagePropertySetView;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3108826113,
                        3098,
                        19543,
                        [190, 85, 117, 208, 18, 137, 115, 93],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySetView {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySetView where
            {
                base__ : [usize ; 6], pub title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView
                   >, result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                description : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView
                   >, result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                thumbnail : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView
                   >, result__ : * mut < super :: super :: storage :: streams
                   :: RandomAccessStreamReference as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                file_types : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView
                   >, result__ : * mut < super :: super :: foundation ::
                   collections :: IVectorView :: < :: winrt :: HString > as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub application_name : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView
                   >, result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                application_listing_uri : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView
                   >, result__ : * mut < super :: super :: foundation :: Uri
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySetView {
                fn signature() -> String {
                    "{b94cec01-0c1a-4c57-be55-75d01289735d}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySetView {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView > as ::
                    winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView > as ::
                    winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySetView {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySetView",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySetView {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySetView {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySetView> for ::winrt::Object {
                fn from(value: IDataPackagePropertySetView) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySetView> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySetView) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySetView2 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySetView2>,
            }
            impl IDataPackagePropertySetView2 {
                pub fn package_family_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().package_family_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn content_source_web_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().content_source_web_link)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn content_source_application_link(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::Uri> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::Uri = ::std::mem::zeroed();
                        (this.vtable().content_source_application_link)(
                            this,
                            <super::super::foundation::Uri as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn square30x30_logo(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: IRandomAccessStreamReference = :: std ::
                        mem :: zeroed() ;
                        (this . vtable() . square30x30_logo)
                        (this, < super :: super :: storage :: streams ::
                         IRandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn logo_background_color(&self) -> ::winrt::Result<super::super::ui::Color> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::ui::Color = ::std::mem::zeroed();
                        (this.vtable().logo_background_color)(
                            this,
                            <super::super::ui::Color as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySetView2 {
                type VTable = abi_IDataPackagePropertySetView2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1616138395,
                        36542,
                        20459,
                        [156, 30, 117, 230, 157, 229, 75, 132],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySetView2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySetView2 where
            {
                base__ : [usize ; 6], pub package_family_name : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView2
                   >, result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                content_source_web_link : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView2
                   >, result__ : * mut < super :: super :: foundation :: Uri
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub content_source_application_link : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView2
                   >, result__ : * mut < super :: super :: foundation :: Uri
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub square30x30_logo : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView2
                   >, result__ : * mut < super :: super :: storage :: streams
                   :: IRandomAccessStreamReference as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                logo_background_color : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackagePropertySetView2
                   >, result__ : * mut < super :: super :: ui :: Color as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySetView2 {
                fn signature() -> String {
                    "{6054509b-8ebe-4feb-9c1e-75e69de54b84}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySetView2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView2 > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView2 > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySetView2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySetView2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySetView2 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySetView2 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySetView2> for ::winrt::Object {
                fn from(value: IDataPackagePropertySetView2) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySetView2> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySetView2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySetView3 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySetView3>,
            }
            impl IDataPackagePropertySetView3 {
                pub fn enterprise_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().enterprise_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySetView3 {
                type VTable = abi_IDataPackagePropertySetView3;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3681963237,
                        53620,
                        18780,
                        [132, 252, 26, 81, 246, 171, 69, 215],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySetView3 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySetView3 {
                base__: [usize; 6],
                pub enterprise_id: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackagePropertySetView3>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySetView3 {
                fn signature() -> String {
                    "{db764ce5-d174-495c-84fc-1a51f6ab45d7}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySetView3 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView3 > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView3 > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySetView3 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySetView3",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySetView3 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySetView3 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySetView3> for ::winrt::Object {
                fn from(value: IDataPackagePropertySetView3) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySetView3> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySetView3) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySetView4 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySetView4>,
            }
            impl IDataPackagePropertySetView4 {
                pub fn content_source_user_activity_json(
                    &self,
                ) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().content_source_user_activity_json)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySetView4 {
                type VTable = abi_IDataPackagePropertySetView4;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1148504077,
                        53615,
                        16558,
                        [149, 128, 111, 133, 98, 185, 66, 53],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySetView4 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySetView4 {
                base__: [usize; 6],
                pub content_source_user_activity_json:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IDataPackagePropertySetView4>,
                        result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySetView4 {
                fn signature() -> String {
                    "{4474c80d-d16f-40ae-9580-6f8562b94235}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySetView4 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView4 > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView4 > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySetView4 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySetView4",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySetView4 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySetView4 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySetView4> for ::winrt::Object {
                fn from(value: IDataPackagePropertySetView4) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySetView4> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySetView4) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackagePropertySetView5 {
                ptr: ::winrt::ComPtr<IDataPackagePropertySetView5>,
            }
            impl IDataPackagePropertySetView5 {
                pub fn is_from_roaming_clipboard(&self) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().is_from_roaming_clipboard)(
                            this,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackagePropertySetView5 {
                type VTable = abi_IDataPackagePropertySetView5;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1862964293,
                        14176,
                        20667,
                        [133, 35, 196, 32, 45, 237, 125, 120],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackagePropertySetView5 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackagePropertySetView5 {
                base__: [usize; 6],
                pub is_from_roaming_clipboard: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackagePropertySetView5>,
                    result__: *mut bool,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackagePropertySetView5 {
                fn signature() -> String {
                    "{6f0a9445-3760-50bb-8523-c4202ded7d78}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackagePropertySetView5 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView5 > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IDataPackagePropertySetView5 > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IDataPackagePropertySetView5 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackagePropertySetView5",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackagePropertySetView5 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackagePropertySetView5 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackagePropertySetView5> for ::winrt::Object {
                fn from(value: IDataPackagePropertySetView5) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackagePropertySetView5> for ::winrt::Object {
                fn from(value: &IDataPackagePropertySetView5) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackageView {
                ptr: ::winrt::ComPtr<IDataPackageView>,
            }
            impl IDataPackageView {
                pub fn properties(&self) -> ::winrt::Result<DataPackagePropertySetView> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackagePropertySetView = ::std::mem::zeroed();
                        (this.vtable().properties)(
                            this,
                            <DataPackagePropertySetView as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn requested_operation(&self) -> ::winrt::Result<DataPackageOperation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageOperation = ::std::mem::zeroed();
                        (this.vtable().requested_operation)(
                            this,
                            <DataPackageOperation as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn report_operation_completed(
                    &self,
                    value: DataPackageOperation,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().report_operation_completed)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn available_formats(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IVectorView<::winrt::HString>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . available_formats)
                        (this, < super :: super :: foundation :: collections
                         :: IVectorView :: < :: winrt :: HString > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn contains<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().contains)(
                            this,
                            format_id.into().get_abi(),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_data_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::Object>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::Object,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_data_async)
                        (this, format_id . into() . get_abi(), < super ::
                         super :: foundation :: IAsyncOperation :: < :: winrt
                         :: Object > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_text_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_text_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < :: winrt :: HString > as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_custom_text_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_custom_text_async)
                        (this, format_id . into() . get_abi(), < super ::
                         super :: foundation :: IAsyncOperation :: < :: winrt
                         :: HString > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_uri_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<super::super::foundation::Uri>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::Uri,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_uri_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::Uri,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_html_format_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_html_format_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < :: winrt :: HString > as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_resource_map_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMapView<
                            ::winrt::HString,
                            super::super::storage::streams::RandomAccessStreamReference,
                        >,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMapView<
                                ::winrt::HString,
                                super::super::storage::streams::RandomAccessStreamReference,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_resource_map_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IMapView<
                                    ::winrt::HString,
                                    super::super::storage::streams::RandomAccessStreamReference,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_rtf_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_rtf_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < :: winrt :: HString > as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_bitmap_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::storage::streams::RandomAccessStreamReference,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::storage::streams::RandomAccessStreamReference,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_bitmap_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::storage::streams::RandomAccessStreamReference,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_storage_items_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<
                            super::super::storage::IStorageItem,
                        >,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::super::storage::IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_storage_items_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::super::storage::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackageView {
                type VTable = abi_IDataPackageView;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2072249457,
                        22784,
                        19845,
                        [169, 11, 16, 203, 133, 254, 53, 82],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackageView {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackageView where
            {
                base__ : [usize ; 6], pub properties : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < DataPackagePropertySetView as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                requested_operation : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < DataPackageOperation as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                report_operation_completed : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, value :
                   < DataPackageOperation as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub available_formats :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVectorView :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                contains : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >,
                   format_id : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut bool,) -> ::
                winrt :: ErrorCode, pub get_data_async : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >,
                   format_id : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut < super :: super
                   :: foundation :: IAsyncOperation :: < :: winrt :: Object >
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub get_text_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < :: winrt :: HString > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub
                get_custom_text_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >,
                   format_id : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut < super :: super
                   :: foundation :: IAsyncOperation :: < :: winrt :: HString >
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub get_uri_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < super :: super :: foundation :: Uri > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                get_html_format_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < :: winrt :: HString > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub
                get_resource_map_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < super :: super :: foundation :: collections ::
                   IMapView :: < :: winrt :: HString, super :: super ::
                   storage :: streams :: RandomAccessStreamReference > > as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub get_rtf_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < :: winrt :: HString > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub get_bitmap_async :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < super :: super :: storage :: streams ::
                   RandomAccessStreamReference > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                get_storage_items_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView >, result__
                   : * mut < super :: super :: foundation :: IAsyncOperation
                   :: < super :: super :: foundation :: collections ::
                   IVectorView :: < super :: super :: storage :: IStorageItem
                   > > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt
                :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackageView {
                fn signature() -> String {
                    "{7b840471-5900-4d85-a90b-10cb85fe3552}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackageView {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackageView> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackageView> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackageView {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackageView",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackageView {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackageView {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackageView> for ::winrt::Object {
                fn from(value: IDataPackageView) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackageView> for ::winrt::Object {
                fn from(value: &IDataPackageView) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackageView2 {
                ptr: ::winrt::ComPtr<IDataPackageView2>,
            }
            impl IDataPackageView2 {
                pub fn get_application_link_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<super::super::foundation::Uri>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::Uri,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_application_link_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::Uri,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_web_link_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<super::super::foundation::Uri>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::Uri,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_web_link_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::Uri,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackageView2 {
                type VTable = abi_IDataPackageView2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1089256085,
                        9296,
                        19485,
                        [182, 180, 237, 69, 70, 61, 238, 156],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackageView2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackageView2 {
                base__: [usize; 6],
                pub get_application_link_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackageView2>,
                    result__: *mut <super::super::foundation::IAsyncOperation<
                        super::super::foundation::Uri,
                    > as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub get_web_link_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackageView2>,
                    result__: *mut <super::super::foundation::IAsyncOperation<
                        super::super::foundation::Uri,
                    > as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackageView2 {
                fn signature() -> String {
                    "{40ecba95-2450-4c1d-b6b4-ed45463dee9c}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackageView2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackageView2> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackageView2> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackageView2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackageView2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackageView2 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackageView2 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackageView2> for ::winrt::Object {
                fn from(value: IDataPackageView2) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackageView2> for ::winrt::Object {
                fn from(value: &IDataPackageView2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackageView3 {
                ptr: ::winrt::ComPtr<IDataPackageView3>,
            }
            impl IDataPackageView3 {
                pub fn request_access_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::security::enterprise_data::ProtectionPolicyEvaluationResult,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: foundation ::
                        IAsyncOperation :: < super :: super :: security ::
                        enterprise_data :: ProtectionPolicyEvaluationResult >
                        = :: std :: mem :: zeroed() ;
                        (this . vtable() . request_access_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < super :: super :: security ::
                         enterprise_data :: ProtectionPolicyEvaluationResult >
                         as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn request_access_with_enterprise_id_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    enterprise_id: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::security::enterprise_data::ProtectionPolicyEvaluationResult,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: foundation ::
                        IAsyncOperation :: < super :: super :: security ::
                        enterprise_data :: ProtectionPolicyEvaluationResult >
                        = :: std :: mem :: zeroed() ;
                        (this . vtable() .
                         request_access_with_enterprise_id_async)
                        (this, enterprise_id . into() . get_abi(), < super ::
                         super :: foundation :: IAsyncOperation :: < super ::
                         super :: security :: enterprise_data ::
                         ProtectionPolicyEvaluationResult > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn unlock_and_assume_enterprise_identity(
                    &self,
                ) -> ::winrt::Result<
                    super::super::security::enterprise_data::ProtectionPolicyEvaluationResult,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: security ::
                        enterprise_data :: ProtectionPolicyEvaluationResult =
                        :: std :: mem :: zeroed() ;
                        (this . vtable() .
                         unlock_and_assume_enterprise_identity)
                        (this, < super :: super :: security :: enterprise_data
                         :: ProtectionPolicyEvaluationResult as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackageView3 {
                type VTable = abi_IDataPackageView3;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3547820456,
                        56749,
                        17032,
                        [132, 40, 209, 202, 227, 148, 18, 139],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackageView3 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackageView3 where
            {
                base__ : [usize ; 6], pub request_access_async : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView3 >,
                   result__ : * mut < super :: super :: foundation ::
                   IAsyncOperation :: < super :: super :: security ::
                   enterprise_data :: ProtectionPolicyEvaluationResult > as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub request_access_with_enterprise_id_async :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView3 >,
                   enterprise_id : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi, result__ : * mut < super :: super
                   :: foundation :: IAsyncOperation :: < super :: super ::
                   security :: enterprise_data ::
                   ProtectionPolicyEvaluationResult > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                unlock_and_assume_enterprise_identity : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataPackageView3 >,
                   result__ : * mut < super :: super :: security ::
                   enterprise_data :: ProtectionPolicyEvaluationResult as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackageView3 {
                fn signature() -> String {
                    "{d37771a8-ddad-4288-8428-d1cae394128b}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackageView3 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackageView3> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackageView3> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackageView3 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackageView3",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackageView3 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackageView3 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackageView3> for ::winrt::Object {
                fn from(value: IDataPackageView3) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackageView3> for ::winrt::Object {
                fn from(value: &IDataPackageView3) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataPackageView4 {
                ptr: ::winrt::ComPtr<IDataPackageView4>,
            }
            impl IDataPackageView4 {
                pub fn set_accepted_format_id<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    format_id: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_accepted_format_id)(this, format_id.into().get_abi())
                            .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataPackageView4 {
                type VTable = abi_IDataPackageView4;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3756617503,
                        57410,
                        17459,
                        [160, 159, 38, 214, 255, 218, 139, 133],
                    )
                }
            }
            impl ::std::clone::Clone for IDataPackageView4 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataPackageView4 {
                base__: [usize; 6],
                pub set_accepted_format_id: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataPackageView4>,
                    format_id: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataPackageView4 {
                fn signature() -> String {
                    "{dfe96f1f-e042-4433-a09f-26d6ffda8b85}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataPackageView4 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataPackageView4> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataPackageView4> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataPackageView4 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataPackageView4",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataPackageView4 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataPackageView4 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataPackageView4> for ::winrt::Object {
                fn from(value: IDataPackageView4) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataPackageView4> for ::winrt::Object {
                fn from(value: &IDataPackageView4) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataProviderDeferral {
                ptr: ::winrt::ComPtr<IDataProviderDeferral>,
            }
            impl IDataProviderDeferral {
                pub fn complete(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().complete)(this).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataProviderDeferral {
                type VTable = abi_IDataProviderDeferral;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3268354931,
                        11558,
                        17369,
                        [182, 157, 220, 184, 109, 3, 246, 218],
                    )
                }
            }
            impl ::std::clone::Clone for IDataProviderDeferral {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataProviderDeferral {
                base__: [usize; 6],
                pub complete: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDataProviderDeferral>,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataProviderDeferral {
                fn signature() -> String {
                    "{c2cf2373-2d26-43d9-b69d-dcb86d03f6da}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataProviderDeferral {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataProviderDeferral> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataProviderDeferral> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataProviderDeferral {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataProviderDeferral",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataProviderDeferral {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataProviderDeferral {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataProviderDeferral> for ::winrt::Object {
                fn from(value: IDataProviderDeferral) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataProviderDeferral> for ::winrt::Object {
                fn from(value: &IDataProviderDeferral) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDataProviderRequest {
                ptr: ::winrt::ComPtr<IDataProviderRequest>,
            }
            impl IDataProviderRequest {
                pub fn format_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().format_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn deadline(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . deadline)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn get_deferral(&self) -> ::winrt::Result<DataProviderDeferral> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataProviderDeferral = ::std::mem::zeroed();
                        (this.vtable().get_deferral)(
                            this,
                            <DataProviderDeferral as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_data<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_data)(this, value.into().get_abi()).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IDataProviderRequest {
                type VTable = abi_IDataProviderRequest;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3954995543,
                        54216,
                        18394,
                        [172, 222, 248, 35, 136, 213, 247, 22],
                    )
                }
            }
            impl ::std::clone::Clone for IDataProviderRequest {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDataProviderRequest where
            {
                base__ : [usize ; 6], pub format_id : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataProviderRequest >,
                   result__ : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                deadline : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataProviderRequest >,
                   result__ : * mut < super :: super :: foundation :: DateTime
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub get_deferral : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataProviderRequest >,
                   result__ : * mut < DataProviderDeferral as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_data : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IDataProviderRequest >,
                   value : < :: winrt :: Object as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDataProviderRequest {
                fn signature() -> String {
                    "{ebbc7157-d3c8-47da-acde-f82388d5f716}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDataProviderRequest {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDataProviderRequest> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDataProviderRequest> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDataProviderRequest {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDataProviderRequest",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDataProviderRequest {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDataProviderRequest {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDataProviderRequest> for ::winrt::Object {
                fn from(value: IDataProviderRequest) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDataProviderRequest> for ::winrt::Object {
                fn from(value: &IDataProviderRequest) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IOperationCompletedEventArgs {
                ptr: ::winrt::ComPtr<IOperationCompletedEventArgs>,
            }
            impl IOperationCompletedEventArgs {
                pub fn operation(&self) -> ::winrt::Result<DataPackageOperation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageOperation = ::std::mem::zeroed();
                        (this.vtable().operation)(
                            this,
                            <DataPackageOperation as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IOperationCompletedEventArgs {
                type VTable = abi_IOperationCompletedEventArgs;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3887018653,
                        1309,
                        20395,
                        [177, 169, 71, 253, 119, 247, 10, 65],
                    )
                }
            }
            impl ::std::clone::Clone for IOperationCompletedEventArgs {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IOperationCompletedEventArgs {
                base__: [usize; 6],
                pub operation: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IOperationCompletedEventArgs>,
                    result__: *mut <DataPackageOperation as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IOperationCompletedEventArgs {
                fn signature() -> String {
                    "{e7af329d-051d-4fab-b1a9-47fd77f70a41}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IOperationCompletedEventArgs {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IOperationCompletedEventArgs > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IOperationCompletedEventArgs > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IOperationCompletedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IOperationCompletedEventArgs",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IOperationCompletedEventArgs {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IOperationCompletedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IOperationCompletedEventArgs> for ::winrt::Object {
                fn from(value: IOperationCompletedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IOperationCompletedEventArgs> for ::winrt::Object {
                fn from(value: &IOperationCompletedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IOperationCompletedEventArgs2 {
                ptr: ::winrt::ComPtr<IOperationCompletedEventArgs2>,
            }
            impl IOperationCompletedEventArgs2 {
                pub fn accepted_format_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().accepted_format_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IOperationCompletedEventArgs2 {
                type VTable = abi_IOperationCompletedEventArgs2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2240782451,
                        7705,
                        16645,
                        [178, 247, 200, 71, 136, 8, 213, 98],
                    )
                }
            }
            impl ::std::clone::Clone for IOperationCompletedEventArgs2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IOperationCompletedEventArgs2 {
                base__: [usize; 6],
                pub accepted_format_id: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IOperationCompletedEventArgs2>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IOperationCompletedEventArgs2 {
                fn signature() -> String {
                    "{858fa073-1e19-4105-b2f7-c8478808d562}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IOperationCompletedEventArgs2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IOperationCompletedEventArgs2 > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IOperationCompletedEventArgs2 > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IOperationCompletedEventArgs2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IOperationCompletedEventArgs2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IOperationCompletedEventArgs2 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IOperationCompletedEventArgs2 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IOperationCompletedEventArgs2> for ::winrt::Object {
                fn from(value: IOperationCompletedEventArgs2) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IOperationCompletedEventArgs2> for ::winrt::Object {
                fn from(value: &IOperationCompletedEventArgs2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IShareCompletedEventArgs {
                ptr: ::winrt::ComPtr<IShareCompletedEventArgs>,
            }
            impl IShareCompletedEventArgs {
                pub fn share_target(&self) -> ::winrt::Result<ShareTargetInfo> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareTargetInfo = ::std::mem::zeroed();
                        (this.vtable().share_target)(
                            this,
                            <ShareTargetInfo as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IShareCompletedEventArgs {
                type VTable = abi_IShareCompletedEventArgs;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1165280322,
                        63763,
                        20320,
                        [157, 247, 204, 64, 96, 171, 25, 22],
                    )
                }
            }
            impl ::std::clone::Clone for IShareCompletedEventArgs {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IShareCompletedEventArgs {
                base__: [usize; 6],
                pub share_target: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IShareCompletedEventArgs>,
                    result__: *mut <ShareTargetInfo as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IShareCompletedEventArgs {
                fn signature() -> String {
                    "{4574c442-f913-4f60-9df7-cc4060ab1916}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IShareCompletedEventArgs {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareCompletedEventArgs> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareCompletedEventArgs> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IShareCompletedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IShareCompletedEventArgs",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IShareCompletedEventArgs {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IShareCompletedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IShareCompletedEventArgs> for ::winrt::Object {
                fn from(value: IShareCompletedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IShareCompletedEventArgs> for ::winrt::Object {
                fn from(value: &IShareCompletedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IShareProvider {
                ptr: ::winrt::ComPtr<IShareProvider>,
            }
            impl IShareProvider {
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn display_icon(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::RandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: RandomAccessStreamReference = :: std :: mem
                        :: zeroed() ;
                        (this . vtable() . display_icon)
                        (this, < super :: super :: storage :: streams ::
                         RandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn background_color(&self) -> ::winrt::Result<super::super::ui::Color> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::ui::Color = ::std::mem::zeroed();
                        (this.vtable().background_color)(
                            this,
                            <super::super::ui::Color as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn tag(&self) -> ::winrt::Result<::winrt::Object> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::Object = ::std::mem::zeroed();
                        (this.vtable().tag)(
                            this,
                            <::winrt::Object as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_tag<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_tag)(this, value.into().get_abi()).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IShareProvider {
                type VTable = abi_IShareProvider;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        799793190,
                        17470,
                        19674,
                        [175, 37, 141, 129, 7, 14, 253, 128],
                    )
                }
            }
            impl ::std::clone::Clone for IShareProvider {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IShareProvider where
            {
                base__ : [usize ; 6], pub title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IShareProvider >, result__ :
                   * mut < :: winrt :: HString as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub display_icon :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IShareProvider >, result__ :
                   * mut < super :: super :: storage :: streams ::
                   RandomAccessStreamReference as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub background_color :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IShareProvider >, result__ :
                   * mut < super :: super :: ui :: Color as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                tag : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IShareProvider >, result__ :
                   * mut < :: winrt :: Object as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub set_tag : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IShareProvider >, value : <
                   :: winrt :: Object as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IShareProvider {
                fn signature() -> String {
                    "{2fabe026-443e-4cda-af25-8d81070efd80}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IShareProvider {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareProvider> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareProvider> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IShareProvider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IShareProvider",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IShareProvider {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IShareProvider {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IShareProvider> for ::winrt::Object {
                fn from(value: IShareProvider) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IShareProvider> for ::winrt::Object {
                fn from(value: &IShareProvider) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IShareProviderFactory {
                ptr: ::winrt::ComPtr<IShareProviderFactory>,
            }
            impl IShareProviderFactory {
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::RandomAccessStreamReference,
                        >,
                    >,
                    T2__: ::std::convert::Into<::winrt::Param<'a, super::super::ui::Color>>,
                    T3__: ::std::convert::Into<::winrt::Param<'a, ShareProviderHandler>>,
                >(
                    &self,
                    title: T0__,
                    display_icon: T1__,
                    background_color: T2__,
                    handler: T3__,
                ) -> ::winrt::Result<ShareProvider> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareProvider = ::std::mem::zeroed();
                        (this.vtable().create)(
                            this,
                            title.into().get_abi(),
                            display_icon.into().get_abi(),
                            background_color.into().get_abi(),
                            handler.into().get_abi(),
                            <ShareProvider as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IShareProviderFactory {
                type VTable = abi_IShareProviderFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        388634444,
                        59294,
                        20333,
                        [176, 125, 18, 143, 70, 158, 2, 150],
                    )
                }
            }
            impl ::std::clone::Clone for IShareProviderFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IShareProviderFactory where
            {
                base__ : [usize ; 6], pub create : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IShareProviderFactory >,
                   title : < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi, display_icon : < super :: super
                   :: storage :: streams :: RandomAccessStreamReference as ::
                   winrt :: AbiTransferable > :: Abi, background_color : <
                   super :: super :: ui :: Color as :: winrt ::
                   AbiTransferable > :: Abi, handler : < ShareProviderHandler
                   as :: winrt :: AbiTransferable > :: Abi, result__ : * mut <
                   ShareProvider as :: winrt :: AbiTransferable > :: Abi,) ->
                :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IShareProviderFactory {
                fn signature() -> String {
                    "{172a174c-e79e-4f6d-b07d-128f469e0296}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IShareProviderFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareProviderFactory> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareProviderFactory> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IShareProviderFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IShareProviderFactory",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IShareProviderFactory {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IShareProviderFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IShareProviderFactory> for ::winrt::Object {
                fn from(value: IShareProviderFactory) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IShareProviderFactory> for ::winrt::Object {
                fn from(value: &IShareProviderFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IShareProviderOperation {
                ptr: ::winrt::ComPtr<IShareProviderOperation>,
            }
            impl IShareProviderOperation {
                pub fn data(&self) -> ::winrt::Result<DataPackageView> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageView = ::std::mem::zeroed();
                        (this.vtable().data)(
                            this,
                            <DataPackageView as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn provider(&self) -> ::winrt::Result<ShareProvider> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareProvider = ::std::mem::zeroed();
                        (this.vtable().provider)(
                            this,
                            <ShareProvider as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn report_completed(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().report_completed)(this).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IShareProviderOperation {
                type VTable = abi_IShareProviderOperation;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        432994615,
                        54325,
                        16761,
                        [182, 175, 20, 224, 73, 43, 105, 246],
                    )
                }
            }
            impl ::std::clone::Clone for IShareProviderOperation {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IShareProviderOperation {
                base__: [usize; 6],
                pub data: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IShareProviderOperation>,
                    result__: *mut <DataPackageView as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub provider: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IShareProviderOperation>,
                    result__: *mut <ShareProvider as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub report_completed: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IShareProviderOperation>,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IShareProviderOperation {
                fn signature() -> String {
                    "{19cef937-d435-4179-b6af-14e0492b69f6}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IShareProviderOperation {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareProviderOperation> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareProviderOperation> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IShareProviderOperation {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IShareProviderOperation",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IShareProviderOperation {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IShareProviderOperation {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IShareProviderOperation> for ::winrt::Object {
                fn from(value: IShareProviderOperation) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IShareProviderOperation> for ::winrt::Object {
                fn from(value: &IShareProviderOperation) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IShareTargetInfo {
                ptr: ::winrt::ComPtr<IShareTargetInfo>,
            }
            impl IShareTargetInfo {
                pub fn app_user_model_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().app_user_model_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn share_provider(&self) -> ::winrt::Result<ShareProvider> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareProvider = ::std::mem::zeroed();
                        (this.vtable().share_provider)(
                            this,
                            <ShareProvider as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IShareTargetInfo {
                type VTable = abi_IShareTargetInfo;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        945546759,
                        50920,
                        16660,
                        [178, 148, 40, 243, 187, 111, 153, 4],
                    )
                }
            }
            impl ::std::clone::Clone for IShareTargetInfo {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IShareTargetInfo {
                base__: [usize; 6],
                pub app_user_model_id: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IShareTargetInfo>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub share_provider: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IShareTargetInfo>,
                    result__: *mut <ShareProvider as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IShareTargetInfo {
                fn signature() -> String {
                    "{385be607-c6e8-4114-b294-28f3bb6f9904}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IShareTargetInfo {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareTargetInfo> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareTargetInfo> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IShareTargetInfo {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IShareTargetInfo",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IShareTargetInfo {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IShareTargetInfo {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IShareTargetInfo> for ::winrt::Object {
                fn from(value: IShareTargetInfo) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IShareTargetInfo> for ::winrt::Object {
                fn from(value: &IShareTargetInfo) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct OperationCompletedEventArgs {
                ptr: ::winrt::ComPtr<IOperationCompletedEventArgs>,
            }
            impl OperationCompletedEventArgs {
                pub fn operation(&self) -> ::winrt::Result<DataPackageOperation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageOperation = ::std::mem::zeroed();
                        (this.vtable().operation)(
                            this,
                            <DataPackageOperation as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn accepted_format_id(&self) -> ::winrt::Result<::winrt::HString> {
                    <IOperationCompletedEventArgs2 as ::std::convert::From<&Self>>::from(self)
                        .accepted_format_id()
                }
            }
            impl ::winrt::RuntimeName for OperationCompletedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs";
            }
            unsafe impl ::winrt::ComInterface for OperationCompletedEventArgs {
                type VTable = abi_IOperationCompletedEventArgs;
                fn iid() -> ::winrt::Guid {
                    <IOperationCompletedEventArgs as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for OperationCompletedEventArgs {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs;{e7af329d-051d-4fab-b1a9-47fd77f70a41})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for OperationCompletedEventArgs {
                type Abi = ::winrt::RawComPtr<IOperationCompletedEventArgs>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IOperationCompletedEventArgs > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IOperationCompletedEventArgs > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for OperationCompletedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "OperationCompletedEventArgs",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<OperationCompletedEventArgs> for IOperationCompletedEventArgs {
                fn from(value: OperationCompletedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&OperationCompletedEventArgs> for IOperationCompletedEventArgs {
                fn from(value: &OperationCompletedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOperationCompletedEventArgs>>
                for OperationCompletedEventArgs
            {
                fn into(self) -> ::winrt::Param<'a, IOperationCompletedEventArgs> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IOperationCompletedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOperationCompletedEventArgs>>
                for &'a OperationCompletedEventArgs
            {
                fn into(self) -> ::winrt::Param<'a, IOperationCompletedEventArgs> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IOperationCompletedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<OperationCompletedEventArgs> for IOperationCompletedEventArgs2 {
                fn from(value: OperationCompletedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&OperationCompletedEventArgs> for IOperationCompletedEventArgs2 {
                fn from(value: &OperationCompletedEventArgs) -> Self {
                    <OperationCompletedEventArgs as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOperationCompletedEventArgs2>>
                for OperationCompletedEventArgs
            {
                fn into(self) -> ::winrt::Param<'a, IOperationCompletedEventArgs2> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IOperationCompletedEventArgs2>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOperationCompletedEventArgs2>>
                for &'a OperationCompletedEventArgs
            {
                fn into(self) -> ::winrt::Param<'a, IOperationCompletedEventArgs2> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IOperationCompletedEventArgs2>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<OperationCompletedEventArgs> for ::winrt::Object {
                fn from(value: OperationCompletedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&OperationCompletedEventArgs> for ::winrt::Object {
                fn from(value: &OperationCompletedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for OperationCompletedEventArgs {}
            unsafe impl ::std::marker::Sync for OperationCompletedEventArgs {}
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct ShareCompletedEventArgs {
                ptr: ::winrt::ComPtr<IShareCompletedEventArgs>,
            }
            impl ShareCompletedEventArgs {
                pub fn share_target(&self) -> ::winrt::Result<ShareTargetInfo> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareTargetInfo = ::std::mem::zeroed();
                        (this.vtable().share_target)(
                            this,
                            <ShareTargetInfo as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for ShareCompletedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs";
            }
            unsafe impl ::winrt::ComInterface for ShareCompletedEventArgs {
                type VTable = abi_IShareCompletedEventArgs;
                fn iid() -> ::winrt::Guid {
                    <IShareCompletedEventArgs as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for ShareCompletedEventArgs {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs;{4574c442-f913-4f60-9df7-cc4060ab1916})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ShareCompletedEventArgs {
                type Abi = ::winrt::RawComPtr<IShareCompletedEventArgs>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareCompletedEventArgs> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareCompletedEventArgs> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for ShareCompletedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "ShareCompletedEventArgs",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<ShareCompletedEventArgs> for IShareCompletedEventArgs {
                fn from(value: ShareCompletedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareCompletedEventArgs> for IShareCompletedEventArgs {
                fn from(value: &ShareCompletedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareCompletedEventArgs>>
                for ShareCompletedEventArgs
            {
                fn into(self) -> ::winrt::Param<'a, IShareCompletedEventArgs> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareCompletedEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareCompletedEventArgs>>
                for &'a ShareCompletedEventArgs
            {
                fn into(self) -> ::winrt::Param<'a, IShareCompletedEventArgs> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareCompletedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ShareCompletedEventArgs> for ::winrt::Object {
                fn from(value: ShareCompletedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareCompletedEventArgs> for ::winrt::Object {
                fn from(value: &ShareCompletedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for ShareCompletedEventArgs {}
            unsafe impl ::std::marker::Sync for ShareCompletedEventArgs {}
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct ShareProvider {
                ptr: ::winrt::ComPtr<IShareProvider>,
            }
            impl ShareProvider {
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn display_icon(
                    &self,
                ) -> ::winrt::Result<super::super::storage::streams::RandomAccessStreamReference>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__ : super :: super :: storage ::
                        streams :: RandomAccessStreamReference = :: std :: mem
                        :: zeroed() ;
                        (this . vtable() . display_icon)
                        (this, < super :: super :: storage :: streams ::
                         RandomAccessStreamReference as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn background_color(&self) -> ::winrt::Result<super::super::ui::Color> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::ui::Color = ::std::mem::zeroed();
                        (this.vtable().background_color)(
                            this,
                            <super::super::ui::Color as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn tag(&self) -> ::winrt::Result<::winrt::Object> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::Object = ::std::mem::zeroed();
                        (this.vtable().tag)(
                            this,
                            <::winrt::Object as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_tag<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_tag)(this, value.into().get_abi()).ok() }
                }
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    T1__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::storage::streams::RandomAccessStreamReference,
                        >,
                    >,
                    T2__: ::std::convert::Into<::winrt::Param<'a, super::super::ui::Color>>,
                    T3__: ::std::convert::Into<::winrt::Param<'a, ShareProviderHandler>>,
                >(
                    title: T0__,
                    display_icon: T1__,
                    background_color: T2__,
                    handler: T3__,
                ) -> ::winrt::Result<ShareProvider> {
                    Self::IShareProviderFactory(|f| {
                        f.create(title, display_icon, background_color, handler)
                    })
                }
                #[allow(non_snake_case)]
                fn IShareProviderFactory<
                    R,
                    F: FnOnce(&IShareProviderFactory) -> ::winrt::Result<R>,
                >(
                    callback: F,
                ) -> ::winrt::Result<R> {
                    static mut SHARED: ::winrt::FactoryCache<ShareProvider, IShareProviderFactory> =
                        ::winrt::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::winrt::RuntimeName for ShareProvider {
                const NAME: &'static str = "Windows.ApplicationModel.DataTransfer.ShareProvider";
            }
            unsafe impl ::winrt::ComInterface for ShareProvider {
                type VTable = abi_IShareProvider;
                fn iid() -> ::winrt::Guid {
                    <IShareProvider as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for ShareProvider {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.ShareProvider;{2fabe026-443e-4cda-af25-8d81070efd80})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ShareProvider {
                type Abi = ::winrt::RawComPtr<IShareProvider>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareProvider> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareProvider> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for ShareProvider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "ShareProvider",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<ShareProvider> for IShareProvider {
                fn from(value: ShareProvider) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareProvider> for IShareProvider {
                fn from(value: &ShareProvider) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareProvider>> for ShareProvider {
                fn into(self) -> ::winrt::Param<'a, IShareProvider> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareProvider>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareProvider>> for &'a ShareProvider {
                fn into(self) -> ::winrt::Param<'a, IShareProvider> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ShareProvider> for ::winrt::Object {
                fn from(value: ShareProvider) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareProvider> for ::winrt::Object {
                fn from(value: &ShareProvider) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for ShareProvider {}
            unsafe impl ::std::marker::Sync for ShareProvider {}
            #[repr(transparent)]
            pub struct ShareProviderHandler {
                ptr: ::winrt::ComPtr<ShareProviderHandler>,
            }
            impl ShareProviderHandler {
                pub fn invoke<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ShareProviderOperation>>,
                >(
                    &self,
                    operation: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().invoke)(this, operation.into().get_abi()).ok() }
                }
                pub fn new<F: FnMut(&ShareProviderOperation) -> ::winrt::Result<()> + 'static>(
                    invoke: F,
                ) -> Self {
                    impl_ShareProviderHandler::<F>::new(invoke)
                }
            }
            unsafe impl ::winrt::ComInterface for ShareProviderHandler {
                type VTable = abi_ShareProviderHandler;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3891911098,
                        57786,
                        20045,
                        [189, 101, 212, 56, 69, 211, 33, 47],
                    )
                }
            }
            impl ::std::clone::Clone for ShareProviderHandler {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ShareProviderHandler {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
                pub invoke: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<ShareProviderHandler>,
                    operation: <ShareProviderOperation as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for ShareProviderHandler {
                fn signature() -> String {
                    "delegate({e7f9d9ba-e1ba-4e4d-bd65-d43845d3212f})".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ShareProviderHandler {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<ShareProviderHandler> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<ShareProviderHandler> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for ShareProviderHandler {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}({:?})",
                        "ShareProviderHandler",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                }
            }
            impl ::std::default::Default for ShareProviderHandler {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for ShareProviderHandler {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            #[repr(C)]
            struct impl_ShareProviderHandler<
                F: FnMut(&ShareProviderOperation) -> ::winrt::Result<()> + 'static,
            > {
                vtable: *const abi_ShareProviderHandler,
                count: ::winrt::RefCount,
                invoke: F,
            }
            impl<F: FnMut(&ShareProviderOperation) -> ::winrt::Result<()> + 'static>
                impl_ShareProviderHandler<F>
            {
                const VTABLE: abi_ShareProviderHandler = abi_ShareProviderHandler {
                    unknown_query_interface:
                        impl_ShareProviderHandler::<F>::unknown_query_interface,
                    unknown_add_ref: impl_ShareProviderHandler::<F>::unknown_add_ref,
                    unknown_release: impl_ShareProviderHandler::<F>::unknown_release,
                    invoke: impl_ShareProviderHandler::<F>::invoke,
                };
                pub fn new(invoke: F) -> ShareProviderHandler {
                    let value = Self {
                        vtable: &Self::VTABLE,
                        count: ::winrt::RefCount::new(),
                        invoke,
                    };
                    unsafe {
                        let mut result: ShareProviderHandler = std::mem::zeroed();
                        let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                            ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                        );
                        *<ShareProviderHandler as ::winrt::AbiTransferable>::set_abi(&mut result) =
                            Some(::winrt::NonNullRawComPtr::new(ptr.cast()));
                        result
                    }
                }
                extern "system" fn unknown_query_interface(
                    this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                    iid: &::winrt::Guid,
                    interface: *mut ::winrt::RawPtr,
                ) -> ::winrt::ErrorCode {
                    unsafe {
                        let this: *mut Self = this.as_raw() as _;
                        if iid == &<ShareProviderHandler as ::winrt::ComInterface>::iid()
                            || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                            || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                        {
                            *interface = this as ::winrt::RawPtr;
                            (*this).count.add_ref();
                            return ::winrt::ErrorCode(0);
                        }
                        *interface = std::ptr::null_mut();
                        ::winrt::ErrorCode(0x80004002)
                    }
                }
                extern "system" fn unknown_add_ref(
                    this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                ) -> u32 {
                    unsafe {
                        let this: *mut Self = this.as_raw() as _;
                        (*this).count.add_ref()
                    }
                }
                extern "system" fn unknown_release(
                    this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                ) -> u32 {
                    unsafe {
                        let this: *mut Self = this.as_raw() as _;
                        let remaining = (*this).count.release();
                        if remaining == 0 {
                            Box::from_raw(this);
                        }
                        remaining
                    }
                }
                unsafe extern "system" fn invoke(
                    this: ::winrt::NonNullRawComPtr<ShareProviderHandler>,
                    operation: <ShareProviderOperation as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode {
                    let this: *mut Self = this.as_raw() as _;
                    ((*this).invoke)(::winrt::AbiTransferable::from_abi(&operation)).into()
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct ShareProviderOperation {
                ptr: ::winrt::ComPtr<IShareProviderOperation>,
            }
            impl ShareProviderOperation {
                pub fn data(&self) -> ::winrt::Result<DataPackageView> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DataPackageView = ::std::mem::zeroed();
                        (this.vtable().data)(
                            this,
                            <DataPackageView as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn provider(&self) -> ::winrt::Result<ShareProvider> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareProvider = ::std::mem::zeroed();
                        (this.vtable().provider)(
                            this,
                            <ShareProvider as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn report_completed(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().report_completed)(this).ok() }
                }
            }
            impl ::winrt::RuntimeName for ShareProviderOperation {
                const NAME: &'static str =
                    "Windows.ApplicationModel.DataTransfer.ShareProviderOperation";
            }
            unsafe impl ::winrt::ComInterface for ShareProviderOperation {
                type VTable = abi_IShareProviderOperation;
                fn iid() -> ::winrt::Guid {
                    <IShareProviderOperation as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for ShareProviderOperation {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.ShareProviderOperation;{19cef937-d435-4179-b6af-14e0492b69f6})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ShareProviderOperation {
                type Abi = ::winrt::RawComPtr<IShareProviderOperation>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareProviderOperation> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareProviderOperation> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for ShareProviderOperation {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "ShareProviderOperation",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<ShareProviderOperation> for IShareProviderOperation {
                fn from(value: ShareProviderOperation) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareProviderOperation> for IShareProviderOperation {
                fn from(value: &ShareProviderOperation) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareProviderOperation>>
                for ShareProviderOperation
            {
                fn into(self) -> ::winrt::Param<'a, IShareProviderOperation> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareProviderOperation>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareProviderOperation>>
                for &'a ShareProviderOperation
            {
                fn into(self) -> ::winrt::Param<'a, IShareProviderOperation> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareProviderOperation>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ShareProviderOperation> for ::winrt::Object {
                fn from(value: ShareProviderOperation) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareProviderOperation> for ::winrt::Object {
                fn from(value: &ShareProviderOperation) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for ShareProviderOperation {}
            unsafe impl ::std::marker::Sync for ShareProviderOperation {}
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct ShareTargetInfo {
                ptr: ::winrt::ComPtr<IShareTargetInfo>,
            }
            impl ShareTargetInfo {
                pub fn app_user_model_id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().app_user_model_id)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn share_provider(&self) -> ::winrt::Result<ShareProvider> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ShareProvider = ::std::mem::zeroed();
                        (this.vtable().share_provider)(
                            this,
                            <ShareProvider as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for ShareTargetInfo {
                const NAME: &'static str = "Windows.ApplicationModel.DataTransfer.ShareTargetInfo";
            }
            unsafe impl ::winrt::ComInterface for ShareTargetInfo {
                type VTable = abi_IShareTargetInfo;
                fn iid() -> ::winrt::Guid {
                    <IShareTargetInfo as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for ShareTargetInfo {
                fn signature() -> String {
                    "rc(Windows.ApplicationModel.DataTransfer.ShareTargetInfo;{385be607-c6e8-4114-b294-28f3bb6f9904})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ShareTargetInfo {
                type Abi = ::winrt::RawComPtr<IShareTargetInfo>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IShareTargetInfo> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IShareTargetInfo> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for ShareTargetInfo {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "ShareTargetInfo",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<ShareTargetInfo> for IShareTargetInfo {
                fn from(value: ShareTargetInfo) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareTargetInfo> for IShareTargetInfo {
                fn from(value: &ShareTargetInfo) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareTargetInfo>> for ShareTargetInfo {
                fn into(self) -> ::winrt::Param<'a, IShareTargetInfo> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareTargetInfo>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IShareTargetInfo>> for &'a ShareTargetInfo {
                fn into(self) -> ::winrt::Param<'a, IShareTargetInfo> {
                    ::winrt::Param::Owned(::std::convert::Into::<IShareTargetInfo>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ShareTargetInfo> for ::winrt::Object {
                fn from(value: ShareTargetInfo) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareTargetInfo> for ::winrt::Object {
                fn from(value: &ShareTargetInfo) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for ShareTargetInfo {}
            unsafe impl ::std::marker::Sync for ShareTargetInfo {}
        }
    }
    pub mod data {
        pub mod text {
            #[repr(C)]
            #[derive(Clone, Default, Debug, PartialEq)]
            pub struct TextSegment {
                pub start_position: u32,
                pub length: u32,
            }
            unsafe impl ::winrt::RuntimeType for TextSegment {
                fn signature() -> String {
                    "struct(Windows.Data.Text.TextSegment;u4;u4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for TextSegment {
                type Abi = Self;
                fn get_abi(&self) -> Self::Abi {
                    self.clone()
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self as *mut Self::Abi
                }
            }
        }
    }
    pub mod foundation {
        #[repr(transparent)]
        pub struct AsyncActionCompletedHandler {
            ptr: ::winrt::ComPtr<AsyncActionCompletedHandler>,
        }
        impl AsyncActionCompletedHandler {
            pub fn invoke<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IAsyncAction>>>(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().invoke)(
                        this,
                        async_info.into().get_abi(),
                        ::winrt::AbiTransferable::get_abi(&async_status),
                    )
                    .ok()
                }
            }
            pub fn new<F: FnMut(&IAsyncAction, AsyncStatus) -> ::winrt::Result<()> + 'static>(
                invoke: F,
            ) -> Self {
                impl_AsyncActionCompletedHandler::<F>::new(invoke)
            }
        }
        unsafe impl ::winrt::ComInterface for AsyncActionCompletedHandler {
            type VTable = abi_AsyncActionCompletedHandler;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2767019137,
                    30409,
                    16573,
                    [139, 230, 177, 217, 15, 178, 10, 231],
                )
            }
        }
        impl ::std::clone::Clone for AsyncActionCompletedHandler {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncActionCompletedHandler {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub invoke: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<AsyncActionCompletedHandler>,
                async_info: <IAsyncAction as ::winrt::AbiTransferable>::Abi,
                async_status: <AsyncStatus as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for AsyncActionCompletedHandler {
            fn signature() -> String {
                "delegate({a4ed5c81-76c9-40bd-8be6-b1d90fb20ae7})".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for AsyncActionCompletedHandler {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<AsyncActionCompletedHandler> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<AsyncActionCompletedHandler> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for AsyncActionCompletedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}({:?})",
                    "AsyncActionCompletedHandler",
                    <Self as ::winrt::AbiTransferable>::get_abi(self)
                )
            }
        }
        impl ::std::default::Default for AsyncActionCompletedHandler {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for AsyncActionCompletedHandler {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        #[repr(C)]
        struct impl_AsyncActionCompletedHandler<
            F: FnMut(&IAsyncAction, AsyncStatus) -> ::winrt::Result<()> + 'static,
        > {
            vtable: *const abi_AsyncActionCompletedHandler,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<F: FnMut(&IAsyncAction, AsyncStatus) -> ::winrt::Result<()> + 'static>
            impl_AsyncActionCompletedHandler<F>
        {
            const VTABLE: abi_AsyncActionCompletedHandler = abi_AsyncActionCompletedHandler {
                unknown_query_interface:
                    impl_AsyncActionCompletedHandler::<F>::unknown_query_interface,
                unknown_add_ref: impl_AsyncActionCompletedHandler::<F>::unknown_add_ref,
                unknown_release: impl_AsyncActionCompletedHandler::<F>::unknown_release,
                invoke: impl_AsyncActionCompletedHandler::<F>::invoke,
            };
            pub fn new(invoke: F) -> AsyncActionCompletedHandler {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(),
                    invoke,
                };
                unsafe {
                    let mut result: AsyncActionCompletedHandler = std::mem::zeroed();
                    let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                    );
                    *<AsyncActionCompletedHandler as ::winrt::AbiTransferable>::set_abi(
                        &mut result,
                    ) = Some(::winrt::NonNullRawComPtr::new(ptr.cast()));
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    if iid == &<AsyncActionCompletedHandler as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            unsafe extern "system" fn invoke(
                this: ::winrt::NonNullRawComPtr<AsyncActionCompletedHandler>,
                async_info: <IAsyncAction as ::winrt::AbiTransferable>::Abi,
                async_status: <AsyncStatus as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode {
                let this: *mut Self = this.as_raw() as _;
                ((*this).invoke)(
                    ::winrt::AbiTransferable::from_abi(&async_info),
                    *::winrt::AbiTransferable::from_abi(&async_status),
                )
                .into()
            }
        }
        #[repr(transparent)]
        pub struct AsyncOperationCompletedHandler<TResult>
        where
            TResult: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<AsyncOperationCompletedHandler<TResult>>,
            t0__: ::std::marker::PhantomData<TResult>,
        }
        impl<TResult: ::winrt::RuntimeType + 'static> AsyncOperationCompletedHandler<TResult> {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IAsyncOperation<TResult>>>,
            >(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().invoke)(
                        this,
                        async_info.into().get_abi(),
                        ::winrt::AbiTransferable::get_abi(&async_status),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(&IAsyncOperation<TResult>, AsyncStatus) -> ::winrt::Result<()> + 'static,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncOperationCompletedHandler::<TResult, F>::new(invoke)
            }
        }
        unsafe impl<TResult: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for AsyncOperationCompletedHandler<TResult>
        {
            type VTable = abi_AsyncOperationCompletedHandler<TResult>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::clone::Clone
            for AsyncOperationCompletedHandler<TResult>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncOperationCompletedHandler<TResult>
        where
            TResult: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub invoke: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<AsyncOperationCompletedHandler<TResult>>,
                async_info: <IAsyncOperation<TResult> as ::winrt::AbiTransferable>::Abi,
                async_status: <AsyncStatus as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            t0__: ::std::marker::PhantomData<TResult>,
        }
        unsafe impl<TResult: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for AsyncOperationCompletedHandler<TResult>
        {
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{fcdcf02c-e5d8-4478-915a-4d90b74b83a5}",
                    <TResult as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<TResult: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable
            for AsyncOperationCompletedHandler<TResult>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < AsyncOperationCompletedHandler :: <
                TResult > > as :: winrt :: AbiTransferable > ::
                get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < AsyncOperationCompletedHandler :: <
                TResult > > as :: winrt :: AbiTransferable > ::
                set_abi(& mut self . ptr)
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::fmt::Debug
            for AsyncOperationCompletedHandler<TResult>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}({:?})",
                    "AsyncOperationCompletedHandler`1",
                    <Self as ::winrt::AbiTransferable>::get_abi(self)
                )
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::default::Default
            for AsyncOperationCompletedHandler<TResult>
        {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                }
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self>
            for AsyncOperationCompletedHandler<TResult>
        {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        #[repr(C)]
        struct impl_AsyncOperationCompletedHandler<
            TResult,
            F: FnMut(&IAsyncOperation<TResult>, AsyncStatus) -> ::winrt::Result<()> + 'static,
        >
        where
            TResult: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncOperationCompletedHandler<TResult>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                F: FnMut(&IAsyncOperation<TResult>, AsyncStatus) -> ::winrt::Result<()> + 'static,
            > impl_AsyncOperationCompletedHandler<TResult, F>
        {
            const VTABLE: abi_AsyncOperationCompletedHandler<TResult> =
                abi_AsyncOperationCompletedHandler::<TResult> {
                    unknown_query_interface:
                        impl_AsyncOperationCompletedHandler::<TResult, F>::unknown_query_interface,
                    unknown_add_ref:
                        impl_AsyncOperationCompletedHandler::<TResult, F>::unknown_add_ref,
                    unknown_release:
                        impl_AsyncOperationCompletedHandler::<TResult, F>::unknown_release,
                    invoke: impl_AsyncOperationCompletedHandler::<TResult, F>::invoke,
                    t0__: ::std::marker::PhantomData::<TResult>,
                };
            pub fn new(invoke: F) -> AsyncOperationCompletedHandler<TResult> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(),
                    invoke,
                };
                unsafe {
                    let mut result: AsyncOperationCompletedHandler<TResult> = std::mem::zeroed();
                    let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                    );
                    * <
                    AsyncOperationCompletedHandler :: < TResult > as :: winrt
                    :: AbiTransferable > :: set_abi(& mut result) =
                    Some(:: winrt :: NonNullRawComPtr :: new(ptr . cast())) ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    if iid
                        == &<AsyncOperationCompletedHandler<TResult> as ::winrt::ComInterface>::iid(
                        )
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            unsafe extern "system" fn invoke(
                this: ::winrt::NonNullRawComPtr<AsyncOperationCompletedHandler<TResult>>,
                async_info: <IAsyncOperation<TResult> as ::winrt::AbiTransferable>::Abi,
                async_status: <AsyncStatus as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode {
                let this: *mut Self = this.as_raw() as _;
                ((*this).invoke)(
                    ::winrt::AbiTransferable::from_abi(&async_info),
                    *::winrt::AbiTransferable::from_abi(&async_status),
                )
                .into()
            }
        }
        #[repr(transparent)]
        pub struct AsyncOperationProgressHandler<TResult, TProgress>
        where
            TResult: ::winrt::RuntimeType + 'static,
            TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<AsyncOperationProgressHandler<TResult, TProgress>>,
            t0__: ::std::marker::PhantomData<TResult>,
            t1__: ::std::marker::PhantomData<TProgress>,
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > AsyncOperationProgressHandler<TResult, TProgress>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<
                    ::winrt::Param<'a, IAsyncOperationWithProgress<TResult, TProgress>>,
                >,
                T1__: ::std::convert::Into<::winrt::Param<'a, TProgress>>,
            >(
                &self,
                async_info: T0__,
                progress_info: T1__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().invoke)(
                        this,
                        async_info.into().get_abi(),
                        progress_info.into().get_abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &IAsyncOperationWithProgress<TResult, TProgress>,
                        &TProgress,
                    ) -> ::winrt::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncOperationProgressHandler::<TResult, TProgress, F>::new(invoke)
            }
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface for AsyncOperationProgressHandler<TResult, TProgress>
        {
            type VTable = abi_AsyncOperationProgressHandler<TResult, TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncOperationProgressHandler < TResult,
        TProgress > where TResult : :: winrt :: RuntimeType + 'static,
        TProgress : :: winrt :: RuntimeType + 'static,
        {
            pub unknown_query_interface : extern "system"
            fn(:: winrt :: NonNullRawComPtr < :: winrt :: IUnknown >, & ::
               winrt :: Guid, * mut :: winrt :: RawPtr) -> :: winrt ::
            ErrorCode, pub unknown_add_ref : extern "system"
            fn(:: winrt :: NonNullRawComPtr < :: winrt :: IUnknown >) -> u32,
            pub unknown_release : extern "system"
            fn(:: winrt :: NonNullRawComPtr < :: winrt :: IUnknown >) -> u32,
            pub invoke : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < AsyncOperationProgressHandler ::
               < TResult, TProgress > >, async_info : <
               IAsyncOperationWithProgress :: < TResult, TProgress > as ::
               winrt :: AbiTransferable > :: Abi, progress_info : < TProgress
               as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, t0__ : :: std :: marker :: PhantomData :: < TResult >,
            t1__ : :: std :: marker :: PhantomData :: < TProgress >,
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{55690902-0aab-421a-8778-f8ce5026d758}",
                    <TResult as ::winrt::RuntimeType>::signature(),
                    <TProgress as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::AbiTransferable for AsyncOperationProgressHandler<TResult, TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < AsyncOperationProgressHandler :: <
                TResult, TProgress > > as :: winrt :: AbiTransferable > ::
                get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < AsyncOperationProgressHandler :: <
                TResult, TProgress > > as :: winrt :: AbiTransferable > ::
                set_abi(& mut self . ptr)
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}({:?})",
                    "AsyncOperationProgressHandler`2",
                    <Self as ::winrt::AbiTransferable>::get_abi(self)
                )
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::default::Default for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                }
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::cmp::PartialEq<Self> for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        #[repr(C)]
        struct impl_AsyncOperationProgressHandler<
            TResult,
            TProgress,
            F: FnMut(
                    &IAsyncOperationWithProgress<TResult, TProgress>,
                    &TProgress,
                ) -> ::winrt::Result<()>
                + 'static,
        >
        where
            TResult: ::winrt::RuntimeType + 'static,
            TProgress: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncOperationProgressHandler<TResult, TProgress>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
                F: FnMut(
                        &IAsyncOperationWithProgress<TResult, TProgress>,
                        &TProgress,
                    ) -> ::winrt::Result<()>
                    + 'static,
            > impl_AsyncOperationProgressHandler<TResult, TProgress, F>
        {
            const VTABLE: abi_AsyncOperationProgressHandler<TResult, TProgress> =
                abi_AsyncOperationProgressHandler::<TResult, TProgress> {
                    unknown_query_interface: impl_AsyncOperationProgressHandler::<
                        TResult,
                        TProgress,
                        F,
                    >::unknown_query_interface,
                    unknown_add_ref:
                        impl_AsyncOperationProgressHandler::<TResult, TProgress, F>::unknown_add_ref,
                    unknown_release:
                        impl_AsyncOperationProgressHandler::<TResult, TProgress, F>::unknown_release,
                    invoke: impl_AsyncOperationProgressHandler::<TResult, TProgress, F>::invoke,
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                };
            pub fn new(invoke: F) -> AsyncOperationProgressHandler<TResult, TProgress> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(),
                    invoke,
                };
                unsafe {
                    let mut result: AsyncOperationProgressHandler<TResult, TProgress> =
                        std::mem::zeroed();
                    let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                    );
                    * <
                    AsyncOperationProgressHandler :: < TResult, TProgress > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut result) =
                    Some(:: winrt :: NonNullRawComPtr :: new(ptr . cast())) ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    if iid == &
                    < AsyncOperationProgressHandler :: < TResult, TProgress >
                    as :: winrt :: ComInterface > :: iid() || iid == & < ::
                    winrt :: IUnknown as :: winrt :: ComInterface > :: iid()
                    || iid == & < :: winrt :: IAgileObject as :: winrt ::
                    ComInterface > :: iid()
                    {
                        * interface = this as :: winrt :: RawPtr ; (* this) .
                        count . add_ref() ; return :: winrt :: ErrorCode(0) ;
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            unsafe extern "system" fn invoke(
                this: ::winrt::NonNullRawComPtr<AsyncOperationProgressHandler<TResult, TProgress>>,
                async_info : < IAsyncOperationWithProgress :: < TResult,
                   TProgress > as :: winrt :: AbiTransferable > :: Abi,
                progress_info: <TProgress as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode {
                let this: *mut Self = this.as_raw() as _;
                ((*this).invoke)(
                    ::winrt::AbiTransferable::from_abi(&async_info),
                    ::winrt::AbiTransferable::from_abi(&progress_info),
                )
                .into()
            }
        }
        #[repr(transparent)]
        pub struct AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        where
            TResult: ::winrt::RuntimeType + 'static,
            TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>,
            t0__: ::std::marker::PhantomData<TResult>,
            t1__: ::std::marker::PhantomData<TProgress>,
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<
                    ::winrt::Param<'a, IAsyncOperationWithProgress<TResult, TProgress>>,
                >,
            >(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().invoke)(
                        this,
                        async_info.into().get_abi(),
                        ::winrt::AbiTransferable::get_abi(&async_status),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &IAsyncOperationWithProgress<TResult, TProgress>,
                        AsyncStatus,
                    ) -> ::winrt::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncOperationWithProgressCompletedHandler::<TResult, TProgress, F>::new(
                    invoke,
                )
            }
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            type VTable = abi_AsyncOperationWithProgressCompletedHandler<TResult, TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct
        abi_AsyncOperationWithProgressCompletedHandler < TResult, TProgress >
        where TResult : :: winrt :: RuntimeType + 'static, TProgress : ::
        winrt :: RuntimeType + 'static,
        {
            pub unknown_query_interface : extern "system"
            fn(:: winrt :: NonNullRawComPtr < :: winrt :: IUnknown >, & ::
               winrt :: Guid, * mut :: winrt :: RawPtr) -> :: winrt ::
            ErrorCode, pub unknown_add_ref : extern "system"
            fn(:: winrt :: NonNullRawComPtr < :: winrt :: IUnknown >) -> u32,
            pub unknown_release : extern "system"
            fn(:: winrt :: NonNullRawComPtr < :: winrt :: IUnknown >) -> u32,
            pub invoke : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr <
               AsyncOperationWithProgressCompletedHandler :: < TResult,
               TProgress > >, async_info : < IAsyncOperationWithProgress :: <
               TResult, TProgress > as :: winrt :: AbiTransferable > :: Abi,
               async_status : < AsyncStatus as :: winrt :: AbiTransferable >
               :: Abi,) -> :: winrt :: ErrorCode, t0__ : :: std :: marker ::
            PhantomData :: < TResult >, t1__ : :: std :: marker :: PhantomData
            :: < TProgress >,
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{e85df41d-6aa7-46e3-a8e2-f009d840c627}",
                    <TResult as ::winrt::RuntimeType>::signature(),
                    <TProgress as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::AbiTransferable
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr <
                AsyncOperationWithProgressCompletedHandler :: < TResult,
                TProgress > > as :: winrt :: AbiTransferable > ::
                get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr <
                AsyncOperationWithProgressCompletedHandler :: < TResult,
                TProgress > > as :: winrt :: AbiTransferable > ::
                set_abi(& mut self . ptr)
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}({:?})",
                    "AsyncOperationWithProgressCompletedHandler`2",
                    <Self as ::winrt::AbiTransferable>::get_abi(self)
                )
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::default::Default
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                }
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::cmp::PartialEq<Self>
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        #[repr(C)]
        struct impl_AsyncOperationWithProgressCompletedHandler<
            TResult,
            TProgress,
            F: FnMut(
                    &IAsyncOperationWithProgress<TResult, TProgress>,
                    AsyncStatus,
                ) -> ::winrt::Result<()>
                + 'static,
        >
        where
            TResult: ::winrt::RuntimeType + 'static,
            TProgress: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncOperationWithProgressCompletedHandler<TResult, TProgress>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
                F: FnMut(
                        &IAsyncOperationWithProgress<TResult, TProgress>,
                        AsyncStatus,
                    ) -> ::winrt::Result<()>
                    + 'static,
            > impl_AsyncOperationWithProgressCompletedHandler<TResult, TProgress, F>
        {
            const VTABLE : abi_AsyncOperationWithProgressCompletedHandler <
            TResult, TProgress > =
            abi_AsyncOperationWithProgressCompletedHandler :: < TResult,
            TProgress >
            {
                unknown_query_interface :
                impl_AsyncOperationWithProgressCompletedHandler :: < TResult,
                TProgress, F > :: unknown_query_interface, unknown_add_ref :
                impl_AsyncOperationWithProgressCompletedHandler :: < TResult,
                TProgress, F > :: unknown_add_ref, unknown_release :
                impl_AsyncOperationWithProgressCompletedHandler :: < TResult,
                TProgress, F > :: unknown_release, invoke :
                impl_AsyncOperationWithProgressCompletedHandler :: < TResult,
                TProgress, F > :: invoke, t0__ : :: std :: marker ::
                PhantomData :: < TResult >, t1__ : :: std :: marker ::
                PhantomData :: < TProgress >,
            } ;
            pub fn new(
                invoke: F,
            ) -> AsyncOperationWithProgressCompletedHandler<TResult, TProgress> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(),
                    invoke,
                };
                unsafe {
                    let mut result: AsyncOperationWithProgressCompletedHandler<TResult, TProgress> =
                        std::mem::zeroed();
                    let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                    );
                    * <
                    AsyncOperationWithProgressCompletedHandler :: < TResult,
                    TProgress > as :: winrt :: AbiTransferable > ::
                    set_abi(& mut result) =
                    Some(:: winrt :: NonNullRawComPtr :: new(ptr . cast())) ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    if iid == &
                    < AsyncOperationWithProgressCompletedHandler :: < TResult,
                    TProgress > as :: winrt :: ComInterface > :: iid() || iid
                    == & < :: winrt :: IUnknown as :: winrt :: ComInterface >
                    :: iid() || iid == & < :: winrt :: IAgileObject as ::
                    winrt :: ComInterface > :: iid()
                    {
                        * interface = this as :: winrt :: RawPtr ; (* this) .
                        count . add_ref() ; return :: winrt :: ErrorCode(0) ;
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            unsafe extern "system" fn invoke(
                this: ::winrt::NonNullRawComPtr<
                    AsyncOperationWithProgressCompletedHandler<TResult, TProgress>,
                >,
                async_info : < IAsyncOperationWithProgress
                   :: < TResult, TProgress > as :: winrt :: AbiTransferable >
                   :: Abi,
                async_status: <AsyncStatus as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode {
                let this: *mut Self = this.as_raw() as _;
                ((*this).invoke)(
                    ::winrt::AbiTransferable::from_abi(&async_info),
                    *::winrt::AbiTransferable::from_abi(&async_status),
                )
                .into()
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct AsyncStatus {
            value: i32,
        }
        impl AsyncStatus {
            #![allow(non_upper_case_globals)]
            pub const Canceled: Self = Self { value: 2i32 };
            pub const Completed: Self = Self { value: 1i32 };
            pub const Error: Self = Self { value: 3i32 };
            pub const Started: Self = Self { value: 0i32 };
        }
        unsafe impl ::winrt::RuntimeType for AsyncStatus {
            fn signature() -> String {
                "enum(Windows.Foundation.AsyncStatus;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for AsyncStatus {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct DateTime {
            pub universal_time: i64,
        }
        unsafe impl ::winrt::RuntimeType for DateTime {
            fn signature() -> String {
                "struct(Windows.Foundation.DateTime;i8)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for DateTime {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct EventRegistrationToken {
            pub value: i64,
        }
        unsafe impl ::winrt::RuntimeType for EventRegistrationToken {
            fn signature() -> String {
                "struct(Windows.Foundation.EventRegistrationToken;i8)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for EventRegistrationToken {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct HResult {
            pub value: i32,
        }
        unsafe impl ::winrt::RuntimeType for HResult {
            fn signature() -> String {
                "struct(Windows.Foundation.HResult;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for HResult {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        pub struct IAsyncAction {
            ptr: ::winrt::ComPtr<IAsyncAction>,
        }
        impl IAsyncAction {
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, AsyncActionCompletedHandler>>,
            >(
                &self,
                handler: T0__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().set_completed)(this, handler.into().get_abi()).ok() }
            }
            pub fn completed(&self) -> ::winrt::Result<AsyncActionCompletedHandler> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: AsyncActionCompletedHandler = ::std::mem::zeroed();
                    (this.vtable().completed)(
                        this,
                        <AsyncActionCompletedHandler as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_results(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().get_results)(this).ok() }
            }
            pub fn id(&self) -> ::winrt::Result<u32> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).id()
            }
            pub fn status(&self) -> ::winrt::Result<AsyncStatus> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).status()
            }
            pub fn error_code(&self) -> ::winrt::Result<HResult> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).error_code()
            }
            pub fn cancel(&self) -> ::winrt::Result<()> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).cancel()
            }
            pub fn close(&self) -> ::winrt::Result<()> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).close()
            }
            pub fn get(&self) -> ::winrt::Result<()> {
                if self.status()? == AsyncStatus::Started {
                    unsafe {
                        let event = ::winrt::CreateEventW(
                            ::std::ptr::null_mut(),
                            1,
                            0,
                            ::std::ptr::null_mut(),
                        );
                        self.set_completed(AsyncActionCompletedHandler::new(
                            move |_sender, _args| {
                                ::winrt::SetEvent(event);
                                Ok(())
                            },
                        ))?;
                        ::winrt::WaitForSingleObject(event, 0xFFFFFFFF);
                        ::winrt::CloseHandle(event);
                    }
                }
                self.get_results()
            }
        }
        unsafe impl ::winrt::ComInterface for IAsyncAction {
            type VTable = abi_IAsyncAction;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1516535814,
                    33850,
                    19881,
                    [134, 91, 157, 38, 229, 223, 173, 123],
                )
            }
        }
        impl ::std::clone::Clone for IAsyncAction {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncAction {
            base__: [usize; 6],
            pub set_completed: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncAction>,
                handler: <AsyncActionCompletedHandler as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub completed: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncAction>,
                result__: *mut <AsyncActionCompletedHandler as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_results: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncAction>,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IAsyncAction {
            fn signature() -> String {
                "{5a648006-843a-4da9-865b-9d26e5dfad7b}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IAsyncAction {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IAsyncAction> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IAsyncAction> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IAsyncAction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IAsyncAction",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IAsyncAction {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IAsyncAction {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IAsyncAction> for IAsyncInfo {
            fn from(value: IAsyncAction) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IAsyncAction> for IAsyncInfo {
            fn from(value: &IAsyncAction) -> Self {
                <IAsyncAction as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IAsyncInfo>> for IAsyncAction {
            fn into(self) -> ::winrt::Param<'a, IAsyncInfo> {
                ::winrt::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IAsyncInfo>> for &'a IAsyncAction {
            fn into(self) -> ::winrt::Param<'a, IAsyncInfo> {
                ::winrt::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IAsyncAction> for ::winrt::Object {
            fn from(value: IAsyncAction) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IAsyncAction> for ::winrt::Object {
            fn from(value: &IAsyncAction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::future::Future for IAsyncAction {
            type Output = ::winrt::Result<()>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == AsyncStatus::Started {
                    let waker = context.waker().clone();
                    self.set_completed(AsyncActionCompletedHandler::new(move |_sender, _args| {
                        waker.wake_by_ref();
                        Ok(())
                    }))?;
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct IAsyncInfo {
            ptr: ::winrt::ComPtr<IAsyncInfo>,
        }
        impl IAsyncInfo {
            pub fn id(&self) -> ::winrt::Result<u32> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: u32 = ::std::mem::zeroed();
                    (this.vtable().id)(
                        this,
                        <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn status(&self) -> ::winrt::Result<AsyncStatus> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: AsyncStatus = ::std::mem::zeroed();
                    (this.vtable().status)(
                        this,
                        <AsyncStatus as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn error_code(&self) -> ::winrt::Result<HResult> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: HResult = ::std::mem::zeroed();
                    (this.vtable().error_code)(
                        this,
                        <HResult as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn cancel(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().cancel)(this).ok() }
            }
            pub fn close(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().close)(this).ok() }
            }
        }
        unsafe impl ::winrt::ComInterface for IAsyncInfo {
            type VTable = abi_IAsyncInfo;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(54, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70])
            }
        }
        impl ::std::clone::Clone for IAsyncInfo {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncInfo {
            base__: [usize; 6],
            pub id: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncInfo>,
                result__: *mut u32,
            ) -> ::winrt::ErrorCode,
            pub status: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncInfo>,
                result__: *mut <AsyncStatus as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub error_code: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncInfo>,
                result__: *mut <HResult as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub cancel: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncInfo>,
            ) -> ::winrt::ErrorCode,
            pub close: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IAsyncInfo>,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IAsyncInfo {
            fn signature() -> String {
                "{00000036-0000-0000-c000-000000000046}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IAsyncInfo {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IAsyncInfo> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IAsyncInfo> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IAsyncInfo {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IAsyncInfo",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IAsyncInfo {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IAsyncInfo {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IAsyncInfo> for ::winrt::Object {
            fn from(value: IAsyncInfo) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IAsyncInfo> for ::winrt::Object {
            fn from(value: &IAsyncInfo) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IAsyncOperationWithProgress<TResult, TProgress>
        where
            TResult: ::winrt::RuntimeType + 'static,
            TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<IAsyncOperationWithProgress<TResult, TProgress>>,
            t0__: ::std::marker::PhantomData<TResult>,
            t1__: ::std::marker::PhantomData<TProgress>,
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > IAsyncOperationWithProgress<TResult, TProgress>
        {
            pub fn set_progress<
                'a,
                T0__: ::std::convert::Into<
                    ::winrt::Param<'a, AsyncOperationProgressHandler<TResult, TProgress>>,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().set_progress)(this, handler.into().get_abi()).ok() }
            }
            pub fn progress(
                &self,
            ) -> ::winrt::Result<AsyncOperationProgressHandler<TResult, TProgress>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: AsyncOperationProgressHandler<TResult, TProgress> =
                        ::std::mem::zeroed();
                    (this . vtable() . progress)
                    (this, < AsyncOperationProgressHandler :: < TResult,
                     TProgress > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        AsyncOperationWithProgressCompletedHandler<TResult, TProgress>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().set_completed)(this, handler.into().get_abi()).ok() }
            }
            pub fn completed(
                &self,
            ) -> ::winrt::Result<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: AsyncOperationWithProgressCompletedHandler<
                        TResult,
                        TProgress,
                    > = ::std::mem::zeroed();
                    (this . vtable() . completed)
                    (this, < AsyncOperationWithProgressCompletedHandler :: <
                     TResult, TProgress > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn get_results(&self) -> ::winrt::Result<TResult> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: TResult = ::std::mem::zeroed();
                    (this.vtable().get_results)(
                        this,
                        <TResult as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn id(&self) -> ::winrt::Result<u32> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).id()
            }
            pub fn status(&self) -> ::winrt::Result<AsyncStatus> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).status()
            }
            pub fn error_code(&self) -> ::winrt::Result<HResult> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).error_code()
            }
            pub fn cancel(&self) -> ::winrt::Result<()> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).cancel()
            }
            pub fn close(&self) -> ::winrt::Result<()> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).close()
            }
            pub fn get(&self) -> ::winrt::Result<TResult> {
                if self.status()? == AsyncStatus::Started {
                    unsafe {
                        let event = ::winrt::CreateEventW(
                            ::std::ptr::null_mut(),
                            1,
                            0,
                            ::std::ptr::null_mut(),
                        );
                        self.set_completed(AsyncOperationWithProgressCompletedHandler::new(
                            move |_sender, _args| {
                                ::winrt::SetEvent(event);
                                Ok(())
                            },
                        ))?;
                        ::winrt::WaitForSingleObject(event, 0xFFFFFFFF);
                        ::winrt::CloseHandle(event);
                    }
                }
                self.get_results()
            }
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type VTable = abi_IAsyncOperationWithProgress<TResult, TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncOperationWithProgress < TResult,
        TProgress > where TResult : :: winrt :: RuntimeType + 'static,
        TProgress : :: winrt :: RuntimeType + 'static,
        {
            base__ : [usize ; 6], pub set_progress : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperationWithProgress :: <
               TResult, TProgress > >, handler : <
               AsyncOperationProgressHandler :: < TResult, TProgress > as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub progress : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperationWithProgress :: <
               TResult, TProgress > >, result__ : * mut <
               AsyncOperationProgressHandler :: < TResult, TProgress > as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub set_completed : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperationWithProgress :: <
               TResult, TProgress > >, handler : <
               AsyncOperationWithProgressCompletedHandler :: < TResult,
               TProgress > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub completed : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperationWithProgress :: <
               TResult, TProgress > >, result__ : * mut <
               AsyncOperationWithProgressCompletedHandler :: < TResult,
               TProgress > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub get_results : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperationWithProgress :: <
               TResult, TProgress > >, result__ : * mut < TResult as :: winrt
               :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, t0__ :
            :: std :: marker :: PhantomData :: < TResult >, t1__ : :: std ::
            marker :: PhantomData :: < TProgress >,
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{b5d036d7-e297-498f-ba60-0289e76e23dd}",
                    <TResult as ::winrt::RuntimeType>::signature(),
                    <TProgress as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::AbiTransferable for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < IAsyncOperationWithProgress :: <
                TResult, TProgress > > as :: winrt :: AbiTransferable > ::
                get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < IAsyncOperationWithProgress :: <
                TResult, TProgress > > as :: winrt :: AbiTransferable > ::
                set_abi(& mut self . ptr)
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IAsyncOperationWithProgress`2",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::default::Default for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                    t1__: ::std::marker::PhantomData::<TProgress>,
                }
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::cmp::PartialEq<Self> for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<IAsyncOperationWithProgress<TResult, TProgress>> for IAsyncInfo
        {
            fn from(value: IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<&IAsyncOperationWithProgress<TResult, TProgress>>
            for IAsyncInfo
        {
            fn from(value: &IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                <IAsyncOperationWithProgress<TResult, TProgress> as ::winrt::ComInterface>::query(
                    value,
                )
            }
        }
        impl<
                'a,
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::Into<::winrt::Param<'a, IAsyncInfo>>
            for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn into(self) -> ::winrt::Param<'a, IAsyncInfo> {
                ::winrt::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<
                'a,
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::Into<::winrt::Param<'a, IAsyncInfo>>
            for &'a IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn into(self) -> ::winrt::Param<'a, IAsyncInfo> {
                ::winrt::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<IAsyncOperationWithProgress<TResult, TProgress>>
            for ::winrt::Object
        {
            fn from(value: IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<&IAsyncOperationWithProgress<TResult, TProgress>>
            for ::winrt::Object
        {
            fn from(value: &IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<
                TResult: ::winrt::RuntimeType + 'static,
                TProgress: ::winrt::RuntimeType + 'static,
            > ::std::future::Future for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type Output = ::winrt::Result<TResult>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == AsyncStatus::Started {
                    let waker = context.waker().clone();
                    self.set_completed(AsyncOperationWithProgressCompletedHandler::new(
                        move |_sender, _args| {
                            waker.wake_by_ref();
                            Ok(())
                        },
                    ))?;
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct IAsyncOperation<TResult>
        where
            TResult: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<IAsyncOperation<TResult>>,
            t0__: ::std::marker::PhantomData<TResult>,
        }
        impl<TResult: ::winrt::RuntimeType + 'static> IAsyncOperation<TResult> {
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, AsyncOperationCompletedHandler<TResult>>>,
            >(
                &self,
                handler: T0__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().set_completed)(this, handler.into().get_abi()).ok() }
            }
            pub fn completed(&self) -> ::winrt::Result<AsyncOperationCompletedHandler<TResult>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: AsyncOperationCompletedHandler<TResult> =
                        ::std::mem::zeroed();
                    (this . vtable() . completed)
                    (this, < AsyncOperationCompletedHandler :: < TResult > as
                     :: winrt :: AbiTransferable > :: set_abi(& mut result__))
                    . and_then(|| result__)
                }
            }
            pub fn get_results(&self) -> ::winrt::Result<TResult> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: TResult = ::std::mem::zeroed();
                    (this.vtable().get_results)(
                        this,
                        <TResult as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn id(&self) -> ::winrt::Result<u32> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).id()
            }
            pub fn status(&self) -> ::winrt::Result<AsyncStatus> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).status()
            }
            pub fn error_code(&self) -> ::winrt::Result<HResult> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).error_code()
            }
            pub fn cancel(&self) -> ::winrt::Result<()> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).cancel()
            }
            pub fn close(&self) -> ::winrt::Result<()> {
                <IAsyncInfo as ::std::convert::From<&Self>>::from(self).close()
            }
            pub fn get(&self) -> ::winrt::Result<TResult> {
                if self.status()? == AsyncStatus::Started {
                    unsafe {
                        let event = ::winrt::CreateEventW(
                            ::std::ptr::null_mut(),
                            1,
                            0,
                            ::std::ptr::null_mut(),
                        );
                        self.set_completed(AsyncOperationCompletedHandler::new(
                            move |_sender, _args| {
                                ::winrt::SetEvent(event);
                                Ok(())
                            },
                        ))?;
                        ::winrt::WaitForSingleObject(event, 0xFFFFFFFF);
                        ::winrt::CloseHandle(event);
                    }
                }
                self.get_results()
            }
        }
        unsafe impl<TResult: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for IAsyncOperation<TResult>
        {
            type VTable = abi_IAsyncOperation<TResult>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::clone::Clone for IAsyncOperation<TResult> {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncOperation < TResult > where TResult
        : :: winrt :: RuntimeType + 'static,
        {
            base__ : [usize ; 6], pub set_completed : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperation :: < TResult >
               >, handler : < AsyncOperationCompletedHandler :: < TResult > as
               :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, pub completed : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperation :: < TResult >
               >, result__ : * mut < AsyncOperationCompletedHandler :: <
               TResult > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt
            :: ErrorCode, pub get_results : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IAsyncOperation :: < TResult >
               >, result__ : * mut < TResult as :: winrt :: AbiTransferable >
               :: Abi,) -> :: winrt :: ErrorCode, t0__ : :: std :: marker ::
            PhantomData :: < TResult >,
        }
        unsafe impl<TResult: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for IAsyncOperation<TResult>
        {
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{9fc2b0bb-e446-44e2-aa61-9cab8f636af2}",
                    <TResult as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<TResult: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable
            for IAsyncOperation<TResult>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IAsyncOperation<TResult>> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IAsyncOperation<TResult>> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for IAsyncOperation<TResult> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IAsyncOperation`1",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::default::Default for IAsyncOperation<TResult> {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<TResult>,
                }
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self>
            for IAsyncOperation<TResult>
        {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::convert::From<IAsyncOperation<TResult>>
            for IAsyncInfo
        {
            fn from(value: IAsyncOperation<TResult>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::From<&IAsyncOperation<TResult>> for IAsyncInfo
        {
            fn from(value: &IAsyncOperation<TResult>) -> Self {
                <IAsyncOperation<TResult> as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a, TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::Into<::winrt::Param<'a, IAsyncInfo>> for IAsyncOperation<TResult>
        {
            fn into(self) -> ::winrt::Param<'a, IAsyncInfo> {
                ::winrt::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<'a, TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::Into<::winrt::Param<'a, IAsyncInfo>> for &'a IAsyncOperation<TResult>
        {
            fn into(self) -> ::winrt::Param<'a, IAsyncInfo> {
                ::winrt::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::convert::From<IAsyncOperation<TResult>>
            for ::winrt::Object
        {
            fn from(value: IAsyncOperation<TResult>) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::From<&IAsyncOperation<TResult>> for ::winrt::Object
        {
            fn from(value: &IAsyncOperation<TResult>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<TResult: ::winrt::RuntimeType + 'static> ::std::future::Future for IAsyncOperation<TResult> {
            type Output = ::winrt::Result<TResult>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == AsyncStatus::Started {
                    let waker = context.waker().clone();
                    self.set_completed(AsyncOperationCompletedHandler::new(
                        move |_sender, _args| {
                            waker.wake_by_ref();
                            Ok(())
                        },
                    ))?;
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct IClosable {
            ptr: ::winrt::ComPtr<IClosable>,
        }
        impl IClosable {
            pub fn close(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().close)(this).ok() }
            }
        }
        unsafe impl ::winrt::ComInterface for IClosable {
            type VTable = abi_IClosable;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    819308585,
                    32676,
                    16422,
                    [131, 187, 215, 91, 174, 78, 169, 158],
                )
            }
        }
        impl ::std::clone::Clone for IClosable {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IClosable {
            base__: [usize; 6],
            pub close: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IClosable>,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IClosable {
            fn signature() -> String {
                "{30d5a829-7fa4-4026-83bb-d75bae4ea99e}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IClosable {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IClosable> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IClosable> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IClosable {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IClosable",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IClosable {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IClosable {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IClosable> for ::winrt::Object {
            fn from(value: IClosable) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IClosable> for ::winrt::Object {
            fn from(value: &IClosable) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IPropertyValue {
            ptr: ::winrt::ComPtr<IPropertyValue>,
        }
        impl IPropertyValue {
            pub fn r#type(&self) -> ::winrt::Result<PropertyType> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: PropertyType = ::std::mem::zeroed();
                    (this.vtable().r#type)(
                        this,
                        <PropertyType as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn is_numeric_scalar(&self) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().is_numeric_scalar)(
                        this,
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_uint8(&self) -> ::winrt::Result<u8> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: u8 = ::std::mem::zeroed();
                    (this.vtable().get_uint8)(
                        this,
                        <u8 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_int16(&self) -> ::winrt::Result<i16> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: i16 = ::std::mem::zeroed();
                    (this.vtable().get_int16)(
                        this,
                        <i16 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_uint16(&self) -> ::winrt::Result<u16> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: u16 = ::std::mem::zeroed();
                    (this.vtable().get_uint16)(
                        this,
                        <u16 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_int32(&self) -> ::winrt::Result<i32> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: i32 = ::std::mem::zeroed();
                    (this.vtable().get_int32)(
                        this,
                        <i32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_uint32(&self) -> ::winrt::Result<u32> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: u32 = ::std::mem::zeroed();
                    (this.vtable().get_uint32)(
                        this,
                        <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_int64(&self) -> ::winrt::Result<i64> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: i64 = ::std::mem::zeroed();
                    (this.vtable().get_int64)(
                        this,
                        <i64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_uint64(&self) -> ::winrt::Result<u64> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: u64 = ::std::mem::zeroed();
                    (this.vtable().get_uint64)(
                        this,
                        <u64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_single(&self) -> ::winrt::Result<f32> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: f32 = ::std::mem::zeroed();
                    (this.vtable().get_single)(
                        this,
                        <f32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_double(&self) -> ::winrt::Result<f64> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: f64 = ::std::mem::zeroed();
                    (this.vtable().get_double)(
                        this,
                        <f64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_char16(&self) -> ::winrt::Result<u16> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: u16 = ::std::mem::zeroed();
                    (this.vtable().get_char16)(
                        this,
                        <u16 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_boolean(&self) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().get_boolean)(
                        this,
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_string(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().get_string)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_guid(&self) -> ::winrt::Result<::winrt::Guid> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::Guid = ::std::mem::zeroed();
                    (this.vtable().get_guid)(
                        this,
                        <::winrt::Guid as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_date_time(&self) -> ::winrt::Result<DateTime> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: DateTime = ::std::mem::zeroed();
                    (this.vtable().get_date_time)(
                        this,
                        <DateTime as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_time_span(&self) -> ::winrt::Result<::winrt::TimeSpan> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::TimeSpan = ::std::mem::zeroed();
                    (this.vtable().get_time_span)(
                        this,
                        <::winrt::TimeSpan as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_point(&self) -> ::winrt::Result<Point> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Point = ::std::mem::zeroed();
                    (this.vtable().get_point)(
                        this,
                        <Point as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_size(&self) -> ::winrt::Result<Size> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Size = ::std::mem::zeroed();
                    (this.vtable().get_size)(
                        this,
                        <Size as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_rect(&self) -> ::winrt::Result<Rect> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Rect = ::std::mem::zeroed();
                    (this.vtable().get_rect)(
                        this,
                        <Rect as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_uint8_array(&self, value: &mut ::winrt::Array<u8>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_uint8_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_int16_array(&self, value: &mut ::winrt::Array<i16>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_int16_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_uint16_array(&self, value: &mut ::winrt::Array<u16>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_uint16_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_int32_array(&self, value: &mut ::winrt::Array<i32>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_int32_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_uint32_array(&self, value: &mut ::winrt::Array<u32>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_uint32_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_int64_array(&self, value: &mut ::winrt::Array<i64>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_int64_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_uint64_array(&self, value: &mut ::winrt::Array<u64>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_uint64_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_single_array(&self, value: &mut ::winrt::Array<f32>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_single_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_double_array(&self, value: &mut ::winrt::Array<f64>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_double_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_char16_array(&self, value: &mut ::winrt::Array<u16>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_char16_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_boolean_array(
                &self,
                value: &mut ::winrt::Array<bool>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_boolean_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_string_array(
                &self,
                value: &mut ::winrt::Array<::winrt::HString>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_string_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_inspectable_array(
                &self,
                value: &mut ::winrt::Array<::winrt::Object>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_inspectable_array)(
                        this,
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_guid_array(
                &self,
                value: &mut ::winrt::Array<::winrt::Guid>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_guid_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_date_time_array(
                &self,
                value: &mut ::winrt::Array<DateTime>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_date_time_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_time_span_array(
                &self,
                value: &mut ::winrt::Array<::winrt::TimeSpan>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_time_span_array)(this, value.set_abi_len(), value.set_abi())
                        .ok()
                }
            }
            pub fn get_point_array(
                &self,
                value: &mut ::winrt::Array<Point>,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_point_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_size_array(&self, value: &mut ::winrt::Array<Size>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_size_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
            pub fn get_rect_array(&self, value: &mut ::winrt::Array<Rect>) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().get_rect_array)(this, value.set_abi_len(), value.set_abi()).ok()
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IPropertyValue {
            type VTable = abi_IPropertyValue;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1272349405,
                    30036,
                    16617,
                    [154, 155, 130, 101, 78, 222, 126, 98],
                )
            }
        }
        impl ::std::clone::Clone for IPropertyValue {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IPropertyValue {
            base__: [usize; 6],
            pub r#type: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut <PropertyType as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub is_numeric_scalar: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut bool,
            ) -> ::winrt::ErrorCode,
            pub get_uint8: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut u8,
            ) -> ::winrt::ErrorCode,
            pub get_int16: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut i16,
            ) -> ::winrt::ErrorCode,
            pub get_uint16: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut u16,
            ) -> ::winrt::ErrorCode,
            pub get_int32: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut i32,
            ) -> ::winrt::ErrorCode,
            pub get_uint32: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut u32,
            ) -> ::winrt::ErrorCode,
            pub get_int64: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut i64,
            ) -> ::winrt::ErrorCode,
            pub get_uint64: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut u64,
            ) -> ::winrt::ErrorCode,
            pub get_single: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut f32,
            ) -> ::winrt::ErrorCode,
            pub get_double: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut f64,
            ) -> ::winrt::ErrorCode,
            pub get_char16: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut u16,
            ) -> ::winrt::ErrorCode,
            pub get_boolean: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut bool,
            ) -> ::winrt::ErrorCode,
            pub get_string: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_guid: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub get_date_time: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut <DateTime as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_time_span: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut ::winrt::TimeSpan,
            ) -> ::winrt::ErrorCode,
            pub get_point: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut <Point as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_size: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut <Size as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_rect: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                result__: *mut <Rect as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_uint8_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut u8,
            ) -> ::winrt::ErrorCode,
            pub get_int16_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut i16,
            ) -> ::winrt::ErrorCode,
            pub get_uint16_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut u16,
            ) -> ::winrt::ErrorCode,
            pub get_int32_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut i32,
            ) -> ::winrt::ErrorCode,
            pub get_uint32_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut u32,
            ) -> ::winrt::ErrorCode,
            pub get_int64_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut i64,
            ) -> ::winrt::ErrorCode,
            pub get_uint64_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut u64,
            ) -> ::winrt::ErrorCode,
            pub get_single_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut f32,
            ) -> ::winrt::ErrorCode,
            pub get_double_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut f64,
            ) -> ::winrt::ErrorCode,
            pub get_char16_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut u16,
            ) -> ::winrt::ErrorCode,
            pub get_boolean_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut bool,
            ) -> ::winrt::ErrorCode,
            pub get_string_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_inspectable_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut <::winrt::Object as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_guid_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub get_date_time_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut <DateTime as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_time_span_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut ::winrt::TimeSpan,
            ) -> ::winrt::ErrorCode,
            pub get_point_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut <Point as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_size_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut <Size as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub get_rect_array: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IPropertyValue>,
                array_size_value: *mut u32,
                value: *mut *mut <Rect as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IPropertyValue {
            fn signature() -> String {
                "{4bd682dd-7554-40e9-9a9b-82654ede7e62}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IPropertyValue {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IPropertyValue> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IPropertyValue> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IPropertyValue {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IPropertyValue",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IPropertyValue {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IPropertyValue {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IPropertyValue> for ::winrt::Object {
            fn from(value: IPropertyValue) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IPropertyValue> for ::winrt::Object {
            fn from(value: &IPropertyValue) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IReference<T>
        where
            T: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<IReference<T>>,
            t0__: ::std::marker::PhantomData<T>,
        }
        impl<T: ::winrt::RuntimeType + 'static> IReference<T> {
            pub fn value(&self) -> ::winrt::Result<T> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: T = ::std::mem::zeroed();
                    (this.vtable().value)(
                        this,
                        <T as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn r#type(&self) -> ::winrt::Result<PropertyType> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).r#type()
            }
            pub fn is_numeric_scalar(&self) -> ::winrt::Result<bool> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).is_numeric_scalar()
            }
            pub fn get_uint8(&self) -> ::winrt::Result<u8> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint8()
            }
            pub fn get_int16(&self) -> ::winrt::Result<i16> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_int16()
            }
            pub fn get_uint16(&self) -> ::winrt::Result<u16> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint16()
            }
            pub fn get_int32(&self) -> ::winrt::Result<i32> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_int32()
            }
            pub fn get_uint32(&self) -> ::winrt::Result<u32> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint32()
            }
            pub fn get_int64(&self) -> ::winrt::Result<i64> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_int64()
            }
            pub fn get_uint64(&self) -> ::winrt::Result<u64> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint64()
            }
            pub fn get_single(&self) -> ::winrt::Result<f32> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_single()
            }
            pub fn get_double(&self) -> ::winrt::Result<f64> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_double()
            }
            pub fn get_char16(&self) -> ::winrt::Result<u16> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_char16()
            }
            pub fn get_boolean(&self) -> ::winrt::Result<bool> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_boolean()
            }
            pub fn get_string(&self) -> ::winrt::Result<::winrt::HString> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_string()
            }
            pub fn get_guid(&self) -> ::winrt::Result<::winrt::Guid> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_guid()
            }
            pub fn get_date_time(&self) -> ::winrt::Result<DateTime> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_date_time()
            }
            pub fn get_time_span(&self) -> ::winrt::Result<::winrt::TimeSpan> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_time_span()
            }
            pub fn get_point(&self) -> ::winrt::Result<Point> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_point()
            }
            pub fn get_size(&self) -> ::winrt::Result<Size> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_size()
            }
            pub fn get_rect(&self) -> ::winrt::Result<Rect> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_rect()
            }
            pub fn get_uint8_array(&self, value: &mut ::winrt::Array<u8>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint8_array(value)
            }
            pub fn get_int16_array(&self, value: &mut ::winrt::Array<i16>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_int16_array(value)
            }
            pub fn get_uint16_array(&self, value: &mut ::winrt::Array<u16>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint16_array(value)
            }
            pub fn get_int32_array(&self, value: &mut ::winrt::Array<i32>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_int32_array(value)
            }
            pub fn get_uint32_array(&self, value: &mut ::winrt::Array<u32>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint32_array(value)
            }
            pub fn get_int64_array(&self, value: &mut ::winrt::Array<i64>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_int64_array(value)
            }
            pub fn get_uint64_array(&self, value: &mut ::winrt::Array<u64>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_uint64_array(value)
            }
            pub fn get_single_array(&self, value: &mut ::winrt::Array<f32>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_single_array(value)
            }
            pub fn get_double_array(&self, value: &mut ::winrt::Array<f64>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_double_array(value)
            }
            pub fn get_char16_array(&self, value: &mut ::winrt::Array<u16>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_char16_array(value)
            }
            pub fn get_boolean_array(
                &self,
                value: &mut ::winrt::Array<bool>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_boolean_array(value)
            }
            pub fn get_string_array(
                &self,
                value: &mut ::winrt::Array<::winrt::HString>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_string_array(value)
            }
            pub fn get_inspectable_array(
                &self,
                value: &mut ::winrt::Array<::winrt::Object>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .get_inspectable_array(value)
            }
            pub fn get_guid_array(
                &self,
                value: &mut ::winrt::Array<::winrt::Guid>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_guid_array(value)
            }
            pub fn get_date_time_array(
                &self,
                value: &mut ::winrt::Array<DateTime>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .get_date_time_array(value)
            }
            pub fn get_time_span_array(
                &self,
                value: &mut ::winrt::Array<::winrt::TimeSpan>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .get_time_span_array(value)
            }
            pub fn get_point_array(
                &self,
                value: &mut ::winrt::Array<Point>,
            ) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_point_array(value)
            }
            pub fn get_size_array(&self, value: &mut ::winrt::Array<Size>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_size_array(value)
            }
            pub fn get_rect_array(&self, value: &mut ::winrt::Array<Rect>) -> ::winrt::Result<()> {
                <IPropertyValue as ::std::convert::From<&Self>>::from(self).get_rect_array(value)
            }
        }
        unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for IReference<T> {
            type VTable = abi_IReference<T>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for IReference<T> {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<T>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IReference<T>
        where
            T: ::winrt::RuntimeType + 'static,
        {
            base__: [usize; 6],
            pub value: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IReference<T>>,
                result__: *mut <T as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            t0__: ::std::marker::PhantomData<T>,
        }
        unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for IReference<T> {
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{61c17706-2d65-11e0-9ae8-d48564015472}",
                    <T as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable for IReference<T> {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IReference<T>> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IReference<T>> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for IReference<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IReference`1",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::default::Default for IReference<T> {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<T>,
                }
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self> for IReference<T> {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IReference<T>> for IPropertyValue {
            fn from(value: IReference<T>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IReference<T>> for IPropertyValue {
            fn from(value: &IReference<T>) -> Self {
                <IReference<T> as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a, T: ::winrt::RuntimeType + 'static>
            ::std::convert::Into<::winrt::Param<'a, IPropertyValue>> for IReference<T>
        {
            fn into(self) -> ::winrt::Param<'a, IPropertyValue> {
                ::winrt::Param::Owned(::std::convert::Into::<IPropertyValue>::into(self))
            }
        }
        impl<'a, T: ::winrt::RuntimeType + 'static>
            ::std::convert::Into<::winrt::Param<'a, IPropertyValue>> for &'a IReference<T>
        {
            fn into(self) -> ::winrt::Param<'a, IPropertyValue> {
                ::winrt::Param::Owned(::std::convert::Into::<IPropertyValue>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IReference<T>> for ::winrt::Object {
            fn from(value: IReference<T>) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IReference<T>> for ::winrt::Object {
            fn from(value: &IReference<T>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStringable {
            ptr: ::winrt::ComPtr<IStringable>,
        }
        impl IStringable {
            pub fn to_string(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().to_string)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStringable {
            type VTable = abi_IStringable;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2520162132,
                    36534,
                    18672,
                    [171, 206, 193, 178, 17, 230, 39, 195],
                )
            }
        }
        impl ::std::clone::Clone for IStringable {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStringable {
            base__: [usize; 6],
            pub to_string: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStringable>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStringable {
            fn signature() -> String {
                "{96369f54-8eb6-48f0-abce-c1b211e627c3}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStringable {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStringable> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStringable> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IStringable {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    match self.to_string() {
                        Ok(s) => s.to_string(),
                        Err(_) => ::std::format!(
                            "{}({:?})",
                            "IStringable",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        ),
                    }
                )
            }
        }
        impl ::std::default::Default for IStringable {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStringable {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStringable> for ::winrt::Object {
            fn from(value: IStringable) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStringable> for ::winrt::Object {
            fn from(value: &IStringable) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IUriEscapeStatics {
            ptr: ::winrt::ComPtr<IUriEscapeStatics>,
        }
        impl IUriEscapeStatics {
            pub fn unescape_component<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                to_unescape: T0__,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().unescape_component)(
                        this,
                        to_unescape.into().get_abi(),
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn escape_component<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                to_escape: T0__,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().escape_component)(
                        this,
                        to_escape.into().get_abi(),
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IUriEscapeStatics {
            type VTable = abi_IUriEscapeStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3251909306,
                    51236,
                    17490,
                    [167, 253, 81, 43, 195, 187, 233, 161],
                )
            }
        }
        impl ::std::clone::Clone for IUriEscapeStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriEscapeStatics {
            base__: [usize; 6],
            pub unescape_component: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriEscapeStatics>,
                to_unescape: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub escape_component: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriEscapeStatics>,
                to_escape: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IUriEscapeStatics {
            fn signature() -> String {
                "{c1d432ba-c824-4452-a7fd-512bc3bbe9a1}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IUriEscapeStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IUriEscapeStatics> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IUriEscapeStatics> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IUriEscapeStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IUriEscapeStatics",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IUriEscapeStatics {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IUriEscapeStatics {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IUriEscapeStatics> for ::winrt::Object {
            fn from(value: IUriEscapeStatics) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IUriEscapeStatics> for ::winrt::Object {
            fn from(value: &IUriEscapeStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IUriRuntimeClass {
            ptr: ::winrt::ComPtr<IUriRuntimeClass>,
        }
        impl IUriRuntimeClass {
            pub fn absolute_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().absolute_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn display_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn domain(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().domain)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn extension(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().extension)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn fragment(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().fragment)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn host(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().host)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn password(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().password)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn query(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().query)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn query_parsed(&self) -> ::winrt::Result<WwwFormUrlDecoder> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: WwwFormUrlDecoder = ::std::mem::zeroed();
                    (this.vtable().query_parsed)(
                        this,
                        <WwwFormUrlDecoder as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn raw_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().raw_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn scheme_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().scheme_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn user_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().user_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn port(&self) -> ::winrt::Result<i32> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: i32 = ::std::mem::zeroed();
                    (this.vtable().port)(
                        this,
                        <i32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn suspicious(&self) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().suspicious)(
                        this,
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn equals<'a, T0__: ::std::convert::Into<::winrt::Param<'a, Uri>>>(
                &self,
                p_uri: T0__,
            ) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().equals)(
                        this,
                        p_uri.into().get_abi(),
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn combine_uri<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                relative_uri: T0__,
            ) -> ::winrt::Result<Uri> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Uri = ::std::mem::zeroed();
                    (this.vtable().combine_uri)(
                        this,
                        relative_uri.into().get_abi(),
                        <Uri as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IUriRuntimeClass {
            type VTable = abi_IUriRuntimeClass;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2654363223,
                    18610,
                    16736,
                    [149, 111, 199, 56, 81, 32, 187, 252],
                )
            }
        }
        impl ::std::clone::Clone for IUriRuntimeClass {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriRuntimeClass {
            base__: [usize; 6],
            pub absolute_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub display_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub domain: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub extension: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub fragment: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub host: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub password: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub path: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub query: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub query_parsed: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <WwwFormUrlDecoder as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub raw_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub scheme_name: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub user_name: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub port: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut i32,
            ) -> ::winrt::ErrorCode,
            pub suspicious: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                result__: *mut bool,
            ) -> ::winrt::ErrorCode,
            pub equals: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                p_uri: <Uri as ::winrt::AbiTransferable>::Abi,
                result__: *mut bool,
            ) -> ::winrt::ErrorCode,
            pub combine_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClass>,
                relative_uri: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <Uri as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IUriRuntimeClass {
            fn signature() -> String {
                "{9e365e57-48b2-4160-956f-c7385120bbfc}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IUriRuntimeClass {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IUriRuntimeClass> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IUriRuntimeClass> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IUriRuntimeClass {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IUriRuntimeClass",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IUriRuntimeClass {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IUriRuntimeClass {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IUriRuntimeClass> for ::winrt::Object {
            fn from(value: IUriRuntimeClass) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IUriRuntimeClass> for ::winrt::Object {
            fn from(value: &IUriRuntimeClass) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IUriRuntimeClassFactory {
            ptr: ::winrt::ComPtr<IUriRuntimeClassFactory>,
        }
        impl IUriRuntimeClassFactory {
            pub fn create_uri<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                uri: T0__,
            ) -> ::winrt::Result<Uri> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Uri = ::std::mem::zeroed();
                    (this.vtable().create_uri)(
                        this,
                        uri.into().get_abi(),
                        <Uri as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn create_with_relative_uri<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                base_uri: T0__,
                relative_uri: T1__,
            ) -> ::winrt::Result<Uri> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Uri = ::std::mem::zeroed();
                    (this.vtable().create_with_relative_uri)(
                        this,
                        base_uri.into().get_abi(),
                        relative_uri.into().get_abi(),
                        <Uri as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IUriRuntimeClassFactory {
            type VTable = abi_IUriRuntimeClassFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1151957359,
                    29246,
                    20447,
                    [162, 24, 3, 62, 117, 176, 192, 132],
                )
            }
        }
        impl ::std::clone::Clone for IUriRuntimeClassFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriRuntimeClassFactory {
            base__: [usize; 6],
            pub create_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClassFactory>,
                uri: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <Uri as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub create_with_relative_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClassFactory>,
                base_uri: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                relative_uri: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <Uri as ::winrt::AbiTransferable>::Abi,
            )
                -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IUriRuntimeClassFactory {
            fn signature() -> String {
                "{44a9796f-723e-4fdf-a218-033e75b0c084}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IUriRuntimeClassFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IUriRuntimeClassFactory> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IUriRuntimeClassFactory> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IUriRuntimeClassFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IUriRuntimeClassFactory",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IUriRuntimeClassFactory {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IUriRuntimeClassFactory {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IUriRuntimeClassFactory> for ::winrt::Object {
            fn from(value: IUriRuntimeClassFactory) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IUriRuntimeClassFactory> for ::winrt::Object {
            fn from(value: &IUriRuntimeClassFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IUriRuntimeClassWithAbsoluteCanonicalUri {
            ptr: ::winrt::ComPtr<IUriRuntimeClassWithAbsoluteCanonicalUri>,
        }
        impl IUriRuntimeClassWithAbsoluteCanonicalUri {
            pub fn absolute_canonical_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().absolute_canonical_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn display_iri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_iri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IUriRuntimeClassWithAbsoluteCanonicalUri {
            type VTable = abi_IUriRuntimeClassWithAbsoluteCanonicalUri;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1972213345,
                    8732,
                    18447,
                    [163, 57, 80, 101, 102, 115, 244, 111],
                )
            }
        }
        impl ::std::clone::Clone for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriRuntimeClassWithAbsoluteCanonicalUri {
            base__: [usize; 6],
            pub absolute_canonical_uri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClassWithAbsoluteCanonicalUri>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            )
                -> ::winrt::ErrorCode,
            pub display_iri: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IUriRuntimeClassWithAbsoluteCanonicalUri>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn signature() -> String {
                "{758d9661-221c-480f-a339-50656673f46f}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IUriRuntimeClassWithAbsoluteCanonicalUri {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr <
                IUriRuntimeClassWithAbsoluteCanonicalUri > as :: winrt ::
                AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr <
                IUriRuntimeClassWithAbsoluteCanonicalUri > as :: winrt ::
                AbiTransferable > :: set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IUriRuntimeClassWithAbsoluteCanonicalUri",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IUriRuntimeClassWithAbsoluteCanonicalUri> for ::winrt::Object {
            fn from(value: IUriRuntimeClassWithAbsoluteCanonicalUri) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IUriRuntimeClassWithAbsoluteCanonicalUri> for ::winrt::Object {
            fn from(value: &IUriRuntimeClassWithAbsoluteCanonicalUri) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IWwwFormUrlDecoderEntry {
            ptr: ::winrt::ComPtr<IWwwFormUrlDecoderEntry>,
        }
        impl IWwwFormUrlDecoderEntry {
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn value(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().value)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IWwwFormUrlDecoderEntry {
            type VTable = abi_IWwwFormUrlDecoderEntry;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    308180017,
                    63096,
                    20110,
                    [182, 112, 32, 169, 176, 108, 81, 45],
                )
            }
        }
        impl ::std::clone::Clone for IWwwFormUrlDecoderEntry {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWwwFormUrlDecoderEntry {
            base__: [usize; 6],
            pub name: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IWwwFormUrlDecoderEntry>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub value: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IWwwFormUrlDecoderEntry>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IWwwFormUrlDecoderEntry {
            fn signature() -> String {
                "{125e7431-f678-4e8e-b670-20a9b06c512d}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IWwwFormUrlDecoderEntry {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IWwwFormUrlDecoderEntry> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IWwwFormUrlDecoderEntry> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IWwwFormUrlDecoderEntry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IWwwFormUrlDecoderEntry",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IWwwFormUrlDecoderEntry {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IWwwFormUrlDecoderEntry {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderEntry> for ::winrt::Object {
            fn from(value: IWwwFormUrlDecoderEntry) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderEntry> for ::winrt::Object {
            fn from(value: &IWwwFormUrlDecoderEntry) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IWwwFormUrlDecoderRuntimeClass {
            ptr: ::winrt::ComPtr<IWwwFormUrlDecoderRuntimeClass>,
        }
        impl IWwwFormUrlDecoderRuntimeClass {
            pub fn get_first_value_by_name<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().get_first_value_by_name)(
                        this,
                        name.into().get_abi(),
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn first(
                &self,
            ) -> ::winrt::Result<collections::IIterator<IWwwFormUrlDecoderEntry>> {
                < collections :: IIterable :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) . first()
            }
            pub fn get_at(&self, index: u32) -> ::winrt::Result<IWwwFormUrlDecoderEntry> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) .
                get_at(index,)
            }
            pub fn size(&self) -> ::winrt::Result<u32> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) . size()
            }
            pub fn index_of<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IWwwFormUrlDecoderEntry>>,
            >(
                &self,
                value: T0__,
                index: &mut u32,
            ) -> ::winrt::Result<bool> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) .
                index_of(value, index,)
            }
            pub fn get_many(
                &self,
                start_index: u32,
                items: &mut [IWwwFormUrlDecoderEntry],
            ) -> ::winrt::Result<u32> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) .
                get_many(start_index, items,)
            }
        }
        unsafe impl ::winrt::ComInterface for IWwwFormUrlDecoderRuntimeClass {
            type VTable = abi_IWwwFormUrlDecoderRuntimeClass;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3562669137,
                    61989,
                    17730,
                    [146, 150, 14, 29, 245, 210, 84, 223],
                )
            }
        }
        impl ::std::clone::Clone for IWwwFormUrlDecoderRuntimeClass {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWwwFormUrlDecoderRuntimeClass {
            base__: [usize; 6],
            pub get_first_value_by_name: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IWwwFormUrlDecoderRuntimeClass>,
                name: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            )
                -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IWwwFormUrlDecoderRuntimeClass {
            fn signature() -> String {
                "{d45a0451-f225-4542-9296-0e1df5d254df}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IWwwFormUrlDecoderRuntimeClass {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < IWwwFormUrlDecoderRuntimeClass > as ::
                winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < IWwwFormUrlDecoderRuntimeClass > as ::
                winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for IWwwFormUrlDecoderRuntimeClass {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IWwwFormUrlDecoderRuntimeClass",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IWwwFormUrlDecoderRuntimeClass {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IWwwFormUrlDecoderRuntimeClass {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClass>
            for collections::IIterable<IWwwFormUrlDecoderEntry>
        {
            fn from(value: IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClass>
            for collections::IIterable<IWwwFormUrlDecoderEntry>
        {
            fn from(value: &IWwwFormUrlDecoderRuntimeClass) -> Self {
                <IWwwFormUrlDecoderRuntimeClass as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for &'a IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClass>
            for collections::IVectorView<IWwwFormUrlDecoderEntry>
        {
            fn from(value: IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClass>
            for collections::IVectorView<IWwwFormUrlDecoderEntry>
        {
            fn from(value: &IWwwFormUrlDecoderRuntimeClass) -> Self {
                <IWwwFormUrlDecoderRuntimeClass as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for &'a IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClass> for ::winrt::Object {
            fn from(value: IWwwFormUrlDecoderRuntimeClass) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClass> for ::winrt::Object {
            fn from(value: &IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::iter::IntoIterator for IWwwFormUrlDecoderRuntimeClass {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        impl<'a> ::std::iter::IntoIterator for &'a IWwwFormUrlDecoderRuntimeClass {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        #[repr(transparent)]
        pub struct IWwwFormUrlDecoderRuntimeClassFactory {
            ptr: ::winrt::ComPtr<IWwwFormUrlDecoderRuntimeClassFactory>,
        }
        impl IWwwFormUrlDecoderRuntimeClassFactory {
            pub fn create_www_form_url_decoder<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                query: T0__,
            ) -> ::winrt::Result<WwwFormUrlDecoder> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: WwwFormUrlDecoder = ::std::mem::zeroed();
                    (this.vtable().create_www_form_url_decoder)(
                        this,
                        query.into().get_abi(),
                        <WwwFormUrlDecoder as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IWwwFormUrlDecoderRuntimeClassFactory {
            type VTable = abi_IWwwFormUrlDecoderRuntimeClassFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1535929149,
                    9390,
                    16821,
                    [161, 191, 240, 195, 213, 68, 132, 91],
                )
            }
        }
        impl ::std::clone::Clone for IWwwFormUrlDecoderRuntimeClassFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWwwFormUrlDecoderRuntimeClassFactory {
            base__: [usize; 6],
            pub create_www_form_url_decoder: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IWwwFormUrlDecoderRuntimeClassFactory>,
                query: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                result__: *mut <WwwFormUrlDecoder as ::winrt::AbiTransferable>::Abi,
            )
                -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IWwwFormUrlDecoderRuntimeClassFactory {
            fn signature() -> String {
                "{5b8c6b3d-24ae-41b5-a1bf-f0c3d544845b}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IWwwFormUrlDecoderRuntimeClassFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < IWwwFormUrlDecoderRuntimeClassFactory >
                as :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < IWwwFormUrlDecoderRuntimeClassFactory >
                as :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for IWwwFormUrlDecoderRuntimeClassFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IWwwFormUrlDecoderRuntimeClassFactory",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IWwwFormUrlDecoderRuntimeClassFactory {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IWwwFormUrlDecoderRuntimeClassFactory {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClassFactory> for ::winrt::Object {
            fn from(value: IWwwFormUrlDecoderRuntimeClassFactory) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClassFactory> for ::winrt::Object {
            fn from(value: &IWwwFormUrlDecoderRuntimeClassFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct Point {
            pub x: f32,
            pub y: f32,
        }
        unsafe impl ::winrt::RuntimeType for Point {
            fn signature() -> String {
                "struct(Windows.Foundation.Point;f4;f4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for Point {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct PropertyType {
            value: i32,
        }
        impl PropertyType {
            #![allow(non_upper_case_globals)]
            pub const Empty: Self = Self { value: 0i32 };
            pub const UInt8: Self = Self { value: 1i32 };
            pub const Int16: Self = Self { value: 2i32 };
            pub const UInt16: Self = Self { value: 3i32 };
            pub const Int32: Self = Self { value: 4i32 };
            pub const UInt32: Self = Self { value: 5i32 };
            pub const Int64: Self = Self { value: 6i32 };
            pub const UInt64: Self = Self { value: 7i32 };
            pub const Single: Self = Self { value: 8i32 };
            pub const Double: Self = Self { value: 9i32 };
            pub const Char16: Self = Self { value: 10i32 };
            pub const Boolean: Self = Self { value: 11i32 };
            pub const String: Self = Self { value: 12i32 };
            pub const Inspectable: Self = Self { value: 13i32 };
            pub const DateTime: Self = Self { value: 14i32 };
            pub const TimeSpan: Self = Self { value: 15i32 };
            pub const Guid: Self = Self { value: 16i32 };
            pub const Point: Self = Self { value: 17i32 };
            pub const Size: Self = Self { value: 18i32 };
            pub const Rect: Self = Self { value: 19i32 };
            pub const OtherType: Self = Self { value: 20i32 };
            pub const UInt8Array: Self = Self { value: 1025i32 };
            pub const Int16Array: Self = Self { value: 1026i32 };
            pub const UInt16Array: Self = Self { value: 1027i32 };
            pub const Int32Array: Self = Self { value: 1028i32 };
            pub const UInt32Array: Self = Self { value: 1029i32 };
            pub const Int64Array: Self = Self { value: 1030i32 };
            pub const UInt64Array: Self = Self { value: 1031i32 };
            pub const SingleArray: Self = Self { value: 1032i32 };
            pub const DoubleArray: Self = Self { value: 1033i32 };
            pub const Char16Array: Self = Self { value: 1034i32 };
            pub const BooleanArray: Self = Self { value: 1035i32 };
            pub const StringArray: Self = Self { value: 1036i32 };
            pub const InspectableArray: Self = Self { value: 1037i32 };
            pub const DateTimeArray: Self = Self { value: 1038i32 };
            pub const TimeSpanArray: Self = Self { value: 1039i32 };
            pub const GuidArray: Self = Self { value: 1040i32 };
            pub const PointArray: Self = Self { value: 1041i32 };
            pub const SizeArray: Self = Self { value: 1042i32 };
            pub const RectArray: Self = Self { value: 1043i32 };
            pub const OtherTypeArray: Self = Self { value: 1044i32 };
        }
        unsafe impl ::winrt::RuntimeType for PropertyType {
            fn signature() -> String {
                "enum(Windows.Foundation.PropertyType;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for PropertyType {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct Rect {
            pub x: f32,
            pub y: f32,
            pub width: f32,
            pub height: f32,
        }
        unsafe impl ::winrt::RuntimeType for Rect {
            fn signature() -> String {
                "struct(Windows.Foundation.Rect;f4;f4;f4;f4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for Rect {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct Size {
            pub width: f32,
            pub height: f32,
        }
        unsafe impl ::winrt::RuntimeType for Size {
            fn signature() -> String {
                "struct(Windows.Foundation.Size;f4;f4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for Size {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        pub struct TypedEventHandler<TSender, TResult>
        where
            TSender: ::winrt::RuntimeType + 'static,
            TResult: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<TypedEventHandler<TSender, TResult>>,
            t0__: ::std::marker::PhantomData<TSender>,
            t1__: ::std::marker::PhantomData<TResult>,
        }
        impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            TypedEventHandler<TSender, TResult>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, TSender>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, TResult>>,
            >(
                &self,
                sender: T0__,
                args: T1__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().invoke)(this, sender.into().get_abi(), args.into().get_abi())
                        .ok()
                }
            }
            pub fn new<F: FnMut(&TSender, &TResult) -> ::winrt::Result<()> + 'static>(
                invoke: F,
            ) -> Self {
                impl_TypedEventHandler::<TSender, TResult, F>::new(invoke)
            }
        }
        unsafe impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::winrt::ComInterface for TypedEventHandler<TSender, TResult>
        {
            type VTable = abi_TypedEventHandler<TSender, TResult>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::std::clone::Clone for TypedEventHandler<TSender, TResult>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    t0__: ::std::marker::PhantomData::<TSender>,
                    t1__: ::std::marker::PhantomData::<TResult>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_TypedEventHandler<TSender, TResult>
        where
            TSender: ::winrt::RuntimeType + 'static,
            TResult: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub invoke: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<TypedEventHandler<TSender, TResult>>,
                sender: <TSender as ::winrt::AbiTransferable>::Abi,
                args: <TResult as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            t0__: ::std::marker::PhantomData<TSender>,
            t1__: ::std::marker::PhantomData<TResult>,
        }
        unsafe impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::winrt::RuntimeType for TypedEventHandler<TSender, TResult>
        {
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{9de1c534-6ae1-11e0-84e1-18a905bcc53f}",
                    <TSender as ::winrt::RuntimeType>::signature(),
                    <TResult as ::winrt::RuntimeType>::signature()
                )
            }
        }
        unsafe impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::winrt::AbiTransferable for TypedEventHandler<TSender, TResult>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < TypedEventHandler :: < TSender, TResult
                > > as :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < TypedEventHandler :: < TSender, TResult
                > > as :: winrt :: AbiTransferable > ::
                set_abi(& mut self . ptr)
            }
        }
        impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::std::fmt::Debug for TypedEventHandler<TSender, TResult>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}({:?})",
                    "TypedEventHandler`2",
                    <Self as ::winrt::AbiTransferable>::get_abi(self)
                )
            }
        }
        impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::std::default::Default for TypedEventHandler<TSender, TResult>
        {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                    t0__: ::std::marker::PhantomData::<TSender>,
                    t1__: ::std::marker::PhantomData::<TResult>,
                }
            }
        }
        impl<TSender: ::winrt::RuntimeType + 'static, TResult: ::winrt::RuntimeType + 'static>
            ::std::cmp::PartialEq<Self> for TypedEventHandler<TSender, TResult>
        {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        #[repr(C)]
        struct impl_TypedEventHandler<
            TSender,
            TResult,
            F: FnMut(&TSender, &TResult) -> ::winrt::Result<()> + 'static,
        >
        where
            TSender: ::winrt::RuntimeType + 'static,
            TResult: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_TypedEventHandler<TSender, TResult>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                TSender: ::winrt::RuntimeType + 'static,
                TResult: ::winrt::RuntimeType + 'static,
                F: FnMut(&TSender, &TResult) -> ::winrt::Result<()> + 'static,
            > impl_TypedEventHandler<TSender, TResult, F>
        {
            const VTABLE: abi_TypedEventHandler<TSender, TResult> =
                abi_TypedEventHandler::<TSender, TResult> {
                    unknown_query_interface:
                        impl_TypedEventHandler::<TSender, TResult, F>::unknown_query_interface,
                    unknown_add_ref: impl_TypedEventHandler::<TSender, TResult, F>::unknown_add_ref,
                    unknown_release: impl_TypedEventHandler::<TSender, TResult, F>::unknown_release,
                    invoke: impl_TypedEventHandler::<TSender, TResult, F>::invoke,
                    t0__: ::std::marker::PhantomData::<TSender>,
                    t1__: ::std::marker::PhantomData::<TResult>,
                };
            pub fn new(invoke: F) -> TypedEventHandler<TSender, TResult> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(),
                    invoke,
                };
                unsafe {
                    let mut result: TypedEventHandler<TSender, TResult> = std::mem::zeroed();
                    let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                    );
                    *<TypedEventHandler<TSender, TResult> as ::winrt::AbiTransferable>::set_abi(
                        &mut result,
                    ) = Some(::winrt::NonNullRawComPtr::new(ptr.cast()));
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    if iid == &<TypedEventHandler<TSender, TResult> as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            unsafe extern "system" fn invoke(
                this: ::winrt::NonNullRawComPtr<TypedEventHandler<TSender, TResult>>,
                sender: <TSender as ::winrt::AbiTransferable>::Abi,
                args: <TResult as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode {
                let this: *mut Self = this.as_raw() as _;
                ((*this).invoke)(
                    ::winrt::AbiTransferable::from_abi(&sender),
                    ::winrt::AbiTransferable::from_abi(&args),
                )
                .into()
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct Uri {
            ptr: ::winrt::ComPtr<IUriRuntimeClass>,
        }
        impl Uri {
            pub fn absolute_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().absolute_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn display_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn domain(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().domain)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn extension(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().extension)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn fragment(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().fragment)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn host(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().host)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn password(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().password)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn query(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().query)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn query_parsed(&self) -> ::winrt::Result<WwwFormUrlDecoder> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: WwwFormUrlDecoder = ::std::mem::zeroed();
                    (this.vtable().query_parsed)(
                        this,
                        <WwwFormUrlDecoder as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn raw_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().raw_uri)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn scheme_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().scheme_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn user_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().user_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn port(&self) -> ::winrt::Result<i32> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: i32 = ::std::mem::zeroed();
                    (this.vtable().port)(
                        this,
                        <i32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn suspicious(&self) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().suspicious)(
                        this,
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn equals<'a, T0__: ::std::convert::Into<::winrt::Param<'a, Uri>>>(
                &self,
                p_uri: T0__,
            ) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().equals)(
                        this,
                        p_uri.into().get_abi(),
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn combine_uri<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                relative_uri: T0__,
            ) -> ::winrt::Result<Uri> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: Uri = ::std::mem::zeroed();
                    (this.vtable().combine_uri)(
                        this,
                        relative_uri.into().get_abi(),
                        <Uri as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn absolute_canonical_uri(&self) -> ::winrt::Result<::winrt::HString> {
                <IUriRuntimeClassWithAbsoluteCanonicalUri as ::std::convert::From<&Self>>::from(
                    self,
                )
                .absolute_canonical_uri()
            }
            pub fn display_iri(&self) -> ::winrt::Result<::winrt::HString> {
                <IUriRuntimeClassWithAbsoluteCanonicalUri as ::std::convert::From<&Self>>::from(
                    self,
                )
                .display_iri()
            }
            pub fn to_string(&self) -> ::winrt::Result<::winrt::HString> {
                <IStringable as ::std::convert::From<&Self>>::from(self).to_string()
            }
            pub fn create_uri<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                uri: T0__,
            ) -> ::winrt::Result<Uri> {
                Self::IUriRuntimeClassFactory(|f| f.create_uri(uri))
            }
            pub fn create_with_relative_uri<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                base_uri: T0__,
                relative_uri: T1__,
            ) -> ::winrt::Result<Uri> {
                Self::IUriRuntimeClassFactory(|f| {
                    f.create_with_relative_uri(base_uri, relative_uri)
                })
            }
            pub fn unescape_component<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                to_unescape: T0__,
            ) -> ::winrt::Result<::winrt::HString> {
                Self::IUriEscapeStatics(|f| f.unescape_component(to_unescape))
            }
            pub fn escape_component<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                to_escape: T0__,
            ) -> ::winrt::Result<::winrt::HString> {
                Self::IUriEscapeStatics(|f| f.escape_component(to_escape))
            }
            #[allow(non_snake_case)]
            fn IUriRuntimeClassFactory<
                R,
                F: FnOnce(&IUriRuntimeClassFactory) -> ::winrt::Result<R>,
            >(
                callback: F,
            ) -> ::winrt::Result<R> {
                static mut SHARED: ::winrt::FactoryCache<Uri, IUriRuntimeClassFactory> =
                    ::winrt::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
            #[allow(non_snake_case)]
            fn IUriEscapeStatics<R, F: FnOnce(&IUriEscapeStatics) -> ::winrt::Result<R>>(
                callback: F,
            ) -> ::winrt::Result<R> {
                static mut SHARED: ::winrt::FactoryCache<Uri, IUriEscapeStatics> =
                    ::winrt::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::winrt::RuntimeName for Uri {
            const NAME: &'static str = "Windows.Foundation.Uri";
        }
        unsafe impl ::winrt::ComInterface for Uri {
            type VTable = abi_IUriRuntimeClass;
            fn iid() -> ::winrt::Guid {
                <IUriRuntimeClass as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for Uri {
            fn signature() -> String {
                "rc(Windows.Foundation.Uri;{9e365e57-48b2-4160-956f-c7385120bbfc})".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for Uri {
            type Abi = ::winrt::RawComPtr<IUriRuntimeClass>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IUriRuntimeClass> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IUriRuntimeClass> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for Uri {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", {
                    let s: IStringable = self.into();
                    s
                })
            }
        }
        impl ::std::convert::From<Uri> for IUriRuntimeClass {
            fn from(value: Uri) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&Uri> for IUriRuntimeClass {
            fn from(value: &Uri) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IUriRuntimeClass>> for Uri {
            fn into(self) -> ::winrt::Param<'a, IUriRuntimeClass> {
                ::winrt::Param::Owned(::std::convert::Into::<IUriRuntimeClass>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IUriRuntimeClass>> for &'a Uri {
            fn into(self) -> ::winrt::Param<'a, IUriRuntimeClass> {
                ::winrt::Param::Owned(::std::convert::Into::<IUriRuntimeClass>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Uri> for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn from(value: Uri) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&Uri> for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn from(value: &Uri) -> Self {
                <Uri as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri>>
            for Uri
        {
            fn into(self) -> ::winrt::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    IUriRuntimeClassWithAbsoluteCanonicalUri,
                >::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri>>
            for &'a Uri
        {
            fn into(self) -> ::winrt::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    IUriRuntimeClassWithAbsoluteCanonicalUri,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<Uri> for IStringable {
            fn from(value: Uri) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&Uri> for IStringable {
            fn from(value: &Uri) -> Self {
                <Uri as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStringable>> for Uri {
            fn into(self) -> ::winrt::Param<'a, IStringable> {
                ::winrt::Param::Owned(::std::convert::Into::<IStringable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStringable>> for &'a Uri {
            fn into(self) -> ::winrt::Param<'a, IStringable> {
                ::winrt::Param::Owned(::std::convert::Into::<IStringable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Uri> for ::winrt::Object {
            fn from(value: Uri) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&Uri> for ::winrt::Object {
            fn from(value: &Uri) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        unsafe impl ::std::marker::Send for Uri {}
        unsafe impl ::std::marker::Sync for Uri {}
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct WwwFormUrlDecoder {
            ptr: ::winrt::ComPtr<IWwwFormUrlDecoderRuntimeClass>,
        }
        impl WwwFormUrlDecoder {
            pub fn first(
                &self,
            ) -> ::winrt::Result<collections::IIterator<IWwwFormUrlDecoderEntry>> {
                < collections :: IIterable :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) . first()
            }
            pub fn get_at(&self, index: u32) -> ::winrt::Result<IWwwFormUrlDecoderEntry> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) .
                get_at(index,)
            }
            pub fn size(&self) -> ::winrt::Result<u32> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) . size()
            }
            pub fn index_of<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IWwwFormUrlDecoderEntry>>,
            >(
                &self,
                value: T0__,
                index: &mut u32,
            ) -> ::winrt::Result<bool> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) .
                index_of(value, index,)
            }
            pub fn get_many(
                &self,
                start_index: u32,
                items: &mut [IWwwFormUrlDecoderEntry],
            ) -> ::winrt::Result<u32> {
                < collections :: IVectorView :: < IWwwFormUrlDecoderEntry > as
                :: std :: convert :: From < & Self >> :: from(self) .
                get_many(start_index, items,)
            }
            pub fn get_first_value_by_name<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().get_first_value_by_name)(
                        this,
                        name.into().get_abi(),
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn create_www_form_url_decoder<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                query: T0__,
            ) -> ::winrt::Result<WwwFormUrlDecoder> {
                Self::IWwwFormUrlDecoderRuntimeClassFactory(|f| {
                    f.create_www_form_url_decoder(query)
                })
            }
            #[allow(non_snake_case)]
            fn IWwwFormUrlDecoderRuntimeClassFactory<
                R,
                F: FnOnce(&IWwwFormUrlDecoderRuntimeClassFactory) -> ::winrt::Result<R>,
            >(
                callback: F,
            ) -> ::winrt::Result<R> {
                static mut SHARED: ::winrt::FactoryCache<
                    WwwFormUrlDecoder,
                    IWwwFormUrlDecoderRuntimeClassFactory,
                > = ::winrt::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::winrt::RuntimeName for WwwFormUrlDecoder {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoder";
        }
        unsafe impl ::winrt::ComInterface for WwwFormUrlDecoder {
            type VTable = abi_IWwwFormUrlDecoderRuntimeClass;
            fn iid() -> ::winrt::Guid {
                <IWwwFormUrlDecoderRuntimeClass as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for WwwFormUrlDecoder {
            fn signature() -> String {
                "rc(Windows.Foundation.WwwFormUrlDecoder;{d45a0451-f225-4542-9296-0e1df5d254df})"
                    .to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for WwwFormUrlDecoder {
            type Abi = ::winrt::RawComPtr<IWwwFormUrlDecoderRuntimeClass>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < IWwwFormUrlDecoderRuntimeClass > as ::
                winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < IWwwFormUrlDecoderRuntimeClass > as ::
                winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for WwwFormUrlDecoder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "WwwFormUrlDecoder",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for collections::IIterable<IWwwFormUrlDecoderEntry> {
            fn from(value: WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder> for collections::IIterable<IWwwFormUrlDecoderEntry> {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                <WwwFormUrlDecoder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for WwwFormUrlDecoder
        {
            fn into(self) -> ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for &'a WwwFormUrlDecoder
        {
            fn into(self) -> ::winrt::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for collections::IVectorView<IWwwFormUrlDecoderEntry> {
            fn from(value: WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder>
            for collections::IVectorView<IWwwFormUrlDecoderEntry>
        {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                <WwwFormUrlDecoder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for WwwFormUrlDecoder
        {
            fn into(self) -> ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for &'a WwwFormUrlDecoder
        {
            fn into(self) -> ::winrt::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>> {
                ::winrt::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for IWwwFormUrlDecoderRuntimeClass {
            fn from(value: WwwFormUrlDecoder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder> for IWwwFormUrlDecoderRuntimeClass {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IWwwFormUrlDecoderRuntimeClass>>
            for WwwFormUrlDecoder
        {
            fn into(self) -> ::winrt::Param<'a, IWwwFormUrlDecoderRuntimeClass> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IWwwFormUrlDecoderRuntimeClass>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IWwwFormUrlDecoderRuntimeClass>>
            for &'a WwwFormUrlDecoder
        {
            fn into(self) -> ::winrt::Param<'a, IWwwFormUrlDecoderRuntimeClass> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IWwwFormUrlDecoderRuntimeClass>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for ::winrt::Object {
            fn from(value: WwwFormUrlDecoder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder> for ::winrt::Object {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::iter::IntoIterator for WwwFormUrlDecoder {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        impl<'a> ::std::iter::IntoIterator for &'a WwwFormUrlDecoder {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        unsafe impl ::std::marker::Send for WwwFormUrlDecoder {}
        unsafe impl ::std::marker::Sync for WwwFormUrlDecoder {}
        pub mod collections {
            #[repr(transparent)]
            pub struct IIterable<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IIterable<T>>,
                t0__: ::std::marker::PhantomData<T>,
            }
            impl<T: ::winrt::RuntimeType + 'static> IIterable<T> {
                pub fn first(&self) -> ::winrt::Result<IIterator<T>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IIterator<T> = ::std::mem::zeroed();
                        (this.vtable().first)(
                            this,
                            <IIterator<T> as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for IIterable<T> {
                type VTable = abi_IIterable<T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for IIterable<T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IIterable<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub first: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IIterable<T>>,
                    result__: *mut <IIterator<T> as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<T>,
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for IIterable<T> {
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{faa585ea-6214-4217-afda-7f46de5869b3}",
                        <T as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable for IIterable<T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IIterable<T>> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IIterable<T>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for IIterable<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IIterable`1",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::default::Default for IIterable<T> {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self> for IIterable<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IIterable<T>> for ::winrt::Object {
                fn from(value: IIterable<T>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IIterable<T>> for ::winrt::Object {
                fn from(value: &IIterable<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::IntoIterator for IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, T: ::winrt::RuntimeType> ::std::iter::IntoIterator for &'a IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IIterator<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IIterator<T>>,
                t0__: ::std::marker::PhantomData<T>,
            }
            impl<T: ::winrt::RuntimeType + 'static> IIterator<T> {
                pub fn current(&self) -> ::winrt::Result<T> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: T = ::std::mem::zeroed();
                        (this.vtable().current)(
                            this,
                            <T as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn has_current(&self) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().has_current)(
                            this,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn move_next(&self) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().move_next)(
                            this,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_many(&self, items: &mut [T]) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().get_many)(
                            this,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for IIterator<T> {
                type VTable = abi_IIterator<T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for IIterator<T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IIterator<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub current: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IIterator<T>>,
                    result__: *mut <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub has_current: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IIterator<T>>,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub move_next: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IIterator<T>>,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub get_many: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IIterator<T>>,
                    array_size_items: u32,
                    items: *mut <T as ::winrt::AbiTransferable>::Abi,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<T>,
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for IIterator<T> {
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{6a79e863-4300-459a-9966-cbb660963ee1}",
                        <T as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable for IIterator<T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IIterator<T>> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IIterator<T>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for IIterator<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IIterator`1",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::default::Default for IIterator<T> {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self> for IIterator<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IIterator<T>> for ::winrt::Object {
                fn from(value: IIterator<T>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IIterator<T>> for ::winrt::Object {
                fn from(value: &IIterator<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::Iterator for IIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    let result = self.current().ok();
                    if result.is_some() {
                        self.move_next().ok()?;
                    }
                    result
                }
            }
            #[repr(transparent)]
            pub struct IKeyValuePair<K, V>
            where
                K: ::winrt::RuntimeType + 'static,
                V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IKeyValuePair<K, V>>,
                t0__: ::std::marker::PhantomData<K>,
                t1__: ::std::marker::PhantomData<V>,
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static> IKeyValuePair<K, V> {
                pub fn key(&self) -> ::winrt::Result<K> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: K = ::std::mem::zeroed();
                        (this.vtable().key)(
                            this,
                            <K as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn value(&self) -> ::winrt::Result<V> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: V = ::std::mem::zeroed();
                        (this.vtable().value)(
                            this,
                            <V as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for IKeyValuePair<K, V>
            {
                type VTable = abi_IKeyValuePair<K, V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for IKeyValuePair<K, V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<K>,
                        t1__: ::std::marker::PhantomData::<V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IKeyValuePair<K, V>
            where
                K: ::winrt::RuntimeType + 'static,
                V: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub key: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IKeyValuePair<K, V>>,
                    result__: *mut <K as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub value: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IKeyValuePair<K, V>>,
                    result__: *mut <V as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<K>,
                t1__: ::std::marker::PhantomData<V>,
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for IKeyValuePair<K, V>
            {
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{02b51929-c1c4-4a7e-8940-0312b5c18500}",
                        <K as ::winrt::RuntimeType>::signature(),
                        <V as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::AbiTransferable for IKeyValuePair<K, V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IKeyValuePair<K, V>> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IKeyValuePair<K, V>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for IKeyValuePair<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IKeyValuePair`2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::default::Default for IKeyValuePair<K, V>
            {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<K>,
                        t1__: ::std::marker::PhantomData::<V>,
                    }
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::cmp::PartialEq<Self> for IKeyValuePair<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<IKeyValuePair<K, V>> for ::winrt::Object
            {
                fn from(value: IKeyValuePair<K, V>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&IKeyValuePair<K, V>> for ::winrt::Object
            {
                fn from(value: &IKeyValuePair<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IMapView<K, V>
            where
                K: ::winrt::RuntimeType + 'static,
                V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IMapView<K, V>>,
                t0__: ::std::marker::PhantomData<K>,
                t1__: ::std::marker::PhantomData<V>,
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static> IMapView<K, V> {
                pub fn lookup<'a, T0__: ::std::convert::Into<::winrt::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<V> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: V = ::std::mem::zeroed();
                        (this.vtable().lookup)(
                            this,
                            key.into().get_abi(),
                            <V as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn has_key<'a, T0__: ::std::convert::Into<::winrt::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().has_key)(
                            this,
                            key.into().get_abi(),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn split(
                    &self,
                    first: &mut IMapView<K, V>,
                    second: &mut IMapView<K, V>,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().split)(
                            this,
                            ::winrt::AbiTransferable::set_abi(first),
                            ::winrt::AbiTransferable::set_abi(second),
                        )
                        .ok()
                    }
                }
                pub fn first(&self) -> ::winrt::Result<IIterator<IKeyValuePair<K, V>>> {
                    <IIterable<IKeyValuePair<K, V>> as ::std::convert::From<&Self>>::from(self)
                        .first()
                }
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for IMapView<K, V>
            {
                type VTable = abi_IMapView<K, V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for IMapView<K, V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<K>,
                        t1__: ::std::marker::PhantomData::<V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMapView<K, V>
            where
                K: ::winrt::RuntimeType + 'static,
                V: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub lookup: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMapView<K, V>>,
                    key: <K as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <V as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMapView<K, V>>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub has_key: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMapView<K, V>>,
                    key: <K as ::winrt::AbiTransferable>::Abi,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub split: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMapView<K, V>>,
                    first: *mut <IMapView<K, V> as ::winrt::AbiTransferable>::Abi,
                    second: *mut <IMapView<K, V> as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<K>,
                t1__: ::std::marker::PhantomData<V>,
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for IMapView<K, V>
            {
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{e480ce40-a338-4ada-adcf-272272e48cb9}",
                        <K as ::winrt::RuntimeType>::signature(),
                        <V as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::AbiTransferable for IMapView<K, V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IMapView<K, V>> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IMapView<K, V>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for IMapView<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IMapView`2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::default::Default for IMapView<K, V>
            {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<K>,
                        t1__: ::std::marker::PhantomData::<V>,
                    }
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::cmp::PartialEq<Self> for IMapView<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<IMapView<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IMapView<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&IMapView<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IMapView<K, V>) -> Self {
                    <IMapView<K, V> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a, K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for IMapView<K, V>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for &'a IMapView<K, V>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<IMapView<K, V>> for ::winrt::Object
            {
                fn from(value: IMapView<K, V>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&IMapView<K, V>> for ::winrt::Object
            {
                fn from(value: &IMapView<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IMap<K, V>
            where
                K: ::winrt::RuntimeType + 'static,
                V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IMap<K, V>>,
                t0__: ::std::marker::PhantomData<K>,
                t1__: ::std::marker::PhantomData<V>,
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static> IMap<K, V> {
                pub fn lookup<'a, T0__: ::std::convert::Into<::winrt::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<V> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: V = ::std::mem::zeroed();
                        (this.vtable().lookup)(
                            this,
                            key.into().get_abi(),
                            <V as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn has_key<'a, T0__: ::std::convert::Into<::winrt::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().has_key)(
                            this,
                            key.into().get_abi(),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_view(&self) -> ::winrt::Result<IMapView<K, V>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IMapView<K, V> = ::std::mem::zeroed();
                        (this.vtable().get_view)(
                            this,
                            <IMapView<K, V> as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, K>>,
                    T1__: ::std::convert::Into<::winrt::Param<'a, V>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().insert)(
                            this,
                            key.into().get_abi(),
                            value.into().get_abi(),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn remove<'a, T0__: ::std::convert::Into<::winrt::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().remove)(this, key.into().get_abi()).ok() }
                }
                pub fn clear(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().clear)(this).ok() }
                }
                pub fn first(&self) -> ::winrt::Result<IIterator<IKeyValuePair<K, V>>> {
                    <IIterable<IKeyValuePair<K, V>> as ::std::convert::From<&Self>>::from(self)
                        .first()
                }
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for IMap<K, V>
            {
                type VTable = abi_IMap<K, V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for IMap<K, V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<K>,
                        t1__: ::std::marker::PhantomData::<V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMap<K, V>
            where
                K: ::winrt::RuntimeType + 'static,
                V: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub lookup: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                    key: <K as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <V as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub has_key: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                    key: <K as ::winrt::AbiTransferable>::Abi,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub get_view: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                    result__: *mut <IMapView<K, V> as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub insert: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                    key: <K as ::winrt::AbiTransferable>::Abi,
                    value: <V as ::winrt::AbiTransferable>::Abi,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub remove: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                    key: <K as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub clear: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMap<K, V>>,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<K>,
                t1__: ::std::marker::PhantomData<V>,
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for IMap<K, V>
            {
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{3c2925fe-8519-45c1-aa79-197b6718c1c1}",
                        <K as ::winrt::RuntimeType>::signature(),
                        <V as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::winrt::AbiTransferable for IMap<K, V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IMap<K, V>> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IMap<K, V>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for IMap<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IMap`2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::default::Default for IMap<K, V>
            {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<K>,
                        t1__: ::std::marker::PhantomData::<V>,
                    }
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::cmp::PartialEq<Self> for IMap<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<IMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IMap<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&IMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IMap<K, V>) -> Self {
                    <IMap<K, V> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a, K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for IMap<K, V>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for &'a IMap<K, V>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<IMap<K, V>> for ::winrt::Object
            {
                fn from(value: IMap<K, V>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&IMap<K, V>> for ::winrt::Object
            {
                fn from(value: &IMap<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, K: ::winrt::RuntimeType + 'static, V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IVectorView<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IVectorView<T>>,
                t0__: ::std::marker::PhantomData<T>,
            }
            impl<T: ::winrt::RuntimeType + 'static> IVectorView<T> {
                pub fn get_at(&self, index: u32) -> ::winrt::Result<T> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: T = ::std::mem::zeroed();
                        (this.vtable().get_at)(
                            this,
                            index,
                            <T as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn index_of<'a, T0__: ::std::convert::Into<::winrt::Param<'a, T>>>(
                    &self,
                    value: T0__,
                    index: &mut u32,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().index_of)(
                            this,
                            value.into().get_abi(),
                            index,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_many(&self, start_index: u32, items: &mut [T]) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().get_many)(
                            this,
                            start_index,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn first(&self) -> ::winrt::Result<IIterator<T>> {
                    <IIterable<T> as ::std::convert::From<&Self>>::from(self).first()
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for IVectorView<T> {
                type VTable = abi_IVectorView<T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for IVectorView<T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IVectorView<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub get_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVectorView<T>>,
                    index: u32,
                    result__: *mut <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVectorView<T>>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub index_of: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVectorView<T>>,
                    value: <T as ::winrt::AbiTransferable>::Abi,
                    index: *mut u32,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub get_many: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVectorView<T>>,
                    start_index: u32,
                    array_size_items: u32,
                    items: *mut <T as ::winrt::AbiTransferable>::Abi,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<T>,
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for IVectorView<T> {
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{bbe1fa4c-b0e3-4583-baef-1f1b2e483e56}",
                        <T as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable for IVectorView<T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IVectorView<T>> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IVectorView<T>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for IVectorView<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IVectorView`1",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::default::Default for IVectorView<T> {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self> for IVectorView<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IVectorView<T>> for IIterable<T> {
                fn from(value: IVectorView<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IVectorView<T>> for IIterable<T> {
                fn from(value: &IVectorView<T>) -> Self {
                    <IVectorView<T> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a, T: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<T>>> for IVectorView<T>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<T>> {
                    ::winrt::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<T>>> for &'a IVectorView<T>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<T>> {
                    ::winrt::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IVectorView<T>> for ::winrt::Object {
                fn from(value: IVectorView<T>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IVectorView<T>> for ::winrt::Object {
                fn from(value: &IVectorView<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            pub struct VectorViewIterator<T: ::winrt::RuntimeType + 'static> {
                vector: IVectorView<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::winrt::RuntimeType> VectorViewIterator<T> {
                pub fn new(vector: IVectorView<T>) -> Self {
                    let size = vector.size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::Iterator for VectorViewIterator<T> {
                type Item = T;
                fn next(&mut self) -> Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.get_at(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::IntoIterator for IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(self)
                }
            }
            impl<'a, T: ::winrt::RuntimeType> ::std::iter::IntoIterator for &'a IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[repr(transparent)]
            pub struct IVector<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<IVector<T>>,
                t0__: ::std::marker::PhantomData<T>,
            }
            impl<T: ::winrt::RuntimeType + 'static> IVector<T> {
                pub fn get_at(&self, index: u32) -> ::winrt::Result<T> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: T = ::std::mem::zeroed();
                        (this.vtable().get_at)(
                            this,
                            index,
                            <T as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn size(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_view(&self) -> ::winrt::Result<IVectorView<T>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IVectorView<T> = ::std::mem::zeroed();
                        (this.vtable().get_view)(
                            this,
                            <IVectorView<T> as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn index_of<'a, T0__: ::std::convert::Into<::winrt::Param<'a, T>>>(
                    &self,
                    value: T0__,
                    index: &mut u32,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().index_of)(
                            this,
                            value.into().get_abi(),
                            index,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_at<'a, T1__: ::std::convert::Into<::winrt::Param<'a, T>>>(
                    &self,
                    index: u32,
                    value: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_at)(this, index, value.into().get_abi()).ok() }
                }
                pub fn insert_at<'a, T1__: ::std::convert::Into<::winrt::Param<'a, T>>>(
                    &self,
                    index: u32,
                    value: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().insert_at)(this, index, value.into().get_abi()).ok() }
                }
                pub fn remove_at(&self, index: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().remove_at)(this, index).ok() }
                }
                pub fn append<'a, T0__: ::std::convert::Into<::winrt::Param<'a, T>>>(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().append)(this, value.into().get_abi()).ok() }
                }
                pub fn remove_at_end(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().remove_at_end)(this).ok() }
                }
                pub fn clear(&self) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().clear)(this).ok() }
                }
                pub fn get_many(&self, start_index: u32, items: &mut [T]) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().get_many)(
                            this,
                            start_index,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn replace_all(&self, items: &[T]) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().replace_all)(
                            this,
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn first(&self) -> ::winrt::Result<IIterator<T>> {
                    <IIterable<T> as ::std::convert::From<&Self>>::from(self).first()
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for IVector<T> {
                type VTable = abi_IVector<T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for IVector<T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IVector<T>
            where
                T: ::winrt::RuntimeType + 'static,
            {
                base__: [usize; 6],
                pub get_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    index: u32,
                    result__: *mut <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub get_view: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    result__: *mut <IVectorView<T> as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub index_of: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    value: <T as ::winrt::AbiTransferable>::Abi,
                    index: *mut u32,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub set_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    index: u32,
                    value: <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub insert_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    index: u32,
                    value: <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub remove_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    index: u32,
                ) -> ::winrt::ErrorCode,
                pub append: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    value: <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub remove_at_end: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                ) -> ::winrt::ErrorCode,
                pub clear: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                ) -> ::winrt::ErrorCode,
                pub get_many: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    start_index: u32,
                    array_size_items: u32,
                    items: *mut <T as ::winrt::AbiTransferable>::Abi,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub replace_all: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IVector<T>>,
                    array_size_items: u32,
                    items: *const <T as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                t0__: ::std::marker::PhantomData<T>,
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for IVector<T> {
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{913337e9-11a1-4345-a3a2-4e7f956e222d}",
                        <T as ::winrt::RuntimeType>::signature()
                    )
                }
            }
            unsafe impl<T: ::winrt::RuntimeType + 'static> ::winrt::AbiTransferable for IVector<T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IVector<T>> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IVector<T>> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for IVector<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IVector`1",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::default::Default for IVector<T> {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                        t0__: ::std::marker::PhantomData::<T>,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::cmp::PartialEq<Self> for IVector<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IVector<T>> for IIterable<T> {
                fn from(value: IVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IVector<T>> for IIterable<T> {
                fn from(value: &IVector<T>) -> Self {
                    <IVector<T> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a, T: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<T>>> for IVector<T>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<T>> {
                    ::winrt::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::winrt::RuntimeType + 'static>
                ::std::convert::Into<::winrt::Param<'a, IIterable<T>>> for &'a IVector<T>
            {
                fn into(self) -> ::winrt::Param<'a, IIterable<T>> {
                    ::winrt::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<IVector<T>> for ::winrt::Object {
                fn from(value: IVector<T>) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<T: ::winrt::RuntimeType + 'static> ::std::convert::From<&IVector<T>> for ::winrt::Object {
                fn from(value: &IVector<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            pub struct VectorIterator<T: ::winrt::RuntimeType + 'static> {
                vector: IVector<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::winrt::RuntimeType> VectorIterator<T> {
                pub fn new(vector: IVector<T>) -> Self {
                    let size = vector.size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::Iterator for VectorIterator<T> {
                type Item = T;
                fn next(&mut self) -> Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.get_at(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::IntoIterator for IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(self)
                }
            }
            impl<'a, T: ::winrt::RuntimeType> ::std::iter::IntoIterator for &'a IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(::std::clone::Clone::clone(self))
                }
            }
        }
    }
    pub mod security {
        pub mod enterprise_data {
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct ProtectionPolicyEvaluationResult {
                value: i32,
            }
            impl ProtectionPolicyEvaluationResult {
                #![allow(non_upper_case_globals)]
                pub const Allowed: Self = Self { value: 0i32 };
                pub const Blocked: Self = Self { value: 1i32 };
                pub const ConsentRequired: Self = Self { value: 2i32 };
            }
            unsafe impl ::winrt::RuntimeType for ProtectionPolicyEvaluationResult {
                fn signature() -> String {
                    "enum(Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;i4)"
                        .to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ProtectionPolicyEvaluationResult {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
        }
    }
    pub mod storage {
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct CreationCollisionOption {
            value: i32,
        }
        impl CreationCollisionOption {
            #![allow(non_upper_case_globals)]
            pub const GenerateUniqueName: Self = Self { value: 0i32 };
            pub const ReplaceExisting: Self = Self { value: 1i32 };
            pub const FailIfExists: Self = Self { value: 2i32 };
            pub const OpenIfExists: Self = Self { value: 3i32 };
        }
        unsafe impl ::winrt::RuntimeType for CreationCollisionOption {
            fn signature() -> String {
                "enum(Windows.Storage.CreationCollisionOption;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for CreationCollisionOption {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct FileAccessMode {
            value: i32,
        }
        impl FileAccessMode {
            #![allow(non_upper_case_globals)]
            pub const Read: Self = Self { value: 0i32 };
            pub const ReadWrite: Self = Self { value: 1i32 };
        }
        unsafe impl ::winrt::RuntimeType for FileAccessMode {
            fn signature() -> String {
                "enum(Windows.Storage.FileAccessMode;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for FileAccessMode {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct FileAttributes {
            value: u32,
        }
        impl FileAttributes {
            #![allow(non_upper_case_globals)]
            pub const Normal: Self = Self { value: 0u32 };
            pub const ReadOnly: Self = Self { value: 1u32 };
            pub const Directory: Self = Self { value: 16u32 };
            pub const Archive: Self = Self { value: 32u32 };
            pub const Temporary: Self = Self { value: 256u32 };
            pub const LocallyIncomplete: Self = Self { value: 512u32 };
        }
        unsafe impl ::winrt::RuntimeType for FileAttributes {
            fn signature() -> String {
                "enum(Windows.Storage.FileAttributes;u4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for FileAttributes {
            type Abi = u32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        impl ::std::ops::BitOr for FileAttributes {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self {
                    value: self.value | rhs.value,
                }
            }
        }
        impl ::std::ops::BitAnd for FileAttributes {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self {
                    value: self.value & rhs.value,
                }
            }
        }
        #[repr(transparent)]
        pub struct IStorageFile {
            ptr: ::winrt::ComPtr<IStorageFile>,
        }
        impl IStorageFile {
            pub fn file_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().file_type)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn content_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().content_type)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn open_async(
                &self,
                access_mode: FileAccessMode,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > = ::std::mem::zeroed();
                    (this . vtable() . open_async)
                    (this, :: winrt :: AbiTransferable ::
                     get_abi(& access_mode), < super :: foundation ::
                     IAsyncOperation :: < streams :: IRandomAccessStream > as
                     :: winrt :: AbiTransferable > :: set_abi(& mut result__))
                    . and_then(|| result__)
                }
            }
            pub fn open_transacted_write_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageStreamTransaction> =
                        ::std::mem::zeroed();
                    (this . vtable() . open_transacted_write_async)
                    (this, < super :: foundation :: IAsyncOperation :: <
                     StorageStreamTransaction > as :: winrt :: AbiTransferable
                     > :: set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn copy_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . copy_overload_default_name_and_options)
                    (this, destination_folder . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn copy_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . copy_overload_default_options)
                    (this, destination_folder . into() . get_abi(),
                     desired_new_name . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn copy_overload<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . copy_overload)
                    (this, destination_folder . into() . get_abi(),
                     desired_new_name . into() . get_abi(), :: winrt ::
                     AbiTransferable :: get_abi(& option), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn copy_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().copy_and_replace_async)(
                        this,
                        file_to_replace.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_overload_default_name_and_options)(
                        this,
                        destination_folder.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_overload_default_options)(
                        this,
                        destination_folder.into().get_abi(),
                        desired_new_name.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_overload<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_overload)(
                        this,
                        destination_folder.into().get_abi(),
                        desired_new_name.into().get_abi(),
                        ::winrt::AbiTransferable::get_abi(&option),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_and_replace_async)(
                        this,
                        file_to_replace.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async_overload_default_options(desired_name)
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async(desired_name, option)
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .delete_async_overload_default_options()
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).delete_async(option)
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>
            {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .get_basic_properties_async()
            }
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).name()
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).path()
            }
            pub fn attributes(&self) -> ::winrt::Result<FileAttributes> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).attributes()
            }
            pub fn date_created(&self) -> ::winrt::Result<super::foundation::DateTime> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).date_created()
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).is_of_type(r#type)
            }
            pub fn open_read_async(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType>,
            > {
                <streams::IRandomAccessStreamReference as ::std::convert::From<&Self>>::from(self)
                    .open_read_async()
            }
            pub fn open_sequential_read_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<streams::IInputStream>>
            {
                <streams::IInputStreamReference as ::std::convert::From<&Self>>::from(self)
                    .open_sequential_read_async()
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFile {
            type VTable = abi_IStorageFile;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4198457734,
                    16916,
                    17036,
                    [166, 76, 20, 201, 172, 115, 21, 234],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFile {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFile where
        {
            base__ : [usize ; 6], pub file_type : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >, result__ : * mut
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
            -> :: winrt :: ErrorCode, pub content_type : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >, result__ : * mut
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
            -> :: winrt :: ErrorCode, pub open_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >, access_mode : <
               FileAccessMode as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               streams :: IRandomAccessStream > as :: winrt :: AbiTransferable
               > :: Abi,) -> :: winrt :: ErrorCode, pub
            open_transacted_write_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >, result__ : * mut
               < super :: foundation :: IAsyncOperation :: <
               StorageStreamTransaction > as :: winrt :: AbiTransferable > ::
               Abi,) -> :: winrt :: ErrorCode, pub
            copy_overload_default_name_and_options : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >,
               destination_folder : < IStorageFolder as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncOperation :: < StorageFile > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            copy_overload_default_options : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >,
               destination_folder : < IStorageFolder as :: winrt ::
               AbiTransferable > :: Abi, desired_new_name : < :: winrt ::
               HString as :: winrt :: AbiTransferable > :: Abi, result__ : *
               mut < super :: foundation :: IAsyncOperation :: < StorageFile >
               as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, pub copy_overload : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >,
               destination_folder : < IStorageFolder as :: winrt ::
               AbiTransferable > :: Abi, desired_new_name : < :: winrt ::
               HString as :: winrt :: AbiTransferable > :: Abi, option : <
               NameCollisionOption as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFile > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub copy_and_replace_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >, file_to_replace
               : < IStorageFile as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncAction as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub move_overload_default_name_and_options : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >,
               destination_folder : < IStorageFolder as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncAction as :: winrt :: AbiTransferable > ::
               Abi,) -> :: winrt :: ErrorCode, pub
            move_overload_default_options : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >,
               destination_folder : < IStorageFolder as :: winrt ::
               AbiTransferable > :: Abi, desired_new_name : < :: winrt ::
               HString as :: winrt :: AbiTransferable > :: Abi, result__ : *
               mut < super :: foundation :: IAsyncAction as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            move_overload : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >,
               destination_folder : < IStorageFolder as :: winrt ::
               AbiTransferable > :: Abi, desired_new_name : < :: winrt ::
               HString as :: winrt :: AbiTransferable > :: Abi, option : <
               NameCollisionOption as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncAction as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub move_and_replace_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile >, file_to_replace
               : < IStorageFile as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncAction as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFile {
            fn signature() -> String {
                "{fa3f6186-4214-428c-a64c-14c9ac7315ea}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFile {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFile> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFile> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IStorageFile {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFile",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFile {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFile {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFile> for IStorageItem {
            fn from(value: IStorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFile> for IStorageItem {
            fn from(value: &IStorageFile) -> Self {
                <IStorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for IStorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for &'a IStorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: IStorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: &IStorageFile) -> Self {
                <IStorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>
            for IStorageFile
        {
            fn into(self) -> ::winrt::Param<'a, streams::IRandomAccessStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>
            for &'a IStorageFile
        {
            fn into(self) -> ::winrt::Param<'a, streams::IRandomAccessStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<IStorageFile> for streams::IInputStreamReference {
            fn from(value: IStorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFile> for streams::IInputStreamReference {
            fn from(value: &IStorageFile) -> Self {
                <IStorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IInputStreamReference>> for IStorageFile {
            fn into(self) -> ::winrt::Param<'a, streams::IInputStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IInputStreamReference>>
            for &'a IStorageFile
        {
            fn into(self) -> ::winrt::Param<'a, streams::IInputStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<IStorageFile> for ::winrt::Object {
            fn from(value: IStorageFile) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFile> for ::winrt::Object {
            fn from(value: &IStorageFile) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFile2 {
            ptr: ::winrt::ComPtr<IStorageFile2>,
        }
        impl IStorageFile2 {
            pub fn open_with_options_async(
                &self,
                access_mode: FileAccessMode,
                options: StorageOpenOptions,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > = ::std::mem::zeroed();
                    (this . vtable() . open_with_options_async)
                    (this, :: winrt :: AbiTransferable ::
                     get_abi(& access_mode), :: winrt :: AbiTransferable ::
                     get_abi(& options), < super :: foundation ::
                     IAsyncOperation :: < streams :: IRandomAccessStream > as
                     :: winrt :: AbiTransferable > :: set_abi(& mut result__))
                    . and_then(|| result__)
                }
            }
            pub fn open_transacted_write_with_options_async(
                &self,
                options: StorageOpenOptions,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageStreamTransaction> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     open_transacted_write_with_options_async)
                    (this, :: winrt :: AbiTransferable :: get_abi(& options),
                     < super :: foundation :: IAsyncOperation :: <
                     StorageStreamTransaction > as :: winrt :: AbiTransferable
                     > :: set_abi(& mut result__)) . and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFile2 {
            type VTable = abi_IStorageFile2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2504936399,
                    2679,
                    17147,
                    [183, 119, 194, 237, 88, 165, 46, 68],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFile2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFile2 where
        {
            base__ : [usize ; 6], pub open_with_options_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile2 >, access_mode : <
               FileAccessMode as :: winrt :: AbiTransferable > :: Abi, options
               : < StorageOpenOptions as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               streams :: IRandomAccessStream > as :: winrt :: AbiTransferable
               > :: Abi,) -> :: winrt :: ErrorCode, pub
            open_transacted_write_with_options_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFile2 >, options : <
               StorageOpenOptions as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageStreamTransaction > as :: winrt :: AbiTransferable > ::
               Abi,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFile2 {
            fn signature() -> String {
                "{954e4bcf-0a77-42fb-b777-c2ed58a52e44}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFile2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFile2> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFile2> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IStorageFile2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFile2",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFile2 {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFile2 {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFile2> for ::winrt::Object {
            fn from(value: IStorageFile2) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFile2> for ::winrt::Object {
            fn from(value: &IStorageFile2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFilePropertiesWithAvailability {
            ptr: ::winrt::ComPtr<IStorageFilePropertiesWithAvailability>,
        }
        impl IStorageFilePropertiesWithAvailability {
            pub fn is_available(&self) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().is_available)(
                        this,
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFilePropertiesWithAvailability {
            type VTable = abi_IStorageFilePropertiesWithAvailability;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2949365403,
                    22571,
                    16691,
                    [150, 72, 228, 76, 164, 110, 228, 145],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFilePropertiesWithAvailability {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFilePropertiesWithAvailability {
            base__: [usize; 6],
            pub is_available: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageFilePropertiesWithAvailability>,
                result__: *mut bool,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFilePropertiesWithAvailability {
            fn signature() -> String {
                "{afcbbe9b-582b-4133-9648-e44ca46ee491}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFilePropertiesWithAvailability {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < IStorageFilePropertiesWithAvailability
                > as :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < IStorageFilePropertiesWithAvailability
                > as :: winrt :: AbiTransferable > ::
                set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for IStorageFilePropertiesWithAvailability {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFilePropertiesWithAvailability",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFilePropertiesWithAvailability {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFilePropertiesWithAvailability {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFilePropertiesWithAvailability> for ::winrt::Object {
            fn from(value: IStorageFilePropertiesWithAvailability) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFilePropertiesWithAvailability> for ::winrt::Object {
            fn from(value: &IStorageFilePropertiesWithAvailability) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFileStatics {
            ptr: ::winrt::ComPtr<IStorageFileStatics>,
        }
        impl IStorageFileStatics {
            pub fn get_file_from_path_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                path: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_file_from_path_async)
                    (this, path . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFile > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_file_from_application_uri_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, super::foundation::Uri>>,
            >(
                &self,
                uri: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_file_from_application_uri_async)
                    (this, uri . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFile > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                display_name_with_extension: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . create_streamed_file_async)
                    (this, display_name_with_extension . into() . get_abi(),
                     data_requested . into() . get_abi(), thumbnail . into() .
                     get_abi(), < super :: foundation :: IAsyncOperation :: <
                     StorageFile > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn replace_with_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                file_to_replace: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . replace_with_streamed_file_async)
                    (this, file_to_replace . into() . get_abi(),
                     data_requested . into() . get_abi(), thumbnail . into() .
                     get_abi(), < super :: foundation :: IAsyncOperation :: <
                     StorageFile > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn create_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                display_name_with_extension: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . create_streamed_file_from_uri_async)
                    (this, display_name_with_extension . into() . get_abi(),
                     uri . into() . get_abi(), thumbnail . into() . get_abi(),
                     < super :: foundation :: IAsyncOperation :: < StorageFile
                     > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn replace_with_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                file_to_replace: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     replace_with_streamed_file_from_uri_async)
                    (this, file_to_replace . into() . get_abi(), uri . into()
                     . get_abi(), thumbnail . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFileStatics {
            type VTable = abi_IStorageFileStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1501873936,
                    56050,
                    17352,
                    [139, 180, 164, 211, 234, 207, 208, 63],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFileStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFileStatics where
        {
            base__ : [usize ; 6], pub get_file_from_path_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFileStatics >, path : <
               :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFile > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub get_file_from_application_uri_async :
            unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFileStatics >, uri : <
               super :: foundation :: Uri as :: winrt :: AbiTransferable > ::
               Abi, result__ : * mut < super :: foundation :: IAsyncOperation
               :: < StorageFile > as :: winrt :: AbiTransferable > :: Abi,) ->
            :: winrt :: ErrorCode, pub create_streamed_file_async : unsafe
            extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFileStatics >,
               display_name_with_extension : < :: winrt :: HString as :: winrt
               :: AbiTransferable > :: Abi, data_requested : <
               StreamedFileDataRequestedHandler as :: winrt :: AbiTransferable
               > :: Abi, thumbnail : < streams :: IRandomAccessStreamReference
               as :: winrt :: AbiTransferable > :: Abi, result__ : * mut <
               super :: foundation :: IAsyncOperation :: < StorageFile > as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub replace_with_streamed_file_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFileStatics >,
               file_to_replace : < IStorageFile as :: winrt :: AbiTransferable
               > :: Abi, data_requested : < StreamedFileDataRequestedHandler
               as :: winrt :: AbiTransferable > :: Abi, thumbnail : < streams
               :: IRandomAccessStreamReference as :: winrt :: AbiTransferable
               > :: Abi, result__ : * mut < super :: foundation ::
               IAsyncOperation :: < StorageFile > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            create_streamed_file_from_uri_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFileStatics >,
               display_name_with_extension : < :: winrt :: HString as :: winrt
               :: AbiTransferable > :: Abi, uri : < super :: foundation :: Uri
               as :: winrt :: AbiTransferable > :: Abi, thumbnail : < streams
               :: IRandomAccessStreamReference as :: winrt :: AbiTransferable
               > :: Abi, result__ : * mut < super :: foundation ::
               IAsyncOperation :: < StorageFile > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            replace_with_streamed_file_from_uri_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFileStatics >,
               file_to_replace : < IStorageFile as :: winrt :: AbiTransferable
               > :: Abi, uri : < super :: foundation :: Uri as :: winrt ::
               AbiTransferable > :: Abi, thumbnail : < streams ::
               IRandomAccessStreamReference as :: winrt :: AbiTransferable >
               :: Abi, result__ : * mut < super :: foundation ::
               IAsyncOperation :: < StorageFile > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFileStatics {
            fn signature() -> String {
                "{5984c710-daf2-43c8-8bb4-a4d3eacfd03f}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFileStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFileStatics> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFileStatics> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageFileStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFileStatics",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFileStatics {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFileStatics {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFileStatics> for ::winrt::Object {
            fn from(value: IStorageFileStatics) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFileStatics> for ::winrt::Object {
            fn from(value: &IStorageFileStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolder {
            ptr: ::winrt::ComPtr<IStorageFolder>,
        }
        impl IStorageFolder {
            pub fn create_file_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     create_file_async_overload_default_options)
                    (this, desired_name . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . create_file_async)
                    (this, desired_name . into() . get_abi(), :: winrt ::
                     AbiTransferable :: get_abi(& options), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_folder_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     create_folder_async_overload_default_options)
                    (this, desired_name . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFolder > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_folder_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() . create_folder_async)
                    (this, desired_name . into() . get_abi(), :: winrt ::
                     AbiTransferable :: get_abi(& options), < super ::
                     foundation :: IAsyncOperation :: < StorageFolder > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_file_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFile > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_folder_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_folder_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFolder > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_item_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<IStorageItem> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_item_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < IStorageItem > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_files_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    > = ::std::mem::zeroed();
                    (this
                        .vtable()
                        .get_files_async_overload_default_options_start_and_count)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageFile>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_folders_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    > = ::std::mem::zeroed();
                    (this
                        .vtable()
                        .get_folders_async_overload_default_options_start_and_count)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageFolder>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_items_async_overload_default_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<IStorageItem>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    > = ::std::mem::zeroed();
                    (this
                        .vtable()
                        .get_items_async_overload_default_start_and_count)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<IStorageItem>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async_overload_default_options(desired_name)
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async(desired_name, option)
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .delete_async_overload_default_options()
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).delete_async(option)
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>
            {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .get_basic_properties_async()
            }
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).name()
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).path()
            }
            pub fn attributes(&self) -> ::winrt::Result<FileAttributes> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).attributes()
            }
            pub fn date_created(&self) -> ::winrt::Result<super::foundation::DateTime> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).date_created()
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).is_of_type(r#type)
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFolder {
            type VTable = abi_IStorageFolder;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1926351736,
                    46063,
                    20341,
                    [168, 11, 111, 217, 218, 226, 148, 75],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFolder {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolder where
        {
            base__ : [usize ; 6], pub
            create_file_async_overload_default_options : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, desired_name :
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFile > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub create_file_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, desired_name :
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               options : < CreationCollisionOption as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncOperation :: < StorageFile > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            create_folder_async_overload_default_options : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, desired_name :
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFolder > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub create_folder_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, desired_name :
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               options : < CreationCollisionOption as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncOperation :: < StorageFolder > as :: winrt
               :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            get_file_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, name : < ::
               winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFile > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub get_folder_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, name : < ::
               winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFolder > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub get_item_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, name : < ::
               winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               IStorageItem > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode, pub
            get_files_async_overload_default_options_start_and_count : unsafe
            extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, result__ : *
               mut < super :: foundation :: IAsyncOperation :: < super ::
               foundation :: collections :: IVectorView :: < StorageFile > >
               as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, pub
            get_folders_async_overload_default_options_start_and_count :
            unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, result__ : *
               mut < super :: foundation :: IAsyncOperation :: < super ::
               foundation :: collections :: IVectorView :: < StorageFolder > >
               as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, pub get_items_async_overload_default_start_and_count :
            unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder >, result__ : *
               mut < super :: foundation :: IAsyncOperation :: < super ::
               foundation :: collections :: IVectorView :: < IStorageItem > >
               as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFolder {
            fn signature() -> String {
                "{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFolder {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFolder> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFolder> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageFolder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFolder",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFolder {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFolder {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFolder> for IStorageItem {
            fn from(value: IStorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFolder> for IStorageItem {
            fn from(value: &IStorageFolder) -> Self {
                <IStorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for IStorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for &'a IStorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageFolder> for ::winrt::Object {
            fn from(value: IStorageFolder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFolder> for ::winrt::Object {
            fn from(value: &IStorageFolder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolder2 {
            ptr: ::winrt::ComPtr<IStorageFolder2>,
        }
        impl IStorageFolder2 {
            pub fn try_get_item_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<IStorageItem> =
                        ::std::mem::zeroed();
                    (this . vtable() . try_get_item_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < IStorageItem > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFolder2 {
            type VTable = abi_IStorageFolder2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3894929593,
                    2265,
                    19086,
                    [160, 172, 254, 94, 211, 203, 187, 211],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFolder2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolder2 where
        {
            base__ : [usize ; 6], pub try_get_item_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolder2 >, name : < ::
               winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               IStorageItem > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFolder2 {
            fn signature() -> String {
                "{e827e8b9-08d9-4a8e-a0ac-fe5ed3cbbbd3}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFolder2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFolder2> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFolder2> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageFolder2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFolder2",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFolder2 {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFolder2 {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFolder2> for ::winrt::Object {
            fn from(value: IStorageFolder2) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFolder2> for ::winrt::Object {
            fn from(value: &IStorageFolder2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolder3 {
            ptr: ::winrt::ComPtr<IStorageFolder3>,
        }
        impl IStorageFolder3 {
            pub fn try_get_change_tracker(&self) -> ::winrt::Result<StorageLibraryChangeTracker> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: StorageLibraryChangeTracker = ::std::mem::zeroed();
                    (this.vtable().try_get_change_tracker)(
                        this,
                        <StorageLibraryChangeTracker as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFolder3 {
            type VTable = abi_IStorageFolder3;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2673965209,
                    48609,
                    16676,
                    [174, 179, 176, 106, 217, 111, 152, 212],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFolder3 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolder3 {
            base__: [usize; 6],
            pub try_get_change_tracker: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageFolder3>,
                result__: *mut <StorageLibraryChangeTracker as ::winrt::AbiTransferable>::Abi,
            )
                -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFolder3 {
            fn signature() -> String {
                "{9f617899-bde1-4124-aeb3-b06ad96f98d4}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFolder3 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFolder3> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFolder3> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageFolder3 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFolder3",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFolder3 {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFolder3 {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFolder3> for ::winrt::Object {
            fn from(value: IStorageFolder3) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFolder3> for ::winrt::Object {
            fn from(value: &IStorageFolder3) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolderStatics {
            ptr: ::winrt::ComPtr<IStorageFolderStatics>,
        }
        impl IStorageFolderStatics {
            pub fn get_folder_from_path_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                path: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_folder_from_path_async)
                    (this, path . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFolder > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageFolderStatics {
            type VTable = abi_IStorageFolderStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    150153215,
                    34261,
                    18617,
                    [174, 233, 40, 81, 30, 51, 159, 159],
                )
            }
        }
        impl ::std::clone::Clone for IStorageFolderStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolderStatics where
        {
            base__ : [usize ; 6], pub get_folder_from_path_async : unsafe
            extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageFolderStatics >, path :
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               StorageFolder > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageFolderStatics {
            fn signature() -> String {
                "{08f327ff-85d5-48b9-aee9-28511e339f9f}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageFolderStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFolderStatics> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFolderStatics> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageFolderStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageFolderStatics",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageFolderStatics {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageFolderStatics {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageFolderStatics> for ::winrt::Object {
            fn from(value: IStorageFolderStatics) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageFolderStatics> for ::winrt::Object {
            fn from(value: &IStorageFolderStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItem {
            ptr: ::winrt::ComPtr<IStorageItem>,
        }
        impl IStorageItem {
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().rename_async_overload_default_options)(
                        this,
                        desired_name.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().rename_async)(
                        this,
                        desired_name.into().get_abi(),
                        ::winrt::AbiTransferable::get_abi(&option),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().delete_async_overload_default_options)(
                        this,
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().delete_async)(
                        this,
                        ::winrt::AbiTransferable::get_abi(&option),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > = ::std::mem::zeroed();
                    (this . vtable() . get_basic_properties_async)
                    (this, < super :: foundation :: IAsyncOperation :: <
                     file_properties :: BasicProperties > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn attributes(&self) -> ::winrt::Result<FileAttributes> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: FileAttributes = ::std::mem::zeroed();
                    (this.vtable().attributes)(
                        this,
                        <FileAttributes as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn date_created(&self) -> ::winrt::Result<super::foundation::DateTime> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::DateTime = ::std::mem::zeroed();
                    (this.vtable().date_created)(
                        this,
                        <super::foundation::DateTime as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().is_of_type)(
                        this,
                        ::winrt::AbiTransferable::get_abi(&r#type),
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageItem {
            type VTable = abi_IStorageItem;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1107798422,
                    51759,
                    17143,
                    [189, 232, 139, 16, 69, 122, 127, 48],
                )
            }
        }
        impl ::std::clone::Clone for IStorageItem {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItem where
        {
            base__ : [usize ; 6], pub rename_async_overload_default_options :
            unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, desired_name : <
               :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncAction as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub rename_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, desired_name : <
               :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,
               option : < NameCollisionOption as :: winrt :: AbiTransferable >
               :: Abi, result__ : * mut < super :: foundation :: IAsyncAction
               as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, pub delete_async_overload_default_options : unsafe
            extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, result__ : * mut
               < super :: foundation :: IAsyncAction as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            delete_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, option : <
               StorageDeleteOption as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut < super :: foundation :: IAsyncAction as ::
               winrt :: AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            pub get_basic_properties_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, result__ : * mut
               < super :: foundation :: IAsyncOperation :: < file_properties
               :: BasicProperties > as :: winrt :: AbiTransferable > :: Abi,)
            -> :: winrt :: ErrorCode, pub name : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, result__ : * mut
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
            -> :: winrt :: ErrorCode, pub path : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, result__ : * mut
               < :: winrt :: HString as :: winrt :: AbiTransferable > :: Abi,)
            -> :: winrt :: ErrorCode, pub attributes : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, result__ : * mut
               < FileAttributes as :: winrt :: AbiTransferable > :: Abi,) ->
            :: winrt :: ErrorCode, pub date_created : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, result__ : * mut
               < super :: foundation :: DateTime as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            is_of_type : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem >, r#type : <
               StorageItemTypes as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut bool,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageItem {
            fn signature() -> String {
                "{4207a996-ca2f-42f7-bde8-8b10457a7f30}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageItem {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageItem> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageItem> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IStorageItem {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageItem",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageItem {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageItem {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageItem> for ::winrt::Object {
            fn from(value: IStorageItem) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageItem> for ::winrt::Object {
            fn from(value: &IStorageItem) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItem2 {
            ptr: ::winrt::ComPtr<IStorageItem2>,
        }
        impl IStorageItem2 {
            pub fn get_parent_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_parent_async)
                    (this, < super :: foundation :: IAsyncOperation :: <
                     StorageFolder > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn is_equal<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IStorageItem>>>(
                &self,
                item: T0__,
            ) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().is_equal)(
                        this,
                        item.into().get_abi(),
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async_overload_default_options(desired_name)
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async(desired_name, option)
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .delete_async_overload_default_options()
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).delete_async(option)
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>
            {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .get_basic_properties_async()
            }
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).name()
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).path()
            }
            pub fn attributes(&self) -> ::winrt::Result<FileAttributes> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).attributes()
            }
            pub fn date_created(&self) -> ::winrt::Result<super::foundation::DateTime> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).date_created()
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).is_of_type(r#type)
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageItem2 {
            type VTable = abi_IStorageItem2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1408837330,
                    2108,
                    17027,
                    [180, 91, 129, 192, 7, 35, 126, 68],
                )
            }
        }
        impl ::std::clone::Clone for IStorageItem2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItem2 where
        {
            base__ : [usize ; 6], pub get_parent_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem2 >, result__ : *
               mut < super :: foundation :: IAsyncOperation :: < StorageFolder
               > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
            ErrorCode, pub is_equal : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItem2 >, item : <
               IStorageItem as :: winrt :: AbiTransferable > :: Abi, result__
               : * mut bool,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageItem2 {
            fn signature() -> String {
                "{53f926d2-083c-4283-b45b-81c007237e44}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageItem2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageItem2> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageItem2> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for IStorageItem2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageItem2",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageItem2 {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageItem2 {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageItem2> for IStorageItem {
            fn from(value: IStorageItem2) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageItem2> for IStorageItem {
            fn from(value: &IStorageItem2) -> Self {
                <IStorageItem2 as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for IStorageItem2 {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for &'a IStorageItem2 {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageItem2> for ::winrt::Object {
            fn from(value: IStorageItem2) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageItem2> for ::winrt::Object {
            fn from(value: &IStorageItem2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItemProperties {
            ptr: ::winrt::ComPtr<IStorageItemProperties>,
        }
        impl IStorageItemProperties {
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    (this . vtable() .
                     get_thumbnail_async_overload_default_size_default_options)
                    (this, :: winrt :: AbiTransferable :: get_abi(& mode), <
                     super :: foundation :: IAsyncOperation :: <
                     file_properties :: StorageItemThumbnail > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    (this . vtable() .
                     get_thumbnail_async_overload_default_options)
                    (this, :: winrt :: AbiTransferable :: get_abi(& mode),
                     requested_size, < super :: foundation :: IAsyncOperation
                     :: < file_properties :: StorageItemThumbnail > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    (this . vtable() . get_thumbnail_async)
                    (this, :: winrt :: AbiTransferable :: get_abi(& mode),
                     requested_size, :: winrt :: AbiTransferable ::
                     get_abi(& options), < super :: foundation ::
                     IAsyncOperation :: < file_properties ::
                     StorageItemThumbnail > as :: winrt :: AbiTransferable >
                     :: set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn display_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_type)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().folder_relative_id)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn properties(
                &self,
            ) -> ::winrt::Result<file_properties::StorageItemContentProperties> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: file_properties::StorageItemContentProperties =
                        ::std::mem::zeroed();
                    (this . vtable() . properties)
                    (this, < file_properties :: StorageItemContentProperties
                     as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageItemProperties {
            type VTable = abi_IStorageItemProperties;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2254849144,
                    32809,
                    18174,
                    [167, 137, 28, 47, 62, 47, 251, 92],
                )
            }
        }
        impl ::std::clone::Clone for IStorageItemProperties {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItemProperties where
        {
            base__ : [usize ; 6], pub
            get_thumbnail_async_overload_default_size_default_options : unsafe
            extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >, mode :
               < file_properties :: ThumbnailMode as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncOperation :: < file_properties ::
               StorageItemThumbnail > as :: winrt :: AbiTransferable > ::
               Abi,) -> :: winrt :: ErrorCode, pub
            get_thumbnail_async_overload_default_options : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >, mode :
               < file_properties :: ThumbnailMode as :: winrt ::
               AbiTransferable > :: Abi, requested_size : u32, result__ : *
               mut < super :: foundation :: IAsyncOperation :: <
               file_properties :: StorageItemThumbnail > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            get_thumbnail_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >, mode :
               < file_properties :: ThumbnailMode as :: winrt ::
               AbiTransferable > :: Abi, requested_size : u32, options : <
               file_properties :: ThumbnailOptions as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncOperation :: < file_properties ::
               StorageItemThumbnail > as :: winrt :: AbiTransferable > ::
               Abi,) -> :: winrt :: ErrorCode, pub display_name : unsafe
            extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >,
               result__ : * mut < :: winrt :: HString as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            display_type : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >,
               result__ : * mut < :: winrt :: HString as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            folder_relative_id : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >,
               result__ : * mut < :: winrt :: HString as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            properties : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageItemProperties >,
               result__ : * mut < file_properties ::
               StorageItemContentProperties as :: winrt :: AbiTransferable >
               :: Abi,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageItemProperties {
            fn signature() -> String {
                "{86664478-8029-46fe-a789-1c2f3e2ffb5c}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageItemProperties {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageItemProperties> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageItemProperties> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageItemProperties {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageItemProperties",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageItemProperties {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageItemProperties {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageItemProperties> for ::winrt::Object {
            fn from(value: IStorageItemProperties) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageItemProperties> for ::winrt::Object {
            fn from(value: &IStorageItemProperties) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItemProperties2 {
            ptr: ::winrt::ComPtr<IStorageItemProperties2>,
        }
        impl IStorageItemProperties2 {
            pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    (this . vtable() .
                     get_scaled_image_as_thumbnail_async_overload_default_size_default_options)
                    (this, :: winrt :: AbiTransferable :: get_abi(& mode), <
                     super :: foundation :: IAsyncOperation :: <
                     file_properties :: StorageItemThumbnail > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    (this . vtable() .
                     get_scaled_image_as_thumbnail_async_overload_default_options)
                    (this, :: winrt :: AbiTransferable :: get_abi(& mode),
                     requested_size, < super :: foundation :: IAsyncOperation
                     :: < file_properties :: StorageItemThumbnail > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    (this . vtable() . get_scaled_image_as_thumbnail_async)
                    (this, :: winrt :: AbiTransferable :: get_abi(& mode),
                     requested_size, :: winrt :: AbiTransferable ::
                     get_abi(& options), < super :: foundation ::
                     IAsyncOperation :: < file_properties ::
                     StorageItemThumbnail > as :: winrt :: AbiTransferable >
                     :: set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_size_default_options(mode)
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_options(mode, requested_size)
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async(mode, requested_size, options)
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_name()
            }
            pub fn display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_type()
            }
            pub fn folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .folder_relative_id()
            }
            pub fn properties(
                &self,
            ) -> ::winrt::Result<file_properties::StorageItemContentProperties> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).properties()
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageItemProperties2 {
            type VTable = abi_IStorageItemProperties2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2391189841,
                    1209,
                    19410,
                    [146, 157, 254, 243, 247, 22, 33, 208],
                )
            }
        }
        impl ::std::clone::Clone for IStorageItemProperties2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItemProperties2 {
            base__: [usize; 6],
            pub get_scaled_image_as_thumbnail_async_overload_default_size_default_options:
                unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IStorageItemProperties2>,
                    mode: <file_properties::ThumbnailMode as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            pub get_scaled_image_as_thumbnail_async_overload_default_options:
                unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IStorageItemProperties2>,
                    mode: <file_properties::ThumbnailMode as ::winrt::AbiTransferable>::Abi,
                    requested_size: u32,
                    result__: *mut <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            pub get_scaled_image_as_thumbnail_async:
                unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IStorageItemProperties2>,
                    mode: <file_properties::ThumbnailMode as ::winrt::AbiTransferable>::Abi,
                    requested_size: u32,
                    options: <file_properties::ThumbnailOptions as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageItemProperties2 {
            fn signature() -> String {
                "{8e86a951-04b9-4bd2-929d-fef3f71621d0}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageItemProperties2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageItemProperties2> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageItemProperties2> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageItemProperties2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageItemProperties2",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageItemProperties2 {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageItemProperties2 {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageItemProperties2> for IStorageItemProperties {
            fn from(value: IStorageItemProperties2) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageItemProperties2> for IStorageItemProperties {
            fn from(value: &IStorageItemProperties2) -> Self {
                <IStorageItemProperties2 as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>>
            for IStorageItemProperties2
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>>
            for &'a IStorageItemProperties2
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageItemProperties2> for ::winrt::Object {
            fn from(value: IStorageItemProperties2) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageItemProperties2> for ::winrt::Object {
            fn from(value: &IStorageItemProperties2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItemPropertiesWithProvider {
            ptr: ::winrt::ComPtr<IStorageItemPropertiesWithProvider>,
        }
        impl IStorageItemPropertiesWithProvider {
            pub fn provider(&self) -> ::winrt::Result<StorageProvider> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: StorageProvider = ::std::mem::zeroed();
                    (this.vtable().provider)(
                        this,
                        <StorageProvider as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_size_default_options(mode)
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_options(mode, requested_size)
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async(mode, requested_size, options)
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_name()
            }
            pub fn display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_type()
            }
            pub fn folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .folder_relative_id()
            }
            pub fn properties(
                &self,
            ) -> ::winrt::Result<file_properties::StorageItemContentProperties> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).properties()
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageItemPropertiesWithProvider {
            type VTable = abi_IStorageItemPropertiesWithProvider;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2249978779,
                    25448,
                    19950,
                    [180, 14, 116, 104, 74, 92, 231, 20],
                )
            }
        }
        impl ::std::clone::Clone for IStorageItemPropertiesWithProvider {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItemPropertiesWithProvider {
            base__: [usize; 6],
            pub provider: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageItemPropertiesWithProvider>,
                result__: *mut <StorageProvider as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageItemPropertiesWithProvider {
            fn signature() -> String {
                "{861bf39b-6368-4dee-b40e-74684a5ce714}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageItemPropertiesWithProvider {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < IStorageItemPropertiesWithProvider > as
                :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < IStorageItemPropertiesWithProvider > as
                :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for IStorageItemPropertiesWithProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageItemPropertiesWithProvider",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageItemPropertiesWithProvider {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageItemPropertiesWithProvider {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageItemPropertiesWithProvider> for IStorageItemProperties {
            fn from(value: IStorageItemPropertiesWithProvider) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageItemPropertiesWithProvider> for IStorageItemProperties {
            fn from(value: &IStorageItemPropertiesWithProvider) -> Self {
                <IStorageItemPropertiesWithProvider as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>>
            for IStorageItemPropertiesWithProvider
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>>
            for &'a IStorageItemPropertiesWithProvider
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageItemPropertiesWithProvider> for ::winrt::Object {
            fn from(value: IStorageItemPropertiesWithProvider) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageItemPropertiesWithProvider> for ::winrt::Object {
            fn from(value: &IStorageItemPropertiesWithProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageLibraryChange {
            ptr: ::winrt::ComPtr<IStorageLibraryChange>,
        }
        impl IStorageLibraryChange {
            pub fn change_type(&self) -> ::winrt::Result<StorageLibraryChangeType> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: StorageLibraryChangeType = ::std::mem::zeroed();
                    (this.vtable().change_type)(
                        this,
                        <StorageLibraryChangeType as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn previous_path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().previous_path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().is_of_type)(
                        this,
                        ::winrt::AbiTransferable::get_abi(&r#type),
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_storage_item_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<IStorageItem> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_storage_item_async)
                    (this, < super :: foundation :: IAsyncOperation :: <
                     IStorageItem > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageLibraryChange {
            type VTable = abi_IStorageLibraryChange;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    9964323,
                    11234,
                    18697,
                    [170, 72, 21, 159, 82, 3, 165, 30],
                )
            }
        }
        impl ::std::clone::Clone for IStorageLibraryChange {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageLibraryChange where
        {
            base__ : [usize ; 6], pub change_type : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageLibraryChange >,
               result__ : * mut < StorageLibraryChangeType as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub path :
            unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageLibraryChange >,
               result__ : * mut < :: winrt :: HString as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            previous_path : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageLibraryChange >,
               result__ : * mut < :: winrt :: HString as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
            is_of_type : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageLibraryChange >, r#type
               : < StorageItemTypes as :: winrt :: AbiTransferable > :: Abi,
               result__ : * mut bool,) -> :: winrt :: ErrorCode, pub
            get_storage_item_async : unsafe extern "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageLibraryChange >,
               result__ : * mut < super :: foundation :: IAsyncOperation :: <
               IStorageItem > as :: winrt :: AbiTransferable > :: Abi,) -> ::
            winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageLibraryChange {
            fn signature() -> String {
                "{00980b23-2be2-4909-aa48-159f5203a51e}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageLibraryChange {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChange> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChange> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageLibraryChange {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageLibraryChange",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageLibraryChange {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageLibraryChange {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageLibraryChange> for ::winrt::Object {
            fn from(value: IStorageLibraryChange) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageLibraryChange> for ::winrt::Object {
            fn from(value: &IStorageLibraryChange) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageLibraryChangeReader {
            ptr: ::winrt::ComPtr<IStorageLibraryChangeReader>,
        }
        impl IStorageLibraryChangeReader {
            pub fn read_batch_async(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageLibraryChange>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageLibraryChange>,
                    > = ::std::mem::zeroed();
                    (this.vtable().read_batch_async)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageLibraryChange>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn accept_changes_async(&self) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().accept_changes_async)(
                        this,
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageLibraryChangeReader {
            type VTable = abi_IStorageLibraryChangeReader;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4060462211,
                    64674,
                    16889,
                    [137, 84, 238, 46, 153, 30, 185, 111],
                )
            }
        }
        impl ::std::clone::Clone for IStorageLibraryChangeReader {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageLibraryChangeReader {
            base__: [usize; 6],
            pub read_batch_async: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageLibraryChangeReader>,
                result__: *mut <super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageLibraryChange>,
                > as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub accept_changes_async: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageLibraryChangeReader>,
                result__: *mut <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageLibraryChangeReader {
            fn signature() -> String {
                "{f205bc83-fca2-41f9-8954-ee2e991eb96f}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageLibraryChangeReader {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeReader> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeReader> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageLibraryChangeReader {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageLibraryChangeReader",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageLibraryChangeReader {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageLibraryChangeReader {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: IStorageLibraryChangeReader) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: &IStorageLibraryChangeReader) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageLibraryChangeTracker {
            ptr: ::winrt::ComPtr<IStorageLibraryChangeTracker>,
        }
        impl IStorageLibraryChangeTracker {
            pub fn get_change_reader(&self) -> ::winrt::Result<StorageLibraryChangeReader> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: StorageLibraryChangeReader = ::std::mem::zeroed();
                    (this.vtable().get_change_reader)(
                        this,
                        <StorageLibraryChangeReader as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn enable(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().enable)(this).ok() }
            }
            pub fn reset(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().reset)(this).ok() }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageLibraryChangeTracker {
            type VTable = abi_IStorageLibraryChangeTracker;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2652205846,
                    24691,
                    17654,
                    [150, 129, 116, 146, 209, 40, 108, 144],
                )
            }
        }
        impl ::std::clone::Clone for IStorageLibraryChangeTracker {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageLibraryChangeTracker {
            base__: [usize; 6],
            pub get_change_reader: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageLibraryChangeTracker>,
                result__: *mut <StorageLibraryChangeReader as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub enable: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageLibraryChangeTracker>,
            ) -> ::winrt::ErrorCode,
            pub reset: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageLibraryChangeTracker>,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageLibraryChangeTracker {
            fn signature() -> String {
                "{9e157316-6073-44f6-9681-7492d1286c90}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageLibraryChangeTracker {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeTracker> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeTracker> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageLibraryChangeTracker {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageLibraryChangeTracker",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageLibraryChangeTracker {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageLibraryChangeTracker {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: IStorageLibraryChangeTracker) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: &IStorageLibraryChangeTracker) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageProvider {
            ptr: ::winrt::ComPtr<IStorageProvider>,
        }
        impl IStorageProvider {
            pub fn id(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().id)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageProvider {
            type VTable = abi_IStorageProvider;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3875925716,
                    54392,
                    18390,
                    [186, 70, 26, 142, 190, 17, 74, 32],
                )
            }
        }
        impl ::std::clone::Clone for IStorageProvider {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageProvider {
            base__: [usize; 6],
            pub id: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageProvider>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub display_name: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageProvider>,
                result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageProvider {
            fn signature() -> String {
                "{e705eed4-d478-47d6-ba46-1a8ebe114a20}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageProvider {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageProvider> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageProvider> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageProvider",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageProvider {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageProvider {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageProvider> for ::winrt::Object {
            fn from(value: IStorageProvider) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageProvider> for ::winrt::Object {
            fn from(value: &IStorageProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageProvider2 {
            ptr: ::winrt::ComPtr<IStorageProvider2>,
        }
        impl IStorageProvider2 {
            pub fn is_property_supported_for_partial_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                property_canonical_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<bool>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<bool> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     is_property_supported_for_partial_file_async)
                    (this, property_canonical_name . into() . get_abi(), <
                     super :: foundation :: IAsyncOperation :: < bool > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn id(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageProvider as ::std::convert::From<&Self>>::from(self).id()
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageProvider as ::std::convert::From<&Self>>::from(self).display_name()
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageProvider2 {
            type VTable = abi_IStorageProvider2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    17635607,
                    13316,
                    16715,
                    [159, 215, 205, 68, 71, 46, 170, 57],
                )
            }
        }
        impl ::std::clone::Clone for IStorageProvider2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageProvider2 where
        {
            base__ : [usize ; 6], pub
            is_property_supported_for_partial_file_async : unsafe extern
            "system"
            fn(:: winrt :: NonNullRawComPtr < IStorageProvider2 >,
               property_canonical_name : < :: winrt :: HString as :: winrt ::
               AbiTransferable > :: Abi, result__ : * mut < super ::
               foundation :: IAsyncOperation :: < bool > as :: winrt ::
               AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageProvider2 {
            fn signature() -> String {
                "{010d1917-3404-414b-9fd7-cd44472eaa39}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageProvider2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageProvider2> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageProvider2> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageProvider2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageProvider2",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageProvider2 {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageProvider2 {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageProvider2> for IStorageProvider {
            fn from(value: IStorageProvider2) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageProvider2> for IStorageProvider {
            fn from(value: &IStorageProvider2) -> Self {
                <IStorageProvider2 as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageProvider>> for IStorageProvider2 {
            fn into(self) -> ::winrt::Param<'a, IStorageProvider> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageProvider>> for &'a IStorageProvider2 {
            fn into(self) -> ::winrt::Param<'a, IStorageProvider> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageProvider2> for ::winrt::Object {
            fn from(value: IStorageProvider2) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageProvider2> for ::winrt::Object {
            fn from(value: &IStorageProvider2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStorageStreamTransaction {
            ptr: ::winrt::ComPtr<IStorageStreamTransaction>,
        }
        impl IStorageStreamTransaction {
            pub fn stream(&self) -> ::winrt::Result<streams::IRandomAccessStream> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: streams::IRandomAccessStream = ::std::mem::zeroed();
                    (this.vtable().stream)(
                        this,
                        <streams::IRandomAccessStream as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn commit_async(&self) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().commit_async)(
                        this,
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn close(&self) -> ::winrt::Result<()> {
                <super::foundation::IClosable as ::std::convert::From<&Self>>::from(self).close()
            }
        }
        unsafe impl ::winrt::ComInterface for IStorageStreamTransaction {
            type VTable = abi_IStorageStreamTransaction;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4135383907,
                    42301,
                    19860,
                    [174, 44, 103, 35, 45, 147, 172, 221],
                )
            }
        }
        impl ::std::clone::Clone for IStorageStreamTransaction {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageStreamTransaction {
            base__: [usize; 6],
            pub stream: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageStreamTransaction>,
                result__: *mut <streams::IRandomAccessStream as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
            pub commit_async: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStorageStreamTransaction>,
                result__: *mut <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStorageStreamTransaction {
            fn signature() -> String {
                "{f67cf363-a53d-4d94-ae2c-67232d93acdd}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStorageStreamTransaction {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageStreamTransaction> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageStreamTransaction> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStorageStreamTransaction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStorageStreamTransaction",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStorageStreamTransaction {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStorageStreamTransaction {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: IStorageStreamTransaction) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: &IStorageStreamTransaction) -> Self {
                <IStorageStreamTransaction as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, super::foundation::IClosable>>
            for IStorageStreamTransaction
        {
            fn into(self) -> ::winrt::Param<'a, super::foundation::IClosable> {
                ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, super::foundation::IClosable>>
            for &'a IStorageStreamTransaction
        {
            fn into(self) -> ::winrt::Param<'a, super::foundation::IClosable> {
                ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageStreamTransaction> for ::winrt::Object {
            fn from(value: IStorageStreamTransaction) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStorageStreamTransaction> for ::winrt::Object {
            fn from(value: &IStorageStreamTransaction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct IStreamedFileDataRequest {
            ptr: ::winrt::ComPtr<IStreamedFileDataRequest>,
        }
        impl IStreamedFileDataRequest {
            pub fn fail_and_close(
                &self,
                failure_mode: StreamedFileFailureMode,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    (this.vtable().fail_and_close)(
                        this,
                        ::winrt::AbiTransferable::get_abi(&failure_mode),
                    )
                    .ok()
                }
            }
        }
        unsafe impl ::winrt::ComInterface for IStreamedFileDataRequest {
            type VTable = abi_IStreamedFileDataRequest;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    376700110,
                    55997,
                    19792,
                    [190, 238, 24, 11, 138, 129, 145, 182],
                )
            }
        }
        impl ::std::clone::Clone for IStreamedFileDataRequest {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStreamedFileDataRequest {
            base__: [usize; 6],
            pub fail_and_close: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<IStreamedFileDataRequest>,
                failure_mode: <StreamedFileFailureMode as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for IStreamedFileDataRequest {
            fn signature() -> String {
                "{1673fcce-dabd-4d50-beee-180b8a8191b6}".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for IStreamedFileDataRequest {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStreamedFileDataRequest> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStreamedFileDataRequest> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for IStreamedFileDataRequest {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "IStreamedFileDataRequest",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::default::Default for IStreamedFileDataRequest {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for IStreamedFileDataRequest {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        impl ::std::convert::From<IStreamedFileDataRequest> for ::winrt::Object {
            fn from(value: IStreamedFileDataRequest) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&IStreamedFileDataRequest> for ::winrt::Object {
            fn from(value: &IStreamedFileDataRequest) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct NameCollisionOption {
            value: i32,
        }
        impl NameCollisionOption {
            #![allow(non_upper_case_globals)]
            pub const GenerateUniqueName: Self = Self { value: 0i32 };
            pub const ReplaceExisting: Self = Self { value: 1i32 };
            pub const FailIfExists: Self = Self { value: 2i32 };
        }
        unsafe impl ::winrt::RuntimeType for NameCollisionOption {
            fn signature() -> String {
                "enum(Windows.Storage.NameCollisionOption;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for NameCollisionOption {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct StorageDeleteOption {
            value: i32,
        }
        impl StorageDeleteOption {
            #![allow(non_upper_case_globals)]
            pub const Default: Self = Self { value: 0i32 };
            pub const PermanentDelete: Self = Self { value: 1i32 };
        }
        unsafe impl ::winrt::RuntimeType for StorageDeleteOption {
            fn signature() -> String {
                "enum(Windows.Storage.StorageDeleteOption;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageDeleteOption {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageFile {
            ptr: ::winrt::ComPtr<IStorageFile>,
        }
        impl StorageFile {
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async_overload_default_options(desired_name)
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async(desired_name, option)
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .delete_async_overload_default_options()
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).delete_async(option)
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>
            {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .get_basic_properties_async()
            }
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).name()
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).path()
            }
            pub fn attributes(&self) -> ::winrt::Result<FileAttributes> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).attributes()
            }
            pub fn date_created(&self) -> ::winrt::Result<super::foundation::DateTime> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).date_created()
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).is_of_type(r#type)
            }
            pub fn open_read_async(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType>,
            > {
                <streams::IRandomAccessStreamReference as ::std::convert::From<&Self>>::from(self)
                    .open_read_async()
            }
            pub fn open_sequential_read_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<streams::IInputStream>>
            {
                <streams::IInputStreamReference as ::std::convert::From<&Self>>::from(self)
                    .open_sequential_read_async()
            }
            pub fn file_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().file_type)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn content_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().content_type)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn open_async(
                &self,
                access_mode: FileAccessMode,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > = ::std::mem::zeroed();
                    (this . vtable() . open_async)
                    (this, :: winrt :: AbiTransferable ::
                     get_abi(& access_mode), < super :: foundation ::
                     IAsyncOperation :: < streams :: IRandomAccessStream > as
                     :: winrt :: AbiTransferable > :: set_abi(& mut result__))
                    . and_then(|| result__)
                }
            }
            pub fn open_transacted_write_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageStreamTransaction> =
                        ::std::mem::zeroed();
                    (this . vtable() . open_transacted_write_async)
                    (this, < super :: foundation :: IAsyncOperation :: <
                     StorageStreamTransaction > as :: winrt :: AbiTransferable
                     > :: set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn copy_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . copy_overload_default_name_and_options)
                    (this, destination_folder . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn copy_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . copy_overload_default_options)
                    (this, destination_folder . into() . get_abi(),
                     desired_new_name . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn copy_overload<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . copy_overload)
                    (this, destination_folder . into() . get_abi(),
                     desired_new_name . into() . get_abi(), :: winrt ::
                     AbiTransferable :: get_abi(& option), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn copy_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().copy_and_replace_async)(
                        this,
                        file_to_replace.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_overload_default_name_and_options)(
                        this,
                        destination_folder.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_overload_default_options)(
                        this,
                        destination_folder.into().get_abi(),
                        desired_new_name.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_overload<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_overload)(
                        this,
                        destination_folder.into().get_abi(),
                        desired_new_name.into().get_abi(),
                        ::winrt::AbiTransferable::get_abi(&option),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn move_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().move_and_replace_async)(
                        this,
                        file_to_replace.into().get_abi(),
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_size_default_options(mode)
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_options(mode, requested_size)
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async(mode, requested_size, options)
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_name()
            }
            pub fn display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_type()
            }
            pub fn folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .folder_relative_id()
            }
            pub fn properties(
                &self,
            ) -> ::winrt::Result<file_properties::StorageItemContentProperties> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).properties()
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .get_scaled_image_as_thumbnail_async_overload_default_size_default_options(mode)
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .get_scaled_image_as_thumbnail_async_overload_default_options(
                        mode,
                        requested_size,
                    )
            }
            pub fn get_scaled_image_as_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .get_scaled_image_as_thumbnail_async(mode, requested_size, options)
            }
            pub fn get_parent_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                <IStorageItem2 as ::std::convert::From<&Self>>::from(self).get_parent_async()
            }
            pub fn is_equal<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IStorageItem>>>(
                &self,
                item: T0__,
            ) -> ::winrt::Result<bool> {
                <IStorageItem2 as ::std::convert::From<&Self>>::from(self).is_equal(item)
            }
            pub fn provider(&self) -> ::winrt::Result<StorageProvider> {
                <IStorageItemPropertiesWithProvider as ::std::convert::From<&Self>>::from(self)
                    .provider()
            }
            pub fn is_available(&self) -> ::winrt::Result<bool> {
                <IStorageFilePropertiesWithAvailability as ::std::convert::From<&Self>>::from(self)
                    .is_available()
            }
            pub fn open_with_options_async(
                &self,
                access_mode: FileAccessMode,
                options: StorageOpenOptions,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                <IStorageFile2 as ::std::convert::From<&Self>>::from(self)
                    .open_with_options_async(access_mode, options)
            }
            pub fn open_transacted_write_with_options_async(
                &self,
                options: StorageOpenOptions,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                <IStorageFile2 as ::std::convert::From<&Self>>::from(self)
                    .open_transacted_write_with_options_async(options)
            }
            pub fn get_file_from_path_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                path: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|f| f.get_file_from_path_async(path))
            }
            pub fn get_file_from_application_uri_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, super::foundation::Uri>>,
            >(
                uri: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|f| f.get_file_from_application_uri_async(uri))
            }
            pub fn create_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                display_name_with_extension: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|f| {
                    f.create_streamed_file_async(
                        display_name_with_extension,
                        data_requested,
                        thumbnail,
                    )
                })
            }
            pub fn replace_with_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                file_to_replace: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|f| {
                    f.replace_with_streamed_file_async(file_to_replace, data_requested, thumbnail)
                })
            }
            pub fn create_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                display_name_with_extension: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|f| {
                    f.create_streamed_file_from_uri_async(
                        display_name_with_extension,
                        uri,
                        thumbnail,
                    )
                })
            }
            pub fn replace_with_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::winrt::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                file_to_replace: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|f| {
                    f.replace_with_streamed_file_from_uri_async(file_to_replace, uri, thumbnail)
                })
            }
            #[allow(non_snake_case)]
            fn IStorageFileStatics<R, F: FnOnce(&IStorageFileStatics) -> ::winrt::Result<R>>(
                callback: F,
            ) -> ::winrt::Result<R> {
                static mut SHARED: ::winrt::FactoryCache<StorageFile, IStorageFileStatics> =
                    ::winrt::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::winrt::RuntimeName for StorageFile {
            const NAME: &'static str = "Windows.Storage.StorageFile";
        }
        unsafe impl ::winrt::ComInterface for StorageFile {
            type VTable = abi_IStorageFile;
            fn iid() -> ::winrt::Guid {
                <IStorageFile as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageFile {
            fn signature() -> String {
                "rc(Windows.Storage.StorageFile;{fa3f6186-4214-428c-a64c-14c9ac7315ea})".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageFile {
            type Abi = ::winrt::RawComPtr<IStorageFile>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFile> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFile> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
            }
        }
        impl ::std::fmt::Debug for StorageFile {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageFile",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItem {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItem {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for &'a StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>
            for StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, streams::IRandomAccessStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IRandomAccessStreamReference>>
            for &'a StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, streams::IRandomAccessStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFile> for streams::IInputStreamReference {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for streams::IInputStreamReference {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IInputStreamReference>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, streams::IInputStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IInputStreamReference>>
            for &'a StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, streams::IInputStreamReference> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageFile {
            fn from(value: StorageFile) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageFile {
            fn from(value: &StorageFile) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFile>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageFile> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFile>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFile>> for &'a StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageFile> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFile>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItemProperties {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItemProperties {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>> for &'a StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItemProperties2 {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItemProperties2 {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties2>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties2>> for &'a StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItem2 {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItem2 {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem2>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItem2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem2>> for &'a StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageItem2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItemPropertiesWithProvider {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItemPropertiesWithProvider {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemPropertiesWithProvider>>
            for StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemPropertiesWithProvider> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemPropertiesWithProvider>>
            for &'a StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemPropertiesWithProvider> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageFilePropertiesWithAvailability {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageFilePropertiesWithAvailability {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFilePropertiesWithAvailability>>
            for StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, IStorageFilePropertiesWithAvailability> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IStorageFilePropertiesWithAvailability>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFilePropertiesWithAvailability>>
            for &'a StorageFile
        {
            fn into(self) -> ::winrt::Param<'a, IStorageFilePropertiesWithAvailability> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IStorageFilePropertiesWithAvailability>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageFile2 {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageFile2 {
            fn from(value: &StorageFile) -> Self {
                <StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFile2>> for StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageFile2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFile2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFile2>> for &'a StorageFile {
            fn into(self) -> ::winrt::Param<'a, IStorageFile2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFile2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for ::winrt::Object {
            fn from(value: StorageFile) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageFile> for ::winrt::Object {
            fn from(value: &StorageFile) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageFolder {
            ptr: ::winrt::ComPtr<IStorageFolder>,
        }
        impl StorageFolder {
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async_overload_default_options(desired_name)
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .rename_async(desired_name, option)
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .delete_async_overload_default_options()
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::winrt::Result<super::foundation::IAsyncAction> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).delete_async(option)
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>
            {
                <IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .get_basic_properties_async()
            }
            pub fn name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).name()
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).path()
            }
            pub fn attributes(&self) -> ::winrt::Result<FileAttributes> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).attributes()
            }
            pub fn date_created(&self) -> ::winrt::Result<super::foundation::DateTime> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).date_created()
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                <IStorageItem as ::std::convert::From<&Self>>::from(self).is_of_type(r#type)
            }
            pub fn create_file_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     create_file_async_overload_default_options)
                    (this, desired_name . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . create_file_async)
                    (this, desired_name . into() . get_abi(), :: winrt ::
                     AbiTransferable :: get_abi(& options), < super ::
                     foundation :: IAsyncOperation :: < StorageFile > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_folder_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() .
                     create_folder_async_overload_default_options)
                    (this, desired_name . into() . get_abi(), < super ::
                     foundation :: IAsyncOperation :: < StorageFolder > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn create_folder_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() . create_folder_async)
                    (this, desired_name . into() . get_abi(), :: winrt ::
                     AbiTransferable :: get_abi(& options), < super ::
                     foundation :: IAsyncOperation :: < StorageFolder > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFile> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_file_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFile > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_folder_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<StorageFolder> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_folder_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < StorageFolder > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_item_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<IStorageItem> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_item_async)
                    (this, name . into() . get_abi(), < super :: foundation ::
                     IAsyncOperation :: < IStorageItem > as :: winrt ::
                     AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn get_files_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    > = ::std::mem::zeroed();
                    (this
                        .vtable()
                        .get_files_async_overload_default_options_start_and_count)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageFile>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_folders_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    > = ::std::mem::zeroed();
                    (this
                        .vtable()
                        .get_folders_async_overload_default_options_start_and_count)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageFolder>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_items_async_overload_default_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<IStorageItem>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    > = ::std::mem::zeroed();
                    (this
                        .vtable()
                        .get_items_async_overload_default_start_and_count)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<IStorageItem>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_indexed_state_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<search::IndexedState>>
            {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .get_indexed_state_async()
            }
            pub fn create_file_query_overload_default(
                &self,
            ) -> ::winrt::Result<search::StorageFileQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_file_query_overload_default()
            }
            pub fn create_file_query(
                &self,
                query: search::CommonFileQuery,
            ) -> ::winrt::Result<search::StorageFileQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_file_query(query)
            }
            pub fn create_file_query_with_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::winrt::Result<search::StorageFileQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_file_query_with_options(query_options)
            }
            pub fn create_folder_query_overload_default(
                &self,
            ) -> ::winrt::Result<search::StorageFolderQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_folder_query_overload_default()
            }
            pub fn create_folder_query(
                &self,
                query: search::CommonFolderQuery,
            ) -> ::winrt::Result<search::StorageFolderQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_folder_query(query)
            }
            pub fn create_folder_query_with_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::winrt::Result<search::StorageFolderQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_folder_query_with_options(query_options)
            }
            pub fn create_item_query(&self) -> ::winrt::Result<search::StorageItemQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_item_query()
            }
            pub fn create_item_query_with_options<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::winrt::Result<search::StorageItemQueryResult> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .create_item_query_with_options(query_options)
            }
            pub fn get_files_async(
                &self,
                query: search::CommonFileQuery,
                start_index: u32,
                max_items_to_retrieve: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .get_files_async(query, start_index, max_items_to_retrieve)
            }
            pub fn get_files_async_overload_default_start_and_count(
                &self,
                query: search::CommonFileQuery,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .get_files_async_overload_default_start_and_count(query)
            }
            pub fn get_folders_async(
                &self,
                query: search::CommonFolderQuery,
                start_index: u32,
                max_items_to_retrieve: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .get_folders_async(query, start_index, max_items_to_retrieve)
            }
            pub fn get_folders_async_overload_default_start_and_count(
                &self,
                query: search::CommonFolderQuery,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .get_folders_async_overload_default_start_and_count(query)
            }
            pub fn get_items_async(
                &self,
                start_index: u32,
                max_items_to_retrieve: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<IStorageItem>,
                >,
            > {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .get_items_async(start_index, max_items_to_retrieve)
            }
            pub fn are_query_options_supported<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::winrt::Result<bool> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .are_query_options_supported(query_options)
            }
            pub fn is_common_folder_query_supported(
                &self,
                query: search::CommonFolderQuery,
            ) -> ::winrt::Result<bool> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .is_common_folder_query_supported(query)
            }
            pub fn is_common_file_query_supported(
                &self,
                query: search::CommonFileQuery,
            ) -> ::winrt::Result<bool> {
                <search::IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(self)
                    .is_common_file_query_supported(query)
            }
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_size_default_options(mode)
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async_overload_default_options(mode, requested_size)
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .get_thumbnail_async(mode, requested_size, options)
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_name()
            }
            pub fn display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).display_type()
            }
            pub fn folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .folder_relative_id()
            }
            pub fn properties(
                &self,
            ) -> ::winrt::Result<file_properties::StorageItemContentProperties> {
                <IStorageItemProperties as ::std::convert::From<&Self>>::from(self).properties()
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .get_scaled_image_as_thumbnail_async_overload_default_size_default_options(mode)
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .get_scaled_image_as_thumbnail_async_overload_default_options(
                        mode,
                        requested_size,
                    )
            }
            pub fn get_scaled_image_as_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                <IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .get_scaled_image_as_thumbnail_async(mode, requested_size, options)
            }
            pub fn get_parent_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                <IStorageItem2 as ::std::convert::From<&Self>>::from(self).get_parent_async()
            }
            pub fn is_equal<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IStorageItem>>>(
                &self,
                item: T0__,
            ) -> ::winrt::Result<bool> {
                <IStorageItem2 as ::std::convert::From<&Self>>::from(self).is_equal(item)
            }
            pub fn try_get_item_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                <IStorageFolder2 as ::std::convert::From<&Self>>::from(self)
                    .try_get_item_async(name)
            }
            pub fn provider(&self) -> ::winrt::Result<StorageProvider> {
                <IStorageItemPropertiesWithProvider as ::std::convert::From<&Self>>::from(self)
                    .provider()
            }
            pub fn try_get_change_tracker(&self) -> ::winrt::Result<StorageLibraryChangeTracker> {
                <IStorageFolder3 as ::std::convert::From<&Self>>::from(self)
                    .try_get_change_tracker()
            }
            pub fn get_folder_from_path_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                path: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                Self::IStorageFolderStatics(|f| f.get_folder_from_path_async(path))
            }
            #[allow(non_snake_case)]
            fn IStorageFolderStatics<R, F: FnOnce(&IStorageFolderStatics) -> ::winrt::Result<R>>(
                callback: F,
            ) -> ::winrt::Result<R> {
                static mut SHARED: ::winrt::FactoryCache<StorageFolder, IStorageFolderStatics> =
                    ::winrt::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::winrt::RuntimeName for StorageFolder {
            const NAME: &'static str = "Windows.Storage.StorageFolder";
        }
        unsafe impl ::winrt::ComInterface for StorageFolder {
            type VTable = abi_IStorageFolder;
            fn iid() -> ::winrt::Guid {
                <IStorageFolder as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageFolder {
            fn signature() -> String {
                "rc(Windows.Storage.StorageFolder;{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b})"
                    .to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageFolder {
            type Abi = ::winrt::RawComPtr<IStorageFolder>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageFolder> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageFolder> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StorageFolder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageFolder",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItem {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItem {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItem> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageFolder {
            fn from(value: StorageFolder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageFolder {
            fn from(value: &StorageFolder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolder>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageFolder> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolder>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageFolder> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for search::IStorageFolderQueryOperations {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for search::IStorageFolderQueryOperations {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, search::IStorageFolderQueryOperations>>
            for StorageFolder
        {
            fn into(self) -> ::winrt::Param<'a, search::IStorageFolderQueryOperations> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<search::IStorageFolderQueryOperations>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, search::IStorageFolderQueryOperations>>
            for &'a StorageFolder
        {
            fn into(self) -> ::winrt::Param<'a, search::IStorageFolderQueryOperations> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<search::IStorageFolderQueryOperations>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItemProperties {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItemProperties {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItemProperties2 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItemProperties2 {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties2>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemProperties2>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItemProperties2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItem2 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItem2 {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem2>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItem2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItem2>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageItem2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageFolder2 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageFolder2 {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolder2>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageFolder2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolder2>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageFolder2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItemPropertiesWithProvider {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItemPropertiesWithProvider {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemPropertiesWithProvider>>
            for StorageFolder
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemPropertiesWithProvider> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemPropertiesWithProvider>>
            for &'a StorageFolder
        {
            fn into(self) -> ::winrt::Param<'a, IStorageItemPropertiesWithProvider> {
                ::winrt::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageFolder3 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageFolder3 {
            fn from(value: &StorageFolder) -> Self {
                <StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolder3>> for StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageFolder3> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder3>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolder3>> for &'a StorageFolder {
            fn into(self) -> ::winrt::Param<'a, IStorageFolder3> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder3>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for ::winrt::Object {
            fn from(value: StorageFolder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageFolder> for ::winrt::Object {
            fn from(value: &StorageFolder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct StorageItemTypes {
            value: u32,
        }
        impl StorageItemTypes {
            #![allow(non_upper_case_globals)]
            pub const None: Self = Self { value: 0u32 };
            pub const File: Self = Self { value: 1u32 };
            pub const Folder: Self = Self { value: 2u32 };
        }
        unsafe impl ::winrt::RuntimeType for StorageItemTypes {
            fn signature() -> String {
                "enum(Windows.Storage.StorageItemTypes;u4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageItemTypes {
            type Abi = u32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        impl ::std::ops::BitOr for StorageItemTypes {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self {
                    value: self.value | rhs.value,
                }
            }
        }
        impl ::std::ops::BitAnd for StorageItemTypes {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self {
                    value: self.value & rhs.value,
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageLibraryChange {
            ptr: ::winrt::ComPtr<IStorageLibraryChange>,
        }
        impl StorageLibraryChange {
            pub fn change_type(&self) -> ::winrt::Result<StorageLibraryChangeType> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: StorageLibraryChangeType = ::std::mem::zeroed();
                    (this.vtable().change_type)(
                        this,
                        <StorageLibraryChangeType as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn previous_path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().previous_path)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::winrt::Result<bool> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: bool = ::std::mem::zeroed();
                    (this.vtable().is_of_type)(
                        this,
                        ::winrt::AbiTransferable::get_abi(&r#type),
                        <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn get_storage_item_async(
                &self,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<IStorageItem> =
                        ::std::mem::zeroed();
                    (this . vtable() . get_storage_item_async)
                    (this, < super :: foundation :: IAsyncOperation :: <
                     IStorageItem > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
        }
        impl ::winrt::RuntimeName for StorageLibraryChange {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChange";
        }
        unsafe impl ::winrt::ComInterface for StorageLibraryChange {
            type VTable = abi_IStorageLibraryChange;
            fn iid() -> ::winrt::Guid {
                <IStorageLibraryChange as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageLibraryChange {
            fn signature() -> String {
                "rc(Windows.Storage.StorageLibraryChange;{00980b23-2be2-4909-aa48-159f5203a51e})"
                    .to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageLibraryChange {
            type Abi = ::winrt::RawComPtr<IStorageLibraryChange>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChange> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChange> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StorageLibraryChange {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageLibraryChange",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageLibraryChange> for IStorageLibraryChange {
            fn from(value: StorageLibraryChange) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChange> for IStorageLibraryChange {
            fn from(value: &StorageLibraryChange) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageLibraryChange>> for StorageLibraryChange {
            fn into(self) -> ::winrt::Param<'a, IStorageLibraryChange> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChange>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageLibraryChange>>
            for &'a StorageLibraryChange
        {
            fn into(self) -> ::winrt::Param<'a, IStorageLibraryChange> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChange>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageLibraryChange> for ::winrt::Object {
            fn from(value: StorageLibraryChange) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChange> for ::winrt::Object {
            fn from(value: &StorageLibraryChange) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        unsafe impl ::std::marker::Send for StorageLibraryChange {}
        unsafe impl ::std::marker::Sync for StorageLibraryChange {}
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageLibraryChangeReader {
            ptr: ::winrt::ComPtr<IStorageLibraryChangeReader>,
        }
        impl StorageLibraryChangeReader {
            pub fn read_batch_async(
                &self,
            ) -> ::winrt::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageLibraryChange>,
                >,
            > {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageLibraryChange>,
                    > = ::std::mem::zeroed();
                    (this.vtable().read_batch_async)(
                        this,
                        <super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageLibraryChange>,
                        > as ::winrt::AbiTransferable>::set_abi(
                            &mut result__
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn accept_changes_async(&self) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().accept_changes_async)(
                        this,
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
        }
        impl ::winrt::RuntimeName for StorageLibraryChangeReader {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChangeReader";
        }
        unsafe impl ::winrt::ComInterface for StorageLibraryChangeReader {
            type VTable = abi_IStorageLibraryChangeReader;
            fn iid() -> ::winrt::Guid {
                <IStorageLibraryChangeReader as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageLibraryChangeReader {
            fn signature() -> String {
                "rc(Windows.Storage.StorageLibraryChangeReader;{f205bc83-fca2-41f9-8954-ee2e991eb96f})"
                . to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageLibraryChangeReader {
            type Abi = ::winrt::RawComPtr<IStorageLibraryChangeReader>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeReader> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeReader> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StorageLibraryChangeReader {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageLibraryChangeReader",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageLibraryChangeReader> for IStorageLibraryChangeReader {
            fn from(value: StorageLibraryChangeReader) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeReader> for IStorageLibraryChangeReader {
            fn from(value: &StorageLibraryChangeReader) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageLibraryChangeReader>>
            for StorageLibraryChangeReader
        {
            fn into(self) -> ::winrt::Param<'a, IStorageLibraryChangeReader> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeReader>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageLibraryChangeReader>>
            for &'a StorageLibraryChangeReader
        {
            fn into(self) -> ::winrt::Param<'a, IStorageLibraryChangeReader> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeReader>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: StorageLibraryChangeReader) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: &StorageLibraryChangeReader) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        unsafe impl ::std::marker::Send for StorageLibraryChangeReader {}
        unsafe impl ::std::marker::Sync for StorageLibraryChangeReader {}
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageLibraryChangeTracker {
            ptr: ::winrt::ComPtr<IStorageLibraryChangeTracker>,
        }
        impl StorageLibraryChangeTracker {
            pub fn get_change_reader(&self) -> ::winrt::Result<StorageLibraryChangeReader> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: StorageLibraryChangeReader = ::std::mem::zeroed();
                    (this.vtable().get_change_reader)(
                        this,
                        <StorageLibraryChangeReader as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn enable(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().enable)(this).ok() }
            }
            pub fn reset(&self) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().reset)(this).ok() }
            }
        }
        impl ::winrt::RuntimeName for StorageLibraryChangeTracker {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChangeTracker";
        }
        unsafe impl ::winrt::ComInterface for StorageLibraryChangeTracker {
            type VTable = abi_IStorageLibraryChangeTracker;
            fn iid() -> ::winrt::Guid {
                <IStorageLibraryChangeTracker as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageLibraryChangeTracker {
            fn signature() -> String {
                "rc(Windows.Storage.StorageLibraryChangeTracker;{9e157316-6073-44f6-9681-7492d1286c90})"
                . to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageLibraryChangeTracker {
            type Abi = ::winrt::RawComPtr<IStorageLibraryChangeTracker>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeTracker> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageLibraryChangeTracker> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StorageLibraryChangeTracker {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageLibraryChangeTracker",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageLibraryChangeTracker> for IStorageLibraryChangeTracker {
            fn from(value: StorageLibraryChangeTracker) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeTracker> for IStorageLibraryChangeTracker {
            fn from(value: &StorageLibraryChangeTracker) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageLibraryChangeTracker>>
            for StorageLibraryChangeTracker
        {
            fn into(self) -> ::winrt::Param<'a, IStorageLibraryChangeTracker> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeTracker>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageLibraryChangeTracker>>
            for &'a StorageLibraryChangeTracker
        {
            fn into(self) -> ::winrt::Param<'a, IStorageLibraryChangeTracker> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeTracker>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: StorageLibraryChangeTracker) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: &StorageLibraryChangeTracker) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        unsafe impl ::std::marker::Send for StorageLibraryChangeTracker {}
        unsafe impl ::std::marker::Sync for StorageLibraryChangeTracker {}
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct StorageLibraryChangeType {
            value: i32,
        }
        impl StorageLibraryChangeType {
            #![allow(non_upper_case_globals)]
            pub const Created: Self = Self { value: 0i32 };
            pub const Deleted: Self = Self { value: 1i32 };
            pub const MovedOrRenamed: Self = Self { value: 2i32 };
            pub const ContentsChanged: Self = Self { value: 3i32 };
            pub const MovedOutOfLibrary: Self = Self { value: 4i32 };
            pub const MovedIntoLibrary: Self = Self { value: 5i32 };
            pub const ContentsReplaced: Self = Self { value: 6i32 };
            pub const IndexingStatusChanged: Self = Self { value: 7i32 };
            pub const EncryptionChanged: Self = Self { value: 8i32 };
            pub const ChangeTrackingLost: Self = Self { value: 9i32 };
        }
        unsafe impl ::winrt::RuntimeType for StorageLibraryChangeType {
            fn signature() -> String {
                "enum(Windows.Storage.StorageLibraryChangeType;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageLibraryChangeType {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct StorageOpenOptions {
            value: u32,
        }
        impl StorageOpenOptions {
            #![allow(non_upper_case_globals)]
            pub const None: Self = Self { value: 0u32 };
            pub const AllowOnlyReaders: Self = Self { value: 1u32 };
            pub const AllowReadersAndWriters: Self = Self { value: 2u32 };
        }
        unsafe impl ::winrt::RuntimeType for StorageOpenOptions {
            fn signature() -> String {
                "enum(Windows.Storage.StorageOpenOptions;u4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageOpenOptions {
            type Abi = u32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        impl ::std::ops::BitOr for StorageOpenOptions {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self {
                    value: self.value | rhs.value,
                }
            }
        }
        impl ::std::ops::BitAnd for StorageOpenOptions {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self {
                    value: self.value & rhs.value,
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageProvider {
            ptr: ::winrt::ComPtr<IStorageProvider>,
        }
        impl StorageProvider {
            pub fn id(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().id)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn display_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: ::winrt::HString = ::std::mem::zeroed();
                    (this.vtable().display_name)(
                        this,
                        <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn is_property_supported_for_partial_file_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                property_canonical_name: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperation<bool>> {
                <IStorageProvider2 as ::std::convert::From<&Self>>::from(self)
                    .is_property_supported_for_partial_file_async(property_canonical_name)
            }
        }
        impl ::winrt::RuntimeName for StorageProvider {
            const NAME: &'static str = "Windows.Storage.StorageProvider";
        }
        unsafe impl ::winrt::ComInterface for StorageProvider {
            type VTable = abi_IStorageProvider;
            fn iid() -> ::winrt::Guid {
                <IStorageProvider as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageProvider {
            fn signature() -> String {
                "rc(Windows.Storage.StorageProvider;{e705eed4-d478-47d6-ba46-1a8ebe114a20})"
                    .to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageProvider {
            type Abi = ::winrt::RawComPtr<IStorageProvider>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageProvider> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageProvider> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StorageProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageProvider",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageProvider> for IStorageProvider {
            fn from(value: StorageProvider) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageProvider> for IStorageProvider {
            fn from(value: &StorageProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageProvider>> for StorageProvider {
            fn into(self) -> ::winrt::Param<'a, IStorageProvider> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageProvider>> for &'a StorageProvider {
            fn into(self) -> ::winrt::Param<'a, IStorageProvider> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageProvider> for IStorageProvider2 {
            fn from(value: StorageProvider) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageProvider> for IStorageProvider2 {
            fn from(value: &StorageProvider) -> Self {
                <StorageProvider as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageProvider2>> for StorageProvider {
            fn into(self) -> ::winrt::Param<'a, IStorageProvider2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageProvider2>> for &'a StorageProvider {
            fn into(self) -> ::winrt::Param<'a, IStorageProvider2> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageProvider> for ::winrt::Object {
            fn from(value: StorageProvider) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageProvider> for ::winrt::Object {
            fn from(value: &StorageProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StorageStreamTransaction {
            ptr: ::winrt::ComPtr<IStorageStreamTransaction>,
        }
        impl StorageStreamTransaction {
            pub fn close(&self) -> ::winrt::Result<()> {
                <super::foundation::IClosable as ::std::convert::From<&Self>>::from(self).close()
            }
            pub fn stream(&self) -> ::winrt::Result<streams::IRandomAccessStream> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: streams::IRandomAccessStream = ::std::mem::zeroed();
                    (this.vtable().stream)(
                        this,
                        <streams::IRandomAccessStream as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
            pub fn commit_async(&self) -> ::winrt::Result<super::foundation::IAsyncAction> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncAction = ::std::mem::zeroed();
                    (this.vtable().commit_async)(
                        this,
                        <super::foundation::IAsyncAction as ::winrt::AbiTransferable>::set_abi(
                            &mut result__,
                        ),
                    )
                    .and_then(|| result__)
                }
            }
        }
        impl ::winrt::RuntimeName for StorageStreamTransaction {
            const NAME: &'static str = "Windows.Storage.StorageStreamTransaction";
        }
        unsafe impl ::winrt::ComInterface for StorageStreamTransaction {
            type VTable = abi_IStorageStreamTransaction;
            fn iid() -> ::winrt::Guid {
                <IStorageStreamTransaction as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StorageStreamTransaction {
            fn signature() -> String {
                "rc(Windows.Storage.StorageStreamTransaction;{f67cf363-a53d-4d94-ae2c-67232d93acdd})"
                . to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StorageStreamTransaction {
            type Abi = ::winrt::RawComPtr<IStorageStreamTransaction>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<IStorageStreamTransaction> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<IStorageStreamTransaction> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StorageStreamTransaction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StorageStreamTransaction",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: StorageStreamTransaction) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: &StorageStreamTransaction) -> Self {
                <StorageStreamTransaction as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, super::foundation::IClosable>>
            for StorageStreamTransaction
        {
            fn into(self) -> ::winrt::Param<'a, super::foundation::IClosable> {
                ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, super::foundation::IClosable>>
            for &'a StorageStreamTransaction
        {
            fn into(self) -> ::winrt::Param<'a, super::foundation::IClosable> {
                ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageStreamTransaction> for IStorageStreamTransaction {
            fn from(value: StorageStreamTransaction) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageStreamTransaction> for IStorageStreamTransaction {
            fn from(value: &StorageStreamTransaction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageStreamTransaction>>
            for StorageStreamTransaction
        {
            fn into(self) -> ::winrt::Param<'a, IStorageStreamTransaction> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageStreamTransaction>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageStreamTransaction>>
            for &'a StorageStreamTransaction
        {
            fn into(self) -> ::winrt::Param<'a, IStorageStreamTransaction> {
                ::winrt::Param::Owned(::std::convert::Into::<IStorageStreamTransaction>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageStreamTransaction> for ::winrt::Object {
            fn from(value: StorageStreamTransaction) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageStreamTransaction> for ::winrt::Object {
            fn from(value: &StorageStreamTransaction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct StreamedFileDataRequest {
            ptr: ::winrt::ComPtr<streams::IOutputStream>,
        }
        impl StreamedFileDataRequest {
            pub fn close(&self) -> ::winrt::Result<()> {
                <super::foundation::IClosable as ::std::convert::From<&Self>>::from(self).close()
            }
            pub fn write_async<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, streams::IBuffer>>,
            >(
                &self,
                buffer: T0__,
            ) -> ::winrt::Result<super::foundation::IAsyncOperationWithProgress<u32, u32>>
            {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperationWithProgress<u32, u32> =
                        ::std::mem::zeroed();
                    (this . vtable() . write_async)
                    (this, buffer . into() . get_abi(), < super :: foundation
                     :: IAsyncOperationWithProgress :: < u32, u32 > as ::
                     winrt :: AbiTransferable > :: set_abi(& mut result__)) .
                    and_then(|| result__)
                }
            }
            pub fn flush_async(&self) -> ::winrt::Result<super::foundation::IAsyncOperation<bool>> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe {
                    let mut result__: super::foundation::IAsyncOperation<bool> =
                        ::std::mem::zeroed();
                    (this . vtable() . flush_async)
                    (this, < super :: foundation :: IAsyncOperation :: < bool
                     > as :: winrt :: AbiTransferable > ::
                     set_abi(& mut result__)) . and_then(|| result__)
                }
            }
            pub fn fail_and_close(
                &self,
                failure_mode: StreamedFileFailureMode,
            ) -> ::winrt::Result<()> {
                <IStreamedFileDataRequest as ::std::convert::From<&Self>>::from(self)
                    .fail_and_close(failure_mode)
            }
        }
        impl ::winrt::RuntimeName for StreamedFileDataRequest {
            const NAME: &'static str = "Windows.Storage.StreamedFileDataRequest";
        }
        unsafe impl ::winrt::ComInterface for StreamedFileDataRequest {
            type VTable = streams::abi_IOutputStream;
            fn iid() -> ::winrt::Guid {
                <streams::IOutputStream as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for StreamedFileDataRequest {
            fn signature() -> String {
                "rc(Windows.Storage.StreamedFileDataRequest;{905a0fe6-bc53-11df-8c49-001e4fc686da})"
                    .to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StreamedFileDataRequest {
            type Abi = ::winrt::RawComPtr<streams::IOutputStream>;
            fn get_abi(&self) -> Self::Abi {
                <::winrt::ComPtr<streams::IOutputStream> as ::winrt::AbiTransferable>::get_abi(
                    &self.ptr,
                )
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                <::winrt::ComPtr<streams::IOutputStream> as ::winrt::AbiTransferable>::set_abi(
                    &mut self.ptr,
                )
            }
        }
        impl ::std::fmt::Debug for StreamedFileDataRequest {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}",
                    ::std::format!(
                        "{}({:?})",
                        "StreamedFileDataRequest",
                        <Self as ::winrt::AbiTransferable>::get_abi(self)
                    )
                )
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for super::foundation::IClosable {
            fn from(value: StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for super::foundation::IClosable {
            fn from(value: &StreamedFileDataRequest) -> Self {
                <StreamedFileDataRequest as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, super::foundation::IClosable>>
            for StreamedFileDataRequest
        {
            fn into(self) -> ::winrt::Param<'a, super::foundation::IClosable> {
                ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, super::foundation::IClosable>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::winrt::Param<'a, super::foundation::IClosable> {
                ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for streams::IOutputStream {
            fn from(value: StreamedFileDataRequest) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for streams::IOutputStream {
            fn from(value: &StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IOutputStream>>
            for StreamedFileDataRequest
        {
            fn into(self) -> ::winrt::Param<'a, streams::IOutputStream> {
                ::winrt::Param::Owned(::std::convert::Into::<streams::IOutputStream>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, streams::IOutputStream>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::winrt::Param<'a, streams::IOutputStream> {
                ::winrt::Param::Owned(::std::convert::Into::<streams::IOutputStream>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for IStreamedFileDataRequest {
            fn from(value: StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for IStreamedFileDataRequest {
            fn from(value: &StreamedFileDataRequest) -> Self {
                <StreamedFileDataRequest as ::winrt::ComInterface>::query(value)
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStreamedFileDataRequest>>
            for StreamedFileDataRequest
        {
            fn into(self) -> ::winrt::Param<'a, IStreamedFileDataRequest> {
                ::winrt::Param::Owned(::std::convert::Into::<IStreamedFileDataRequest>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::winrt::Param<'a, IStreamedFileDataRequest>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::winrt::Param<'a, IStreamedFileDataRequest> {
                ::winrt::Param::Owned(::std::convert::Into::<IStreamedFileDataRequest>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for ::winrt::Object {
            fn from(value: StreamedFileDataRequest) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for ::winrt::Object {
            fn from(value: &StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        pub struct StreamedFileDataRequestedHandler {
            ptr: ::winrt::ComPtr<StreamedFileDataRequestedHandler>,
        }
        impl StreamedFileDataRequestedHandler {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::winrt::Param<'a, StreamedFileDataRequest>>,
            >(
                &self,
                stream: T0__,
            ) -> ::winrt::Result<()> {
                let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                    .expect("The `this` pointer was null when calling method");
                unsafe { (this.vtable().invoke)(this, stream.into().get_abi()).ok() }
            }
            pub fn new<F: FnMut(&StreamedFileDataRequest) -> ::winrt::Result<()> + 'static>(
                invoke: F,
            ) -> Self {
                impl_StreamedFileDataRequestedHandler::<F>::new(invoke)
            }
        }
        unsafe impl ::winrt::ComInterface for StreamedFileDataRequestedHandler {
            type VTable = abi_StreamedFileDataRequestedHandler;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4277577764,
                    12257,
                    19719,
                    [163, 91, 183, 124, 80, 181, 244, 204],
                )
            }
        }
        impl ::std::clone::Clone for StreamedFileDataRequestedHandler {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_StreamedFileDataRequestedHandler {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release:
                extern "system" fn(::winrt::NonNullRawComPtr<::winrt::IUnknown>) -> u32,
            pub invoke: unsafe extern "system" fn(
                ::winrt::NonNullRawComPtr<StreamedFileDataRequestedHandler>,
                stream: <StreamedFileDataRequest as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for StreamedFileDataRequestedHandler {
            fn signature() -> String {
                "delegate({fef6a824-2fe1-4d07-a35b-b77c50b5f4cc})".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StreamedFileDataRequestedHandler {
            type Abi = ::winrt::RawComPtr<Self>;
            fn get_abi(&self) -> Self::Abi {
                < :: winrt :: ComPtr < StreamedFileDataRequestedHandler > as
                :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                < :: winrt :: ComPtr < StreamedFileDataRequestedHandler > as
                :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
            }
        }
        impl ::std::fmt::Debug for StreamedFileDataRequestedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "{}({:?})",
                    "StreamedFileDataRequestedHandler",
                    <Self as ::winrt::AbiTransferable>::get_abi(self)
                )
            }
        }
        impl ::std::default::Default for StreamedFileDataRequestedHandler {
            fn default() -> Self {
                Self {
                    ptr: ::winrt::ComPtr::default(),
                }
            }
        }
        impl ::std::cmp::PartialEq<Self> for StreamedFileDataRequestedHandler {
            fn eq(&self, other: &Self) -> bool {
                self.ptr == other.ptr
            }
        }
        #[repr(C)]
        struct impl_StreamedFileDataRequestedHandler<
            F: FnMut(&StreamedFileDataRequest) -> ::winrt::Result<()> + 'static,
        > {
            vtable: *const abi_StreamedFileDataRequestedHandler,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<F: FnMut(&StreamedFileDataRequest) -> ::winrt::Result<()> + 'static>
            impl_StreamedFileDataRequestedHandler<F>
        {
            const VTABLE: abi_StreamedFileDataRequestedHandler =
                abi_StreamedFileDataRequestedHandler {
                    unknown_query_interface:
                        impl_StreamedFileDataRequestedHandler::<F>::unknown_query_interface,
                    unknown_add_ref: impl_StreamedFileDataRequestedHandler::<F>::unknown_add_ref,
                    unknown_release: impl_StreamedFileDataRequestedHandler::<F>::unknown_release,
                    invoke: impl_StreamedFileDataRequestedHandler::<F>::invoke,
                };
            pub fn new(invoke: F) -> StreamedFileDataRequestedHandler {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(),
                    invoke,
                };
                unsafe {
                    let mut result: StreamedFileDataRequestedHandler = std::mem::zeroed();
                    let ptr: ::std::ptr::NonNull<Self> = ::std::ptr::NonNull::new_unchecked(
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value)),
                    );
                    *<StreamedFileDataRequestedHandler as ::winrt::AbiTransferable>::set_abi(
                        &mut result,
                    ) = Some(::winrt::NonNullRawComPtr::new(ptr.cast()));
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    if iid == &<StreamedFileDataRequestedHandler as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(
                this: ::winrt::NonNullRawComPtr<::winrt::IUnknown>,
            ) -> u32 {
                unsafe {
                    let this: *mut Self = this.as_raw() as _;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            unsafe extern "system" fn invoke(
                this: ::winrt::NonNullRawComPtr<StreamedFileDataRequestedHandler>,
                stream: <StreamedFileDataRequest as ::winrt::AbiTransferable>::Abi,
            ) -> ::winrt::ErrorCode {
                let this: *mut Self = this.as_raw() as _;
                ((*this).invoke)(::winrt::AbiTransferable::from_abi(&stream)).into()
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct StreamedFileFailureMode {
            value: i32,
        }
        impl StreamedFileFailureMode {
            #![allow(non_upper_case_globals)]
            pub const Failed: Self = Self { value: 0i32 };
            pub const CurrentlyUnavailable: Self = Self { value: 1i32 };
            pub const Incomplete: Self = Self { value: 2i32 };
        }
        unsafe impl ::winrt::RuntimeType for StreamedFileFailureMode {
            fn signature() -> String {
                "enum(Windows.Storage.StreamedFileFailureMode;i4)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for StreamedFileFailureMode {
            type Abi = i32;
            fn get_abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        pub mod file_properties {
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct BasicProperties {
                ptr: ::winrt::ComPtr<IBasicProperties>,
            }
            impl BasicProperties {
                pub fn size(&self) -> ::winrt::Result<u64> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u64 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn date_modified(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . date_modified)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn item_date(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . item_date)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for BasicProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.BasicProperties";
            }
            unsafe impl ::winrt::ComInterface for BasicProperties {
                type VTable = abi_IBasicProperties;
                fn iid() -> ::winrt::Guid {
                    <IBasicProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for BasicProperties {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.BasicProperties;{d05d55db-785e-4a66-be02-9beec58aea81})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for BasicProperties {
                type Abi = ::winrt::RawComPtr<IBasicProperties>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IBasicProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IBasicProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for BasicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "BasicProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<BasicProperties> for IBasicProperties {
                fn from(value: BasicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&BasicProperties> for IBasicProperties {
                fn from(value: &BasicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IBasicProperties>> for BasicProperties {
                fn into(self) -> ::winrt::Param<'a, IBasicProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IBasicProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IBasicProperties>> for &'a BasicProperties {
                fn into(self) -> ::winrt::Param<'a, IBasicProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IBasicProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<BasicProperties> for IStorageItemExtraProperties {
                fn from(value: BasicProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&BasicProperties> for IStorageItemExtraProperties {
                fn from(value: &BasicProperties) -> Self {
                    <BasicProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>> for BasicProperties {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a BasicProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<BasicProperties> for ::winrt::Object {
                fn from(value: BasicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&BasicProperties> for ::winrt::Object {
                fn from(value: &BasicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct DocumentProperties {
                ptr: ::winrt::ComPtr<IDocumentProperties>,
            }
            impl DocumentProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
                pub fn author(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . author)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn keywords(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . keywords)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn comment(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().comment)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_comment<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_comment)(this, value.into().get_abi()).ok() }
                }
            }
            impl ::winrt::RuntimeName for DocumentProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.DocumentProperties";
            }
            unsafe impl ::winrt::ComInterface for DocumentProperties {
                type VTable = abi_IDocumentProperties;
                fn iid() -> ::winrt::Guid {
                    <IDocumentProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for DocumentProperties {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.DocumentProperties;{7eab19bc-1821-4923-b4a9-0aea404d0070})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DocumentProperties {
                type Abi = ::winrt::RawComPtr<IDocumentProperties>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDocumentProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDocumentProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for DocumentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "DocumentProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<DocumentProperties> for IStorageItemExtraProperties {
                fn from(value: DocumentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DocumentProperties> for IStorageItemExtraProperties {
                fn from(value: &DocumentProperties) -> Self {
                    <DocumentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for DocumentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a DocumentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DocumentProperties> for IDocumentProperties {
                fn from(value: DocumentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DocumentProperties> for IDocumentProperties {
                fn from(value: &DocumentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDocumentProperties>> for DocumentProperties {
                fn into(self) -> ::winrt::Param<'a, IDocumentProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDocumentProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IDocumentProperties>> for &'a DocumentProperties {
                fn into(self) -> ::winrt::Param<'a, IDocumentProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IDocumentProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DocumentProperties> for ::winrt::Object {
                fn from(value: DocumentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DocumentProperties> for ::winrt::Object {
                fn from(value: &DocumentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IBasicProperties {
                ptr: ::winrt::ComPtr<IBasicProperties>,
            }
            impl IBasicProperties {
                pub fn size(&self) -> ::winrt::Result<u64> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u64 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn date_modified(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . date_modified)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn item_date(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . item_date)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IBasicProperties {
                type VTable = abi_IBasicProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3495777755,
                        30814,
                        19046,
                        [190, 2, 155, 238, 197, 138, 234, 129],
                    )
                }
            }
            impl ::std::clone::Clone for IBasicProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IBasicProperties where
            {
                base__ : [usize ; 6], pub size : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IBasicProperties >, result__
                   : * mut u64,) -> :: winrt :: ErrorCode, pub date_modified :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IBasicProperties >, result__
                   : * mut < super :: super :: foundation :: DateTime as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub item_date : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IBasicProperties >, result__
                   : * mut < super :: super :: foundation :: DateTime as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IBasicProperties {
                fn signature() -> String {
                    "{d05d55db-785e-4a66-be02-9beec58aea81}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IBasicProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IBasicProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IBasicProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IBasicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IBasicProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IBasicProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IBasicProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IBasicProperties> for ::winrt::Object {
                fn from(value: IBasicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IBasicProperties> for ::winrt::Object {
                fn from(value: &IBasicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IDocumentProperties {
                ptr: ::winrt::ComPtr<IDocumentProperties>,
            }
            impl IDocumentProperties {
                pub fn author(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . author)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn keywords(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . keywords)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn comment(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().comment)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_comment<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_comment)(this, value.into().get_abi()).ok() }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for IDocumentProperties {
                type VTable = abi_IDocumentProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2125142460,
                        6177,
                        18723,
                        [180, 169, 10, 234, 64, 77, 0, 112],
                    )
                }
            }
            impl ::std::clone::Clone for IDocumentProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDocumentProperties {
                base__: [usize; 6],
                pub author:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IDocumentProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub title: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDocumentProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_title: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDocumentProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub keywords:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IDocumentProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub comment: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDocumentProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_comment: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IDocumentProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IDocumentProperties {
                fn signature() -> String {
                    "{7eab19bc-1821-4923-b4a9-0aea404d0070}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IDocumentProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IDocumentProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IDocumentProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IDocumentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IDocumentProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IDocumentProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IDocumentProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IDocumentProperties> for IStorageItemExtraProperties {
                fn from(value: IDocumentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDocumentProperties> for IStorageItemExtraProperties {
                fn from(value: &IDocumentProperties) -> Self {
                    <IDocumentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for IDocumentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a IDocumentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IDocumentProperties> for ::winrt::Object {
                fn from(value: IDocumentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IDocumentProperties> for ::winrt::Object {
                fn from(value: &IDocumentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IImageProperties {
                ptr: ::winrt::ComPtr<IImageProperties>,
            }
            impl IImageProperties {
                pub fn rating(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().rating)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rating)(this, value).ok() }
                }
                pub fn keywords(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . keywords)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn date_taken(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . date_taken)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn set_date_taken<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::DateTime>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_date_taken)(this, value.into().get_abi()).ok() }
                }
                pub fn width(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().width)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn height(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().height)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn latitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . latitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . longitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn camera_manufacturer(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().camera_manufacturer)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_camera_manufacturer<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_camera_manufacturer)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn camera_model(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().camera_model)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_camera_model<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_camera_model)(this, value.into().get_abi()).ok() }
                }
                pub fn orientation(&self) -> ::winrt::Result<PhotoOrientation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: PhotoOrientation = ::std::mem::zeroed();
                        (this.vtable().orientation)(
                            this,
                            <PhotoOrientation as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn people_names(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IVectorView<::winrt::HString>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . people_names)
                        (this, < super :: super :: foundation :: collections
                         :: IVectorView :: < :: winrt :: HString > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for IImageProperties {
                type VTable = abi_IImageProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1379701796,
                        64767,
                        17013,
                        [175, 238, 236, 219, 154, 180, 121, 115],
                    )
                }
            }
            impl ::std::clone::Clone for IImageProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IImageProperties where
            {
                base__ : [usize ; 6], pub rating : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub set_rating :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, value :
                   u32,) -> :: winrt :: ErrorCode, pub keywords : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVector :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                date_taken : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < super :: super :: foundation :: DateTime as ::
                   winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub set_date_taken : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, value :
                   < super :: super :: foundation :: DateTime as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                width : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub height : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub title : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, value :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub latitude : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < super :: super :: foundation :: IReference :: <
                   f64 > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt
                :: ErrorCode, pub longitude : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < super :: super :: foundation :: IReference :: <
                   f64 > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt
                :: ErrorCode, pub camera_manufacturer : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_camera_manufacturer : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, value :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub camera_model : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_camera_model : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, value :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub orientation : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < PhotoOrientation as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub people_names :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IImageProperties >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVectorView :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IImageProperties {
                fn signature() -> String {
                    "{523c9424-fcff-4275-afee-ecdb9ab47973}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IImageProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IImageProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IImageProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IImageProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IImageProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IImageProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IImageProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IImageProperties> for IStorageItemExtraProperties {
                fn from(value: IImageProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IImageProperties> for IStorageItemExtraProperties {
                fn from(value: &IImageProperties) -> Self {
                    <IImageProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for IImageProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a IImageProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IImageProperties> for ::winrt::Object {
                fn from(value: IImageProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IImageProperties> for ::winrt::Object {
                fn from(value: &IImageProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IMusicProperties {
                ptr: ::winrt::ComPtr<IMusicProperties>,
            }
            impl IMusicProperties {
                pub fn album(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().album)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_album<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_album)(this, value.into().get_abi()).ok() }
                }
                pub fn artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().artist)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_artist<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_artist)(this, value.into().get_abi()).ok() }
                }
                pub fn genre(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . genre)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn track_number(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().track_number)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_track_number(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_track_number)(this, value).ok() }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn rating(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().rating)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rating)(this, value).ok() }
                }
                pub fn duration(&self) -> ::winrt::Result<::winrt::TimeSpan> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::TimeSpan = ::std::mem::zeroed();
                        (this.vtable().duration)(
                            this,
                            <::winrt::TimeSpan as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().bitrate)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn album_artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().album_artist)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_album_artist<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_album_artist)(this, value.into().get_abi()).ok() }
                }
                pub fn composers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . composers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn conductors(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . conductors)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().subtitle)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_subtitle)(this, value.into().get_abi()).ok() }
                }
                pub fn producers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . producers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().publisher)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_publisher)(this, value.into().get_abi()).ok() }
                }
                pub fn writers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . writers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn year(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().year)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_year)(this, value).ok() }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for IMusicProperties {
                type VTable = abi_IMusicProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3163204450,
                        26348,
                        16794,
                        [188, 93, 202, 101, 164, 203, 70, 218],
                    )
                }
            }
            impl ::std::clone::Clone for IMusicProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMusicProperties {
                base__: [usize; 6],
                pub album: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_album: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub artist: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_artist: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub genre:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IMusicProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub track_number: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub set_track_number: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: u32,
                )
                    -> ::winrt::ErrorCode,
                pub title: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_title: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub rating: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub set_rating: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: u32,
                ) -> ::winrt::ErrorCode,
                pub duration: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut ::winrt::TimeSpan,
                ) -> ::winrt::ErrorCode,
                pub bitrate: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub album_artist: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_album_artist: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub composers:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IMusicProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub conductors:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IMusicProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub subtitle: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_subtitle: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub producers:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IMusicProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub publisher: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub set_publisher: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub writers:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IMusicProperties>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
                pub year: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub set_year: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IMusicProperties>,
                    value: u32,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IMusicProperties {
                fn signature() -> String {
                    "{bc8aab62-66ec-419a-bc5d-ca65a4cb46da}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IMusicProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IMusicProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IMusicProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IMusicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IMusicProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IMusicProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IMusicProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IMusicProperties> for IStorageItemExtraProperties {
                fn from(value: IMusicProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IMusicProperties> for IStorageItemExtraProperties {
                fn from(value: &IMusicProperties) -> Self {
                    <IMusicProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for IMusicProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a IMusicProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IMusicProperties> for ::winrt::Object {
                fn from(value: IMusicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IMusicProperties> for ::winrt::Object {
                fn from(value: &IMusicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageItemContentProperties {
                ptr: ::winrt::ComPtr<IStorageItemContentProperties>,
            }
            impl IStorageItemContentProperties {
                pub fn get_music_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<MusicProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            MusicProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_music_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < MusicProperties > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_video_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<VideoProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            VideoProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_video_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < VideoProperties > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_image_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<ImageProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ImageProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_image_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < ImageProperties > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_document_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<DocumentProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            DocumentProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_document_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < DocumentProperties > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageItemContentProperties {
                type VTable = abi_IStorageItemContentProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        86592429,
                        48184,
                        18623,
                        [133, 215, 119, 14, 14, 42, 224, 186],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageItemContentProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageItemContentProperties where
            {
                base__ : [usize ; 6], pub get_music_properties_async : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageItemContentProperties >, result__ : * mut < super
                   :: super :: foundation :: IAsyncOperation :: <
                   MusicProperties > as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub get_video_properties_async :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageItemContentProperties >, result__ : * mut < super
                   :: super :: foundation :: IAsyncOperation :: <
                   VideoProperties > as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub get_image_properties_async :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageItemContentProperties >, result__ : * mut < super
                   :: super :: foundation :: IAsyncOperation :: <
                   ImageProperties > as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub get_document_properties_async :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageItemContentProperties >, result__ : * mut < super
                   :: super :: foundation :: IAsyncOperation :: <
                   DocumentProperties > as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageItemContentProperties {
                fn signature() -> String {
                    "{05294bad-bc38-48bf-85d7-770e0e2ae0ba}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageItemContentProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IStorageItemContentProperties > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IStorageItemContentProperties > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IStorageItemContentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageItemContentProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageItemContentProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageItemContentProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: IStorageItemContentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: &IStorageItemContentProperties) -> Self {
                    <IStorageItemContentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for IStorageItemContentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a IStorageItemContentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IStorageItemContentProperties> for ::winrt::Object {
                fn from(value: IStorageItemContentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageItemContentProperties> for ::winrt::Object {
                fn from(value: &IStorageItemContentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageItemExtraProperties {
                ptr: ::winrt::ComPtr<IStorageItemExtraProperties>,
            }
            impl IStorageItemExtraProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().retrieve_properties_async)(
                            this,
                            properties_to_retrieve.into().get_abi(),
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IMap<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncAction =
                            ::std::mem::zeroed();
                        (this . vtable() . save_properties_async)
                        (this, properties_to_save . into() . get_abi(), <
                         super :: super :: foundation :: IAsyncAction as ::
                         winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncAction =
                            ::std::mem::zeroed();
                        (this . vtable() .
                         save_properties_async_overload_default)
                        (this, < super :: super :: foundation :: IAsyncAction
                         as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageItemExtraProperties {
                type VTable = abi_IStorageItemExtraProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3309527474,
                        21709,
                        17195,
                        [189, 188, 75, 25, 196, 180, 112, 215],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageItemExtraProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageItemExtraProperties where
            {
                base__ : [usize ; 6], pub retrieve_properties_async : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageItemExtraProperties
                   >, properties_to_retrieve : < super :: super :: foundation
                   :: collections :: IIterable :: < :: winrt :: HString > as
                   :: winrt :: AbiTransferable > :: Abi, result__ : * mut <
                   super :: super :: foundation :: IAsyncOperation :: < super
                   :: super :: foundation :: collections :: IMap :: < :: winrt
                   :: HString, :: winrt :: Object > > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                save_properties_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageItemExtraProperties
                   >, properties_to_save : < super :: super :: foundation ::
                   collections :: IIterable :: < super :: super :: foundation
                   :: collections :: IKeyValuePair :: < :: winrt :: HString,
                   :: winrt :: Object > > as :: winrt :: AbiTransferable > ::
                   Abi, result__ : * mut < super :: super :: foundation ::
                   IAsyncAction as :: winrt :: AbiTransferable > :: Abi,) ->
                :: winrt :: ErrorCode, pub
                save_properties_async_overload_default : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageItemExtraProperties
                   >, result__ : * mut < super :: super :: foundation ::
                   IAsyncAction as :: winrt :: AbiTransferable > :: Abi,) ->
                :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageItemExtraProperties {
                fn signature() -> String {
                    "{c54361b2-54cd-432b-bdbc-4b19c4b470d7}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageItemExtraProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IStorageItemExtraProperties > as ::
                    winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IStorageItemExtraProperties > as ::
                    winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IStorageItemExtraProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageItemExtraProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageItemExtraProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageItemExtraProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageItemExtraProperties> for ::winrt::Object {
                fn from(value: IStorageItemExtraProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageItemExtraProperties> for ::winrt::Object {
                fn from(value: &IStorageItemExtraProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IThumbnailProperties {
                ptr: ::winrt::ComPtr<IThumbnailProperties>,
            }
            impl IThumbnailProperties {
                pub fn original_width(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().original_width)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn original_height(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().original_height)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn returned_smaller_cached_size(&self) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().returned_smaller_cached_size)(
                            this,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn r#type(&self) -> ::winrt::Result<ThumbnailType> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ThumbnailType = ::std::mem::zeroed();
                        (this.vtable().r#type)(
                            this,
                            <ThumbnailType as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IThumbnailProperties {
                type VTable = abi_IThumbnailProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1765659695,
                        56295,
                        18869,
                        [179, 179, 40, 147, 172, 93, 52, 35],
                    )
                }
            }
            impl ::std::clone::Clone for IThumbnailProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IThumbnailProperties {
                base__: [usize; 6],
                pub original_width: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IThumbnailProperties>,
                    result__: *mut u32,
                )
                    -> ::winrt::ErrorCode,
                pub original_height: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IThumbnailProperties>,
                    result__: *mut u32,
                )
                    -> ::winrt::ErrorCode,
                pub returned_smaller_cached_size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IThumbnailProperties>,
                    result__: *mut bool,
                )
                    -> ::winrt::ErrorCode,
                pub r#type: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IThumbnailProperties>,
                    result__: *mut <ThumbnailType as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IThumbnailProperties {
                fn signature() -> String {
                    "{693dd42f-dbe7-49b5-b3b3-2893ac5d3423}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IThumbnailProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IThumbnailProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IThumbnailProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IThumbnailProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IThumbnailProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IThumbnailProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IThumbnailProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IThumbnailProperties> for ::winrt::Object {
                fn from(value: IThumbnailProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IThumbnailProperties> for ::winrt::Object {
                fn from(value: &IThumbnailProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IVideoProperties {
                ptr: ::winrt::ComPtr<IVideoProperties>,
            }
            impl IVideoProperties {
                pub fn rating(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().rating)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rating)(this, value).ok() }
                }
                pub fn keywords(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . keywords)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn width(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().width)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn height(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().height)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn duration(&self) -> ::winrt::Result<::winrt::TimeSpan> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::TimeSpan = ::std::mem::zeroed();
                        (this.vtable().duration)(
                            this,
                            <::winrt::TimeSpan as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn latitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . latitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . longitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().subtitle)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_subtitle)(this, value.into().get_abi()).ok() }
                }
                pub fn producers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . producers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().publisher)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_publisher)(this, value.into().get_abi()).ok() }
                }
                pub fn writers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . writers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn year(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().year)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_year)(this, value).ok() }
                }
                pub fn bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().bitrate)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn directors(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . directors)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn orientation(&self) -> ::winrt::Result<VideoOrientation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: VideoOrientation = ::std::mem::zeroed();
                        (this.vtable().orientation)(
                            this,
                            <VideoOrientation as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for IVideoProperties {
                type VTable = abi_IVideoProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1905976583,
                        26846,
                        19896,
                        [151, 222, 73, 153, 140, 5, 159, 47],
                    )
                }
            }
            impl ::std::clone::Clone for IVideoProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IVideoProperties where
            {
                base__ : [usize ; 6], pub rating : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub set_rating :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, value :
                   u32,) -> :: winrt :: ErrorCode, pub keywords : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVector :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                width : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub height : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub duration :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut :: winrt :: TimeSpan,) -> :: winrt :: ErrorCode,
                pub latitude : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < super :: super :: foundation :: IReference :: <
                   f64 > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt
                :: ErrorCode, pub longitude : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < super :: super :: foundation :: IReference :: <
                   f64 > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt
                :: ErrorCode, pub title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_title : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, value :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub subtitle : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_subtitle : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, value :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub producers : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVector :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                publisher : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < :: winrt :: HString as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_publisher : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, value :
                   < :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub writers : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVector :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                year : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub set_year :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, value :
                   u32,) -> :: winrt :: ErrorCode, pub bitrate : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut u32,) -> :: winrt :: ErrorCode, pub directors :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < super :: super :: foundation :: collections ::
                   IVector :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                orientation : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IVideoProperties >, result__
                   : * mut < VideoOrientation as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IVideoProperties {
                fn signature() -> String {
                    "{719ae507-68de-4db8-97de-49998c059f2f}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IVideoProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IVideoProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IVideoProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IVideoProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IVideoProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IVideoProperties {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IVideoProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IVideoProperties> for IStorageItemExtraProperties {
                fn from(value: IVideoProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IVideoProperties> for IStorageItemExtraProperties {
                fn from(value: &IVideoProperties) -> Self {
                    <IVideoProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for IVideoProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a IVideoProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IVideoProperties> for ::winrt::Object {
                fn from(value: IVideoProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IVideoProperties> for ::winrt::Object {
                fn from(value: &IVideoProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct ImageProperties {
                ptr: ::winrt::ComPtr<IImageProperties>,
            }
            impl ImageProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
                pub fn rating(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().rating)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rating)(this, value).ok() }
                }
                pub fn keywords(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . keywords)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn date_taken(&self) -> ::winrt::Result<super::super::foundation::DateTime> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::DateTime = ::std::mem::zeroed();
                        (this . vtable() . date_taken)
                        (this, < super :: super :: foundation :: DateTime as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn set_date_taken<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::DateTime>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_date_taken)(this, value.into().get_abi()).ok() }
                }
                pub fn width(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().width)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn height(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().height)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn latitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . latitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . longitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn camera_manufacturer(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().camera_manufacturer)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_camera_manufacturer<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_camera_manufacturer)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn camera_model(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().camera_model)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_camera_model<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_camera_model)(this, value.into().get_abi()).ok() }
                }
                pub fn orientation(&self) -> ::winrt::Result<PhotoOrientation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: PhotoOrientation = ::std::mem::zeroed();
                        (this.vtable().orientation)(
                            this,
                            <PhotoOrientation as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn people_names(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IVectorView<::winrt::HString>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . people_names)
                        (this, < super :: super :: foundation :: collections
                         :: IVectorView :: < :: winrt :: HString > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for ImageProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.ImageProperties";
            }
            unsafe impl ::winrt::ComInterface for ImageProperties {
                type VTable = abi_IImageProperties;
                fn iid() -> ::winrt::Guid {
                    <IImageProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for ImageProperties {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.ImageProperties;{523c9424-fcff-4275-afee-ecdb9ab47973})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ImageProperties {
                type Abi = ::winrt::RawComPtr<IImageProperties>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IImageProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IImageProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for ImageProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "ImageProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<ImageProperties> for IStorageItemExtraProperties {
                fn from(value: ImageProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ImageProperties> for IStorageItemExtraProperties {
                fn from(value: &ImageProperties) -> Self {
                    <ImageProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>> for ImageProperties {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a ImageProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ImageProperties> for IImageProperties {
                fn from(value: ImageProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ImageProperties> for IImageProperties {
                fn from(value: &ImageProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IImageProperties>> for ImageProperties {
                fn into(self) -> ::winrt::Param<'a, IImageProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IImageProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IImageProperties>> for &'a ImageProperties {
                fn into(self) -> ::winrt::Param<'a, IImageProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IImageProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ImageProperties> for ::winrt::Object {
                fn from(value: ImageProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ImageProperties> for ::winrt::Object {
                fn from(value: &ImageProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct MusicProperties {
                ptr: ::winrt::ComPtr<IMusicProperties>,
            }
            impl MusicProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
                pub fn album(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().album)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_album<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_album)(this, value.into().get_abi()).ok() }
                }
                pub fn artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().artist)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_artist<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_artist)(this, value.into().get_abi()).ok() }
                }
                pub fn genre(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . genre)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn track_number(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().track_number)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_track_number(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_track_number)(this, value).ok() }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn rating(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().rating)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rating)(this, value).ok() }
                }
                pub fn duration(&self) -> ::winrt::Result<::winrt::TimeSpan> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::TimeSpan = ::std::mem::zeroed();
                        (this.vtable().duration)(
                            this,
                            <::winrt::TimeSpan as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().bitrate)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn album_artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().album_artist)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_album_artist<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_album_artist)(this, value.into().get_abi()).ok() }
                }
                pub fn composers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . composers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn conductors(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . conductors)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().subtitle)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_subtitle)(this, value.into().get_abi()).ok() }
                }
                pub fn producers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . producers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().publisher)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_publisher)(this, value.into().get_abi()).ok() }
                }
                pub fn writers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . writers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn year(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().year)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_year)(this, value).ok() }
                }
            }
            impl ::winrt::RuntimeName for MusicProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.MusicProperties";
            }
            unsafe impl ::winrt::ComInterface for MusicProperties {
                type VTable = abi_IMusicProperties;
                fn iid() -> ::winrt::Guid {
                    <IMusicProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for MusicProperties {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.MusicProperties;{bc8aab62-66ec-419a-bc5d-ca65a4cb46da})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for MusicProperties {
                type Abi = ::winrt::RawComPtr<IMusicProperties>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IMusicProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IMusicProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for MusicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "MusicProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<MusicProperties> for IStorageItemExtraProperties {
                fn from(value: MusicProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&MusicProperties> for IStorageItemExtraProperties {
                fn from(value: &MusicProperties) -> Self {
                    <MusicProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>> for MusicProperties {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a MusicProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<MusicProperties> for IMusicProperties {
                fn from(value: MusicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&MusicProperties> for IMusicProperties {
                fn from(value: &MusicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IMusicProperties>> for MusicProperties {
                fn into(self) -> ::winrt::Param<'a, IMusicProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IMusicProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IMusicProperties>> for &'a MusicProperties {
                fn into(self) -> ::winrt::Param<'a, IMusicProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IMusicProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<MusicProperties> for ::winrt::Object {
                fn from(value: MusicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&MusicProperties> for ::winrt::Object {
                fn from(value: &MusicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct PhotoOrientation {
                value: i32,
            }
            impl PhotoOrientation {
                #![allow(non_upper_case_globals)]
                pub const Unspecified: Self = Self { value: 0i32 };
                pub const Normal: Self = Self { value: 1i32 };
                pub const FlipHorizontal: Self = Self { value: 2i32 };
                pub const Rotate180: Self = Self { value: 3i32 };
                pub const FlipVertical: Self = Self { value: 4i32 };
                pub const Transpose: Self = Self { value: 5i32 };
                pub const Rotate270: Self = Self { value: 6i32 };
                pub const Transverse: Self = Self { value: 7i32 };
                pub const Rotate90: Self = Self { value: 8i32 };
            }
            unsafe impl ::winrt::RuntimeType for PhotoOrientation {
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.PhotoOrientation;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for PhotoOrientation {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct PropertyPrefetchOptions {
                value: u32,
            }
            impl PropertyPrefetchOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self { value: 0u32 };
                pub const MusicProperties: Self = Self { value: 1u32 };
                pub const VideoProperties: Self = Self { value: 2u32 };
                pub const ImageProperties: Self = Self { value: 4u32 };
                pub const DocumentProperties: Self = Self { value: 8u32 };
                pub const BasicProperties: Self = Self { value: 16u32 };
            }
            unsafe impl ::winrt::RuntimeType for PropertyPrefetchOptions {
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.PropertyPrefetchOptions;u4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for PropertyPrefetchOptions {
                type Abi = u32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for PropertyPrefetchOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for PropertyPrefetchOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct StorageItemContentProperties {
                ptr: ::winrt::ComPtr<IStorageItemContentProperties>,
            }
            impl StorageItemContentProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
                pub fn get_music_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<MusicProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            MusicProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_music_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < MusicProperties > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_video_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<VideoProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            VideoProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_video_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < VideoProperties > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_image_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<ImageProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            ImageProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_image_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < ImageProperties > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_document_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<DocumentProperties>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            DocumentProperties,
                        > = ::std::mem::zeroed();
                        (this . vtable() . get_document_properties_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < DocumentProperties > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for StorageItemContentProperties {
                const NAME: &'static str =
                    "Windows.Storage.FileProperties.StorageItemContentProperties";
            }
            unsafe impl ::winrt::ComInterface for StorageItemContentProperties {
                type VTable = abi_IStorageItemContentProperties;
                fn iid() -> ::winrt::Guid {
                    <IStorageItemContentProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for StorageItemContentProperties {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.StorageItemContentProperties;{05294bad-bc38-48bf-85d7-770e0e2ae0ba})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for StorageItemContentProperties {
                type Abi = ::winrt::RawComPtr<IStorageItemContentProperties>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IStorageItemContentProperties > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IStorageItemContentProperties > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for StorageItemContentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "StorageItemContentProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<StorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: StorageItemContentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: &StorageItemContentProperties) -> Self {
                    <StorageItemContentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for StorageItemContentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a StorageItemContentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemContentProperties> for IStorageItemContentProperties {
                fn from(value: StorageItemContentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemContentProperties> for IStorageItemContentProperties {
                fn from(value: &StorageItemContentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemContentProperties>>
                for StorageItemContentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemContentProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemContentProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemContentProperties>>
                for &'a StorageItemContentProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemContentProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemContentProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemContentProperties> for ::winrt::Object {
                fn from(value: StorageItemContentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemContentProperties> for ::winrt::Object {
                fn from(value: &StorageItemContentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct StorageItemThumbnail {
                ptr: ::winrt::ComPtr<super::streams::IRandomAccessStreamWithContentType>,
            }
            impl StorageItemThumbnail {
                pub fn close(&self) -> ::winrt::Result<()> {
                    <super::super::foundation::IClosable as ::std::convert::From<&Self>>::from(self)
                        .close()
                }
                pub fn read_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::streams::IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: super::streams::InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperationWithProgress<
                        super::streams::IBuffer,
                        u32,
                    >,
                > {
                    <super::streams::IInputStream as ::std::convert::From<&Self>>::from(self)
                        .read_async(buffer, count, options)
                }
                pub fn write_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::streams::IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32, u32>>
                {
                    <super::streams::IOutputStream as ::std::convert::From<&Self>>::from(self)
                        .write_async(buffer)
                }
                pub fn flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    <super::streams::IOutputStream as ::std::convert::From<&Self>>::from(self)
                        .flush_async()
                }
                pub fn size(&self) -> ::winrt::Result<u64> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .size()
                }
                pub fn set_size(&self, value: u64) -> ::winrt::Result<()> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .set_size(value)
                }
                pub fn get_input_stream_at(
                    &self,
                    position: u64,
                ) -> ::winrt::Result<super::streams::IInputStream> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .get_input_stream_at(position)
                }
                pub fn get_output_stream_at(
                    &self,
                    position: u64,
                ) -> ::winrt::Result<super::streams::IOutputStream> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .get_output_stream_at(position)
                }
                pub fn position(&self) -> ::winrt::Result<u64> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .position()
                }
                pub fn seek(&self, position: u64) -> ::winrt::Result<()> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .seek(position)
                }
                pub fn clone_stream(&self) -> ::winrt::Result<super::streams::IRandomAccessStream> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .clone_stream()
                }
                pub fn can_read(&self) -> ::winrt::Result<bool> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .can_read()
                }
                pub fn can_write(&self) -> ::winrt::Result<bool> {
                    <super::streams::IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .can_write()
                }
                pub fn content_type(&self) -> ::winrt::Result<::winrt::HString> {
                    <super::streams::IContentTypeProvider as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .content_type()
                }
                pub fn original_width(&self) -> ::winrt::Result<u32> {
                    <IThumbnailProperties as ::std::convert::From<&Self>>::from(self)
                        .original_width()
                }
                pub fn original_height(&self) -> ::winrt::Result<u32> {
                    <IThumbnailProperties as ::std::convert::From<&Self>>::from(self)
                        .original_height()
                }
                pub fn returned_smaller_cached_size(&self) -> ::winrt::Result<bool> {
                    <IThumbnailProperties as ::std::convert::From<&Self>>::from(self)
                        .returned_smaller_cached_size()
                }
                pub fn r#type(&self) -> ::winrt::Result<ThumbnailType> {
                    <IThumbnailProperties as ::std::convert::From<&Self>>::from(self).r#type()
                }
            }
            impl ::winrt::RuntimeName for StorageItemThumbnail {
                const NAME: &'static str = "Windows.Storage.FileProperties.StorageItemThumbnail";
            }
            unsafe impl ::winrt::ComInterface for StorageItemThumbnail {
                type VTable = super::streams::abi_IRandomAccessStreamWithContentType;
                fn iid() -> ::winrt::Guid {
                    < super :: streams :: IRandomAccessStreamWithContentType
                    as :: winrt :: ComInterface > :: iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for StorageItemThumbnail {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.StorageItemThumbnail;{cc254827-4b3d-438f-9232-10c76bc7e038})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for StorageItemThumbnail {
                type Abi = ::winrt::RawComPtr<super::streams::IRandomAccessStreamWithContentType>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < super :: streams ::
                    IRandomAccessStreamWithContentType > as :: winrt ::
                    AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < super :: streams ::
                    IRandomAccessStreamWithContentType > as :: winrt ::
                    AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for StorageItemThumbnail {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "StorageItemThumbnail",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::super::foundation::IClosable {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::super::foundation::IClosable {
                fn from(value: &StorageItemThumbnail) -> Self {
                    <StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IInputStream {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IInputStream {
                fn from(value: &StorageItemThumbnail) -> Self {
                    <StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IInputStream>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IInputStream> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::streams::IInputStream>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IInputStream>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IInputStream> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::streams::IInputStream>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IOutputStream {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IOutputStream {
                fn from(value: &StorageItemThumbnail) -> Self {
                    <StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IOutputStream>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IOutputStream> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::streams::IOutputStream>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IOutputStream>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IOutputStream> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::streams::IOutputStream>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IRandomAccessStream {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IRandomAccessStream {
                fn from(value: &StorageItemThumbnail) -> Self {
                    <StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IRandomAccessStream>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IRandomAccessStream> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::streams::IRandomAccessStream>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IRandomAccessStream>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IRandomAccessStream> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::streams::IRandomAccessStream>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IContentTypeProvider {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IContentTypeProvider {
                fn from(value: &StorageItemThumbnail) -> Self {
                    <StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IContentTypeProvider>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IContentTypeProvider> {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::streams::IContentTypeProvider,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::streams::IContentTypeProvider>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, super::streams::IContentTypeProvider> {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::streams::IContentTypeProvider,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail>
                for super::streams::IRandomAccessStreamWithContentType
            {
                fn from(value: StorageItemThumbnail) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail>
                for super::streams::IRandomAccessStreamWithContentType
            {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<'a, super::streams::IRandomAccessStreamWithContentType>,
                > for StorageItemThumbnail
            {
                fn into(
                    self,
                ) -> ::winrt::Param<'a, super::streams::IRandomAccessStreamWithContentType>
                {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::streams::IRandomAccessStreamWithContentType,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::winrt::Param<'a, super::streams::IRandomAccessStreamWithContentType>,
                > for &'a StorageItemThumbnail
            {
                fn into(
                    self,
                ) -> ::winrt::Param<'a, super::streams::IRandomAccessStreamWithContentType>
                {
                    ::winrt::Param::Owned(::std::convert::Into::<
                        super::streams::IRandomAccessStreamWithContentType,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for IThumbnailProperties {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for IThumbnailProperties {
                fn from(value: &StorageItemThumbnail) -> Self {
                    <StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IThumbnailProperties>> for StorageItemThumbnail {
                fn into(self) -> ::winrt::Param<'a, IThumbnailProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IThumbnailProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IThumbnailProperties>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::winrt::Param<'a, IThumbnailProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IThumbnailProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for ::winrt::Object {
                fn from(value: StorageItemThumbnail) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for ::winrt::Object {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct ThumbnailMode {
                value: i32,
            }
            impl ThumbnailMode {
                #![allow(non_upper_case_globals)]
                pub const PicturesView: Self = Self { value: 0i32 };
                pub const VideosView: Self = Self { value: 1i32 };
                pub const MusicView: Self = Self { value: 2i32 };
                pub const DocumentsView: Self = Self { value: 3i32 };
                pub const ListView: Self = Self { value: 4i32 };
                pub const SingleItem: Self = Self { value: 5i32 };
            }
            unsafe impl ::winrt::RuntimeType for ThumbnailMode {
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.ThumbnailMode;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ThumbnailMode {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct ThumbnailOptions {
                value: u32,
            }
            impl ThumbnailOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self { value: 0u32 };
                pub const ReturnOnlyIfCached: Self = Self { value: 1u32 };
                pub const ResizeThumbnail: Self = Self { value: 2u32 };
                pub const UseCurrentScale: Self = Self { value: 4u32 };
            }
            unsafe impl ::winrt::RuntimeType for ThumbnailOptions {
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.ThumbnailOptions;u4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ThumbnailOptions {
                type Abi = u32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for ThumbnailOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for ThumbnailOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct ThumbnailType {
                value: i32,
            }
            impl ThumbnailType {
                #![allow(non_upper_case_globals)]
                pub const Image: Self = Self { value: 0i32 };
                pub const Icon: Self = Self { value: 1i32 };
            }
            unsafe impl ::winrt::RuntimeType for ThumbnailType {
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.ThumbnailType;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for ThumbnailType {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct VideoOrientation {
                value: i32,
            }
            impl VideoOrientation {
                #![allow(non_upper_case_globals)]
                pub const Normal: Self = Self { value: 0i32 };
                pub const Rotate90: Self = Self { value: 90i32 };
                pub const Rotate180: Self = Self { value: 180i32 };
                pub const Rotate270: Self = Self { value: 270i32 };
            }
            unsafe impl ::winrt::RuntimeType for VideoOrientation {
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.VideoOrientation;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for VideoOrientation {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct VideoProperties {
                ptr: ::winrt::ComPtr<IVideoProperties>,
            }
            impl VideoProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .retrieve_properties_async(properties_to_retrieve)
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async(properties_to_save)
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncAction> {
                    <IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .save_properties_async_overload_default()
                }
                pub fn rating(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().rating)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_rating)(this, value).ok() }
                }
                pub fn keywords(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . keywords)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn width(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().width)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn height(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().height)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn duration(&self) -> ::winrt::Result<::winrt::TimeSpan> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::TimeSpan = ::std::mem::zeroed();
                        (this.vtable().duration)(
                            this,
                            <::winrt::TimeSpan as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn latitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . latitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IReference<f64>> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IReference<f64> =
                            ::std::mem::zeroed();
                        (this . vtable() . longitude)
                        (this, < super :: super :: foundation :: IReference ::
                         < f64 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().title)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_title)(this, value.into().get_abi()).ok() }
                }
                pub fn subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().subtitle)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_subtitle)(this, value.into().get_abi()).ok() }
                }
                pub fn producers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . producers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().publisher)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_publisher)(this, value.into().get_abi()).ok() }
                }
                pub fn writers(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . writers)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn year(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().year)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_year)(this, value).ok() }
                }
                pub fn bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().bitrate)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn directors(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . directors)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn orientation(&self) -> ::winrt::Result<VideoOrientation> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: VideoOrientation = ::std::mem::zeroed();
                        (this.vtable().orientation)(
                            this,
                            <VideoOrientation as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for VideoProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.VideoProperties";
            }
            unsafe impl ::winrt::ComInterface for VideoProperties {
                type VTable = abi_IVideoProperties;
                fn iid() -> ::winrt::Guid {
                    <IVideoProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for VideoProperties {
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.VideoProperties;{719ae507-68de-4db8-97de-49998c059f2f})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for VideoProperties {
                type Abi = ::winrt::RawComPtr<IVideoProperties>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IVideoProperties> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IVideoProperties> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for VideoProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "VideoProperties",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<VideoProperties> for IStorageItemExtraProperties {
                fn from(value: VideoProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&VideoProperties> for IStorageItemExtraProperties {
                fn from(value: &VideoProperties) -> Self {
                    <VideoProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>> for VideoProperties {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemExtraProperties>>
                for &'a VideoProperties
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemExtraProperties> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<VideoProperties> for IVideoProperties {
                fn from(value: VideoProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&VideoProperties> for IVideoProperties {
                fn from(value: &VideoProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IVideoProperties>> for VideoProperties {
                fn into(self) -> ::winrt::Param<'a, IVideoProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IVideoProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IVideoProperties>> for &'a VideoProperties {
                fn into(self) -> ::winrt::Param<'a, IVideoProperties> {
                    ::winrt::Param::Owned(::std::convert::Into::<IVideoProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<VideoProperties> for ::winrt::Object {
                fn from(value: VideoProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&VideoProperties> for ::winrt::Object {
                fn from(value: &VideoProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
        }
        pub mod search {
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct CommonFileQuery {
                value: i32,
            }
            impl CommonFileQuery {
                #![allow(non_upper_case_globals)]
                pub const DefaultQuery: Self = Self { value: 0i32 };
                pub const OrderByName: Self = Self { value: 1i32 };
                pub const OrderByTitle: Self = Self { value: 2i32 };
                pub const OrderByMusicProperties: Self = Self { value: 3i32 };
                pub const OrderBySearchRank: Self = Self { value: 4i32 };
                pub const OrderByDate: Self = Self { value: 5i32 };
            }
            unsafe impl ::winrt::RuntimeType for CommonFileQuery {
                fn signature() -> String {
                    "enum(Windows.Storage.Search.CommonFileQuery;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for CommonFileQuery {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct CommonFolderQuery {
                value: i32,
            }
            impl CommonFolderQuery {
                #![allow(non_upper_case_globals)]
                pub const DefaultQuery: Self = Self { value: 0i32 };
                pub const GroupByYear: Self = Self { value: 100i32 };
                pub const GroupByMonth: Self = Self { value: 101i32 };
                pub const GroupByArtist: Self = Self { value: 102i32 };
                pub const GroupByAlbum: Self = Self { value: 103i32 };
                pub const GroupByAlbumArtist: Self = Self { value: 104i32 };
                pub const GroupByComposer: Self = Self { value: 105i32 };
                pub const GroupByGenre: Self = Self { value: 106i32 };
                pub const GroupByPublishedYear: Self = Self { value: 107i32 };
                pub const GroupByRating: Self = Self { value: 108i32 };
                pub const GroupByTag: Self = Self { value: 109i32 };
                pub const GroupByAuthor: Self = Self { value: 110i32 };
                pub const GroupByType: Self = Self { value: 111i32 };
            }
            unsafe impl ::winrt::RuntimeType for CommonFolderQuery {
                fn signature() -> String {
                    "enum(Windows.Storage.Search.CommonFolderQuery;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for CommonFolderQuery {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct DateStackOption {
                value: i32,
            }
            impl DateStackOption {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self { value: 0i32 };
                pub const Year: Self = Self { value: 1i32 };
                pub const Month: Self = Self { value: 2i32 };
            }
            unsafe impl ::winrt::RuntimeType for DateStackOption {
                fn signature() -> String {
                    "enum(Windows.Storage.Search.DateStackOption;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for DateStackOption {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct FolderDepth {
                value: i32,
            }
            impl FolderDepth {
                #![allow(non_upper_case_globals)]
                pub const Shallow: Self = Self { value: 0i32 };
                pub const Deep: Self = Self { value: 1i32 };
            }
            unsafe impl ::winrt::RuntimeType for FolderDepth {
                fn signature() -> String {
                    "enum(Windows.Storage.Search.FolderDepth;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for FolderDepth {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            pub struct IQueryOptions {
                ptr: ::winrt::ComPtr<IQueryOptions>,
            }
            impl IQueryOptions {
                pub fn file_type_filter(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . file_type_filter)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn folder_depth(&self) -> ::winrt::Result<FolderDepth> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: FolderDepth = ::std::mem::zeroed();
                        (this.vtable().folder_depth)(
                            this,
                            <FolderDepth as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_folder_depth(&self, value: FolderDepth) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_folder_depth)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn application_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().application_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_application_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_search_filter)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn user_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().user_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_user_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_user_search_filter)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().language)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_language<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_language)(this, value.into().get_abi()).ok() }
                }
                pub fn indexer_option(&self) -> ::winrt::Result<IndexerOption> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IndexerOption = ::std::mem::zeroed();
                        (this.vtable().indexer_option)(
                            this,
                            <IndexerOption as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_indexer_option(&self, value: IndexerOption) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_indexer_option)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn sort_order(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<SortEntry>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            SortEntry,
                        > = ::std::mem::zeroed();
                        (this . vtable() . sort_order)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < SortEntry > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn group_property_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().group_property_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn date_stack_option(&self) -> ::winrt::Result<DateStackOption> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DateStackOption = ::std::mem::zeroed();
                        (this.vtable().date_stack_option)(
                            this,
                            <DateStackOption as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn save_to_string(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().save_to_string)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn load_from_string<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().load_from_string)(this, value.into().get_abi()).ok() }
                }
                pub fn set_thumbnail_prefetch(
                    &self,
                    mode: super::file_properties::ThumbnailMode,
                    requested_size: u32,
                    options: super::file_properties::ThumbnailOptions,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_thumbnail_prefetch)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&mode),
                            requested_size,
                            ::winrt::AbiTransferable::get_abi(&options),
                        )
                        .ok()
                    }
                }
                pub fn set_property_prefetch<
                    'a,
                    T1__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    options: super::file_properties::PropertyPrefetchOptions,
                    properties_to_retrieve: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_property_prefetch)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&options),
                            properties_to_retrieve.into().get_abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IQueryOptions {
                type VTable = abi_IQueryOptions;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        509495022,
                        3909,
                        18488,
                        [168, 233, 208, 71, 157, 68, 108, 48],
                    )
                }
            }
            impl ::std::clone::Clone for IQueryOptions {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IQueryOptions where
            {
                base__ : [usize ; 6], pub file_type_filter : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < super :: super :: foundation :: collections ::
                   IVector :: < :: winrt :: HString > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                folder_depth : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < FolderDepth as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub set_folder_depth :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, value : <
                   FolderDepth as :: winrt :: AbiTransferable > :: Abi,) -> ::
                winrt :: ErrorCode, pub application_search_filter : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < :: winrt :: HString as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_application_search_filter : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, value : <
                   :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub user_search_filter :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < :: winrt :: HString as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_user_search_filter : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, value : <
                   :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub language : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < :: winrt :: HString as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub set_language :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, value : <
                   :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub indexer_option : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < IndexerOption as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub set_indexer_option :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, value : <
                   IndexerOption as :: winrt :: AbiTransferable > :: Abi,) ->
                :: winrt :: ErrorCode, pub sort_order : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < super :: super :: foundation :: collections ::
                   IVector :: < SortEntry > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub group_property_name
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < :: winrt :: HString as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub date_stack_option
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < DateStackOption as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub save_to_string : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, result__ :
                   * mut < :: winrt :: HString as :: winrt :: AbiTransferable
                   > :: Abi,) -> :: winrt :: ErrorCode, pub load_from_string :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, value : <
                   :: winrt :: HString as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub set_thumbnail_prefetch
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, mode : <
                   super :: file_properties :: ThumbnailMode as :: winrt ::
                   AbiTransferable > :: Abi, requested_size : u32, options : <
                   super :: file_properties :: ThumbnailOptions as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                set_property_prefetch : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IQueryOptions >, options : <
                   super :: file_properties :: PropertyPrefetchOptions as ::
                   winrt :: AbiTransferable > :: Abi, properties_to_retrieve :
                   < super :: super :: foundation :: collections :: IIterable
                   :: < :: winrt :: HString > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IQueryOptions {
                fn signature() -> String {
                    "{1e5e46ee-0f45-4838-a8e9-d0479d446c30}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IQueryOptions {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IQueryOptions> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IQueryOptions> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IQueryOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IQueryOptions",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IQueryOptions {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IQueryOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IQueryOptions> for ::winrt::Object {
                fn from(value: IQueryOptions) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IQueryOptions> for ::winrt::Object {
                fn from(value: &IQueryOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IQueryOptionsFactory {
                ptr: ::winrt::ComPtr<IQueryOptionsFactory>,
            }
            impl IQueryOptionsFactory {
                pub fn create_common_file_query<
                    'a,
                    T1__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    query: CommonFileQuery,
                    file_type_filter: T1__,
                ) -> ::winrt::Result<QueryOptions> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: QueryOptions = ::std::mem::zeroed();
                        (this.vtable().create_common_file_query)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            file_type_filter.into().get_abi(),
                            <QueryOptions as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_common_folder_query(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::winrt::Result<QueryOptions> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: QueryOptions = ::std::mem::zeroed();
                        (this.vtable().create_common_folder_query)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <QueryOptions as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IQueryOptionsFactory {
                type VTable = abi_IQueryOptionsFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        53354380,
                        43457,
                        20081,
                        [128, 17, 13, 238, 157, 72, 17, 163],
                    )
                }
            }
            impl ::std::clone::Clone for IQueryOptionsFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IQueryOptionsFactory {
                base__: [usize; 6],
                pub create_common_file_query: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IQueryOptionsFactory>,
                    query: <CommonFileQuery as ::winrt::AbiTransferable>::Abi,
                    file_type_filter: <super::super::foundation::collections::IIterable<
                        ::winrt::HString,
                    > as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <QueryOptions as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub create_common_folder_query: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IQueryOptionsFactory>,
                    query: <CommonFolderQuery as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <QueryOptions as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IQueryOptionsFactory {
                fn signature() -> String {
                    "{032e1f8c-a9c1-4e71-8011-0dee9d4811a3}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IQueryOptionsFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IQueryOptionsFactory> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IQueryOptionsFactory> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IQueryOptionsFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IQueryOptionsFactory",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IQueryOptionsFactory {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IQueryOptionsFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IQueryOptionsFactory> for ::winrt::Object {
                fn from(value: IQueryOptionsFactory) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IQueryOptionsFactory> for ::winrt::Object {
                fn from(value: &IQueryOptionsFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IQueryOptionsWithProviderFilter {
                ptr: ::winrt::ComPtr<IQueryOptionsWithProviderFilter>,
            }
            impl IQueryOptionsWithProviderFilter {
                pub fn storage_provider_id_filter(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . storage_provider_id_filter)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IQueryOptionsWithProviderFilter {
                type VTable = abi_IQueryOptionsWithProviderFilter;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1537019942,
                        5572,
                        17629,
                        [184, 154, 71, 165, 155, 125, 124, 79],
                    )
                }
            }
            impl ::std::clone::Clone for IQueryOptionsWithProviderFilter {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IQueryOptionsWithProviderFilter {
                base__: [usize; 6],
                pub storage_provider_id_filter:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IQueryOptionsWithProviderFilter>,
                        result__: *mut <super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IQueryOptionsWithProviderFilter {
                fn signature() -> String {
                    "{5b9d1026-15c4-44dd-b89a-47a59b7d7c4f}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IQueryOptionsWithProviderFilter {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IQueryOptionsWithProviderFilter >
                    as :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IQueryOptionsWithProviderFilter >
                    as :: winrt :: AbiTransferable > ::
                    set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IQueryOptionsWithProviderFilter {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IQueryOptionsWithProviderFilter",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IQueryOptionsWithProviderFilter {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IQueryOptionsWithProviderFilter {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IQueryOptionsWithProviderFilter> for ::winrt::Object {
                fn from(value: IQueryOptionsWithProviderFilter) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IQueryOptionsWithProviderFilter> for ::winrt::Object {
                fn from(value: &IQueryOptionsWithProviderFilter) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFileQueryResult {
                ptr: ::winrt::ComPtr<IStorageFileQueryResult>,
            }
            impl IStorageFileQueryResult {
                pub fn get_files_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_files_async)(
                            this,
                            start_index,
                            max_number_of_items,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFile,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_files_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_files_async_default_start_and_count)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFile,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageFileQueryResult {
                type VTable = abi_IStorageFileQueryResult;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1392354375,
                        11178,
                        16684,
                        [178, 159, 212, 177, 119, 142, 250, 30],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageFileQueryResult {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFileQueryResult {
                base__: [usize; 6],
                pub get_files_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IStorageFileQueryResult>,
                    start_index: u32,
                    max_number_of_items: u32,
                    result__: *mut <super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    > as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub get_files_async_default_start_and_count:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IStorageFileQueryResult>,
                        result__: *mut <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageFileQueryResult {
                fn signature() -> String {
                    "{52fda447-2baa-412c-b29f-d4b1778efa1e}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageFileQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IStorageFileQueryResult> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IStorageFileQueryResult> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IStorageFileQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageFileQueryResult",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageFileQueryResult {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageFileQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: IStorageFileQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: &IStorageFileQueryResult) -> Self {
                    <IStorageFileQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for IStorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageFileQueryResult> for ::winrt::Object {
                fn from(value: IStorageFileQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult> for ::winrt::Object {
                fn from(value: &IStorageFileQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFileQueryResult2 {
                ptr: ::winrt::ComPtr<IStorageFileQueryResult2>,
            }
            impl IStorageFileQueryResult2 {
                pub fn get_matching_properties_with_ranges<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::StorageFile>>,
                >(
                    &self,
                    file: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IMap<
                        ::winrt::HString,
                        super::super::foundation::collections::IVectorView<
                            super::super::data::text::TextSegment,
                        >,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            super::super::foundation::collections::IVectorView<
                                super::super::data::text::TextSegment,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_matching_properties_with_ranges)(
                            this,
                            file.into().get_abi(),
                            <super::super::foundation::collections::IMap<
                                ::winrt::HString,
                                super::super::foundation::collections::IVectorView<
                                    super::super::data::text::TextSegment,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageFileQueryResult2 {
                type VTable = abi_IStorageFileQueryResult2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1314765277,
                        28993,
                        18116,
                        [139, 227, 233, 220, 158, 39, 39, 92],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageFileQueryResult2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFileQueryResult2 {
                base__: [usize; 6],
                pub get_matching_properties_with_ranges:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IStorageFileQueryResult2>,
                        file: <super::StorageFile as ::winrt::AbiTransferable>::Abi,
                        result__: *mut <super::super::foundation::collections::IMap<
                            ::winrt::HString,
                            super::super::foundation::collections::IVectorView<
                                super::super::data::text::TextSegment,
                            >,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageFileQueryResult2 {
                fn signature() -> String {
                    "{4e5db9dd-7141-46c4-8be3-e9dc9e27275c}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageFileQueryResult2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IStorageFileQueryResult2> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IStorageFileQueryResult2> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IStorageFileQueryResult2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageFileQueryResult2",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageFileQueryResult2 {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageFileQueryResult2 {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageFileQueryResult2> for IStorageQueryResultBase {
                fn from(value: IStorageFileQueryResult2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult2> for IStorageQueryResultBase {
                fn from(value: &IStorageFileQueryResult2) -> Self {
                    <IStorageFileQueryResult2 as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for IStorageFileQueryResult2
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageFileQueryResult2
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageFileQueryResult2> for ::winrt::Object {
                fn from(value: IStorageFileQueryResult2) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult2> for ::winrt::Object {
                fn from(value: &IStorageFileQueryResult2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFolderQueryOperations {
                ptr: ::winrt::ComPtr<IStorageFolderQueryOperations>,
            }
            impl IStorageFolderQueryOperations {
                pub fn get_indexed_state_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<IndexedState>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<IndexedState> =
                            ::std::mem::zeroed();
                        (this . vtable() . get_indexed_state_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < IndexedState > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn create_file_query_overload_default(
                    &self,
                ) -> ::winrt::Result<StorageFileQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageFileQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_file_query_overload_default)(
                            this,
                            <StorageFileQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_file_query(
                    &self,
                    query: CommonFileQuery,
                ) -> ::winrt::Result<StorageFileQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageFileQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_file_query)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <StorageFileQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_file_query_with_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::winrt::Result<StorageFileQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageFileQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_file_query_with_options)(
                            this,
                            query_options.into().get_abi(),
                            <StorageFileQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_folder_query_overload_default(
                    &self,
                ) -> ::winrt::Result<StorageFolderQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageFolderQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_folder_query_overload_default)(
                            this,
                            <StorageFolderQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_folder_query(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::winrt::Result<StorageFolderQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageFolderQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_folder_query)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <StorageFolderQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_folder_query_with_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::winrt::Result<StorageFolderQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageFolderQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_folder_query_with_options)(
                            this,
                            query_options.into().get_abi(),
                            <StorageFolderQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_item_query(&self) -> ::winrt::Result<StorageItemQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageItemQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_item_query)(
                            this,
                            <StorageItemQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_item_query_with_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::winrt::Result<StorageItemQueryResult> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: StorageItemQueryResult = ::std::mem::zeroed();
                        (this.vtable().create_item_query_with_options)(
                            this,
                            query_options.into().get_abi(),
                            <StorageItemQueryResult as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_files_async(
                    &self,
                    query: CommonFileQuery,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_files_async)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            start_index,
                            max_items_to_retrieve,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFile,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_files_async_overload_default_start_and_count(
                    &self,
                    query: CommonFileQuery,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > = ::std::mem::zeroed();
                        (this
                            .vtable()
                            .get_files_async_overload_default_start_and_count)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFile,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_folders_async(
                    &self,
                    query: CommonFolderQuery,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_folders_async)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            start_index,
                            max_items_to_retrieve,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFolder,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_folders_async_overload_default_start_and_count(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        (this
                            .vtable()
                            .get_folders_async_overload_default_start_and_count)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFolder,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_items_async(
                    &self,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_items_async)(
                            this,
                            start_index,
                            max_items_to_retrieve,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn are_query_options_supported<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().are_query_options_supported)(
                            this,
                            query_options.into().get_abi(),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn is_common_folder_query_supported(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().is_common_folder_query_supported)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn is_common_file_query_supported(
                    &self,
                    query: CommonFileQuery,
                ) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().is_common_file_query_supported)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&query),
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageFolderQueryOperations {
                type VTable = abi_IStorageFolderQueryOperations;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3410218185,
                        17515,
                        19023,
                        [190, 151, 117, 119, 113, 190, 82, 3],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageFolderQueryOperations {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFolderQueryOperations where
            {
                base__ : [usize ; 6], pub get_indexed_state_async : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, result__ : * mut < super
                   :: super :: foundation :: IAsyncOperation :: < IndexedState
                   > as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub create_file_query_overload_default : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, result__ : * mut <
                   StorageFileQueryResult as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub create_file_query :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : < CommonFileQuery
                   as :: winrt :: AbiTransferable > :: Abi, result__ : * mut <
                   StorageFileQueryResult as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub
                create_file_query_with_options : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query_options : <
                   QueryOptions as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut < StorageFileQueryResult as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                create_folder_query_overload_default : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, result__ : * mut <
                   StorageFolderQueryResult as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub create_folder_query
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : <
                   CommonFolderQuery as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut < StorageFolderQueryResult as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                create_folder_query_with_options : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query_options : <
                   QueryOptions as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut < StorageFolderQueryResult as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                create_item_query : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, result__ : * mut <
                   StorageItemQueryResult as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub
                create_item_query_with_options : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query_options : <
                   QueryOptions as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut < StorageItemQueryResult as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                get_files_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : < CommonFileQuery
                   as :: winrt :: AbiTransferable > :: Abi, start_index : u32,
                   max_items_to_retrieve : u32, result__ : * mut < super ::
                   super :: foundation :: IAsyncOperation :: < super :: super
                   :: foundation :: collections :: IVectorView :: < super ::
                   StorageFile > > as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub
                get_files_async_overload_default_start_and_count : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : < CommonFileQuery
                   as :: winrt :: AbiTransferable > :: Abi, result__ : * mut <
                   super :: super :: foundation :: IAsyncOperation :: < super
                   :: super :: foundation :: collections :: IVectorView :: <
                   super :: StorageFile > > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub get_folders_async :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : <
                   CommonFolderQuery as :: winrt :: AbiTransferable > :: Abi,
                   start_index : u32, max_items_to_retrieve : u32, result__ :
                   * mut < super :: super :: foundation :: IAsyncOperation ::
                   < super :: super :: foundation :: collections ::
                   IVectorView :: < super :: StorageFolder > > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                get_folders_async_overload_default_start_and_count : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : <
                   CommonFolderQuery as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut < super :: super :: foundation ::
                   IAsyncOperation :: < super :: super :: foundation ::
                   collections :: IVectorView :: < super :: StorageFolder > >
                   as :: winrt :: AbiTransferable > :: Abi,) -> :: winrt ::
                ErrorCode, pub get_items_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, start_index : u32,
                   max_items_to_retrieve : u32, result__ : * mut < super ::
                   super :: foundation :: IAsyncOperation :: < super :: super
                   :: foundation :: collections :: IVectorView :: < super ::
                   IStorageItem > > as :: winrt :: AbiTransferable > :: Abi,)
                -> :: winrt :: ErrorCode, pub are_query_options_supported :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query_options : <
                   QueryOptions as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut bool,) -> :: winrt :: ErrorCode, pub
                is_common_folder_query_supported : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : <
                   CommonFolderQuery as :: winrt :: AbiTransferable > :: Abi,
                   result__ : * mut bool,) -> :: winrt :: ErrorCode, pub
                is_common_file_query_supported : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr <
                   IStorageFolderQueryOperations >, query : < CommonFileQuery
                   as :: winrt :: AbiTransferable > :: Abi, result__ : * mut
                   bool,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageFolderQueryOperations {
                fn signature() -> String {
                    "{cb43ccc9-446b-4a4f-be97-757771be5203}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageFolderQueryOperations {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IStorageFolderQueryOperations > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IStorageFolderQueryOperations > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IStorageFolderQueryOperations {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageFolderQueryOperations",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageFolderQueryOperations {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageFolderQueryOperations {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageFolderQueryOperations> for ::winrt::Object {
                fn from(value: IStorageFolderQueryOperations) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageFolderQueryOperations> for ::winrt::Object {
                fn from(value: &IStorageFolderQueryOperations) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFolderQueryResult {
                ptr: ::winrt::ComPtr<IStorageFolderQueryResult>,
            }
            impl IStorageFolderQueryResult {
                pub fn get_folders_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_folders_async)(
                            this,
                            start_index,
                            max_number_of_items,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFolder,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_folders_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_folders_async_default_start_and_count)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFolder,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageFolderQueryResult {
                type VTable = abi_IStorageFolderQueryResult;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1716832529,
                        32102,
                        18170,
                        [174, 207, 228, 164, 186, 169, 58, 184],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageFolderQueryResult {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFolderQueryResult {
                base__: [usize; 6],
                pub get_folders_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IStorageFolderQueryResult>,
                    start_index: u32,
                    max_number_of_items: u32,
                    result__: *mut <super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    > as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub get_folders_async_default_start_and_count:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IStorageFolderQueryResult>,
                        result__: *mut <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageFolderQueryResult {
                fn signature() -> String {
                    "{6654c911-7d66-46fa-aecf-e4a4baa93ab8}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageFolderQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IStorageFolderQueryResult > as ::
                    winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IStorageFolderQueryResult > as ::
                    winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IStorageFolderQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageFolderQueryResult",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageFolderQueryResult {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageFolderQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: IStorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: &IStorageFolderQueryResult) -> Self {
                    <IStorageFolderQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for IStorageFolderQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageFolderQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageFolderQueryResult> for ::winrt::Object {
                fn from(value: IStorageFolderQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageFolderQueryResult> for ::winrt::Object {
                fn from(value: &IStorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageItemQueryResult {
                ptr: ::winrt::ComPtr<IStorageItemQueryResult>,
            }
            impl IStorageItemQueryResult {
                pub fn get_items_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_items_async)(
                            this,
                            start_index,
                            max_number_of_items,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_items_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_items_async_default_start_and_count)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageItemQueryResult {
                type VTable = abi_IStorageItemQueryResult;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3902046329,
                        40280,
                        18360,
                        [178, 178, 65, 176, 127, 71, 149, 249],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageItemQueryResult {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageItemQueryResult {
                base__: [usize; 6],
                pub get_items_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IStorageItemQueryResult>,
                    start_index: u32,
                    max_number_of_items: u32,
                    result__: *mut <super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    > as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub get_items_async_default_start_and_count:
                    unsafe extern "system" fn(
                        ::winrt::NonNullRawComPtr<IStorageItemQueryResult>,
                        result__: *mut <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > as ::winrt::AbiTransferable>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageItemQueryResult {
                fn signature() -> String {
                    "{e8948079-9d58-47b8-b2b2-41b07f4795f9}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageItemQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IStorageItemQueryResult> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IStorageItemQueryResult> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IStorageItemQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageItemQueryResult",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageItemQueryResult {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageItemQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: IStorageItemQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: &IStorageItemQueryResult) -> Self {
                    <IStorageItemQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for IStorageItemQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageItemQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageItemQueryResult> for ::winrt::Object {
                fn from(value: IStorageItemQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageItemQueryResult> for ::winrt::Object {
                fn from(value: &IStorageItemQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IStorageQueryResultBase {
                ptr: ::winrt::ComPtr<IStorageQueryResultBase>,
            }
            impl IStorageQueryResultBase {
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<u32> =
                            ::std::mem::zeroed();
                        (this . vtable() . get_item_count_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < u32 > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::StorageFolder = ::std::mem::zeroed();
                        (this.vtable().folder)(
                            this,
                            <super::StorageFolder as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . contents_changed)
                        (this, handler . into() . get_abi(), < super :: super
                         :: foundation :: EventRegistrationToken as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_contents_changed)(this, event_cookie.into().get_abi())
                            .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::EventRegistrationToken =
                            ::std::mem::zeroed();
                        (this . vtable() . options_changed)
                        (this, changed_handler . into() . get_abi(), < super
                         :: super :: foundation :: EventRegistrationToken as
                         :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().remove_options_changed)(this, event_cookie.into().get_abi())
                            .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<u32> =
                            ::std::mem::zeroed();
                        (this . vtable() . find_start_index_async)
                        (this, value . into() . get_abi(), < super :: super ::
                         foundation :: IAsyncOperation :: < u32 > as :: winrt
                         :: AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: QueryOptions = ::std::mem::zeroed();
                        (this.vtable().get_current_query_options)(
                            this,
                            <QueryOptions as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().apply_new_query_options)(
                            this,
                            new_query_options.into().get_abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IStorageQueryResultBase {
                type VTable = abi_IStorageQueryResultBase;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3264730893,
                        29523,
                        18347,
                        [186, 88, 140, 97, 66, 93, 197, 75],
                    )
                }
            }
            impl ::std::clone::Clone for IStorageQueryResultBase {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageQueryResultBase where
            {
                base__ : [usize ; 6], pub get_item_count_async : unsafe extern
                "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   result__ : * mut < super :: super :: foundation ::
                   IAsyncOperation :: < u32 > as :: winrt :: AbiTransferable >
                   :: Abi,) -> :: winrt :: ErrorCode, pub folder : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   result__ : * mut < super :: StorageFolder as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                contents_changed : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   handler : < super :: super :: foundation ::
                   TypedEventHandler :: < IStorageQueryResultBase, :: winrt ::
                   Object > as :: winrt :: AbiTransferable > :: Abi, result__
                   : * mut < super :: super :: foundation ::
                   EventRegistrationToken as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub remove_contents_changed
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   event_cookie : < super :: super :: foundation ::
                   EventRegistrationToken as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub options_changed :
                unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   changed_handler : < super :: super :: foundation ::
                   TypedEventHandler :: < IStorageQueryResultBase, :: winrt ::
                   Object > as :: winrt :: AbiTransferable > :: Abi, result__
                   : * mut < super :: super :: foundation ::
                   EventRegistrationToken as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub remove_options_changed
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   event_cookie : < super :: super :: foundation ::
                   EventRegistrationToken as :: winrt :: AbiTransferable > ::
                   Abi,) -> :: winrt :: ErrorCode, pub find_start_index_async
                : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   value : < :: winrt :: Object as :: winrt :: AbiTransferable
                   > :: Abi, result__ : * mut < super :: super :: foundation
                   :: IAsyncOperation :: < u32 > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                get_current_query_options : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   result__ : * mut < QueryOptions as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                apply_new_query_options : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IStorageQueryResultBase >,
                   new_query_options : < QueryOptions as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IStorageQueryResultBase {
                fn signature() -> String {
                    "{c297d70d-7353-47ab-ba58-8c61425dc54b}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IStorageQueryResultBase {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IStorageQueryResultBase> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IStorageQueryResultBase> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IStorageQueryResultBase {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IStorageQueryResultBase",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IStorageQueryResultBase {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IStorageQueryResultBase {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IStorageQueryResultBase> for ::winrt::Object {
                fn from(value: IStorageQueryResultBase) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IStorageQueryResultBase> for ::winrt::Object {
                fn from(value: &IStorageQueryResultBase) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct IndexedState {
                value: i32,
            }
            impl IndexedState {
                #![allow(non_upper_case_globals)]
                pub const Unknown: Self = Self { value: 0i32 };
                pub const NotIndexed: Self = Self { value: 1i32 };
                pub const PartiallyIndexed: Self = Self { value: 2i32 };
                pub const FullyIndexed: Self = Self { value: 3i32 };
            }
            unsafe impl ::winrt::RuntimeType for IndexedState {
                fn signature() -> String {
                    "enum(Windows.Storage.Search.IndexedState;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IndexedState {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct IndexerOption {
                value: i32,
            }
            impl IndexerOption {
                #![allow(non_upper_case_globals)]
                pub const UseIndexerWhenAvailable: Self = Self { value: 0i32 };
                pub const OnlyUseIndexer: Self = Self { value: 1i32 };
                pub const DoNotUseIndexer: Self = Self { value: 2i32 };
                pub const OnlyUseIndexerAndOptimizeForIndexedProperties: Self =
                    Self { value: 3i32 };
            }
            unsafe impl ::winrt::RuntimeType for IndexerOption {
                fn signature() -> String {
                    "enum(Windows.Storage.Search.IndexerOption;i4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IndexerOption {
                type Abi = i32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct QueryOptions {
                ptr: ::winrt::ComPtr<IQueryOptions>,
            }
            impl QueryOptions {
                pub fn new() -> ::winrt::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn file_type_filter(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        (this . vtable() . file_type_filter)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < :: winrt :: HString > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn folder_depth(&self) -> ::winrt::Result<FolderDepth> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: FolderDepth = ::std::mem::zeroed();
                        (this.vtable().folder_depth)(
                            this,
                            <FolderDepth as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_folder_depth(&self, value: FolderDepth) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_folder_depth)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn application_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().application_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_application_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_application_search_filter)(this, value.into().get_abi())
                            .ok()
                    }
                }
                pub fn user_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().user_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_user_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_user_search_filter)(this, value.into().get_abi()).ok()
                    }
                }
                pub fn language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().language)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_language<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_language)(this, value.into().get_abi()).ok() }
                }
                pub fn indexer_option(&self) -> ::winrt::Result<IndexerOption> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IndexerOption = ::std::mem::zeroed();
                        (this.vtable().indexer_option)(
                            this,
                            <IndexerOption as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_indexer_option(&self, value: IndexerOption) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_indexer_option)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&value),
                        )
                        .ok()
                    }
                }
                pub fn sort_order(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<SortEntry>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::collections::IVector<
                            SortEntry,
                        > = ::std::mem::zeroed();
                        (this . vtable() . sort_order)
                        (this, < super :: super :: foundation :: collections
                         :: IVector :: < SortEntry > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn group_property_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().group_property_name)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn date_stack_option(&self) -> ::winrt::Result<DateStackOption> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: DateStackOption = ::std::mem::zeroed();
                        (this.vtable().date_stack_option)(
                            this,
                            <DateStackOption as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn save_to_string(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().save_to_string)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn load_from_string<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().load_from_string)(this, value.into().get_abi()).ok() }
                }
                pub fn set_thumbnail_prefetch(
                    &self,
                    mode: super::file_properties::ThumbnailMode,
                    requested_size: u32,
                    options: super::file_properties::ThumbnailOptions,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_thumbnail_prefetch)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&mode),
                            requested_size,
                            ::winrt::AbiTransferable::get_abi(&options),
                        )
                        .ok()
                    }
                }
                pub fn set_property_prefetch<
                    'a,
                    T1__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    &self,
                    options: super::file_properties::PropertyPrefetchOptions,
                    properties_to_retrieve: T1__,
                ) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        (this.vtable().set_property_prefetch)(
                            this,
                            ::winrt::AbiTransferable::get_abi(&options),
                            properties_to_retrieve.into().get_abi(),
                        )
                        .ok()
                    }
                }
                pub fn storage_provider_id_filter(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>
                {
                    <IQueryOptionsWithProviderFilter as ::std::convert::From<&Self>>::from(self)
                        .storage_provider_id_filter()
                }
                pub fn create_common_file_query<
                    'a,
                    T1__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::winrt::HString>,
                        >,
                    >,
                >(
                    query: CommonFileQuery,
                    file_type_filter: T1__,
                ) -> ::winrt::Result<QueryOptions> {
                    Self::IQueryOptionsFactory(|f| {
                        f.create_common_file_query(query, file_type_filter)
                    })
                }
                pub fn create_common_folder_query(
                    query: CommonFolderQuery,
                ) -> ::winrt::Result<QueryOptions> {
                    Self::IQueryOptionsFactory(|f| f.create_common_folder_query(query))
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::winrt::IActivationFactory) -> ::winrt::Result<R>,
                >(
                    callback: F,
                ) -> ::winrt::Result<R> {
                    static mut SHARED: ::winrt::FactoryCache<
                        QueryOptions,
                        ::winrt::IActivationFactory,
                    > = ::winrt::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                #[allow(non_snake_case)]
                fn IQueryOptionsFactory<
                    R,
                    F: FnOnce(&IQueryOptionsFactory) -> ::winrt::Result<R>,
                >(
                    callback: F,
                ) -> ::winrt::Result<R> {
                    static mut SHARED: ::winrt::FactoryCache<QueryOptions, IQueryOptionsFactory> =
                        ::winrt::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::winrt::RuntimeName for QueryOptions {
                const NAME: &'static str = "Windows.Storage.Search.QueryOptions";
            }
            unsafe impl ::winrt::ComInterface for QueryOptions {
                type VTable = abi_IQueryOptions;
                fn iid() -> ::winrt::Guid {
                    <IQueryOptions as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for QueryOptions {
                fn signature() -> String {
                    "rc(Windows.Storage.Search.QueryOptions;{1e5e46ee-0f45-4838-a8e9-d0479d446c30})"
                        .to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for QueryOptions {
                type Abi = ::winrt::RawComPtr<IQueryOptions>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IQueryOptions> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IQueryOptions> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for QueryOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "QueryOptions",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<QueryOptions> for IQueryOptions {
                fn from(value: QueryOptions) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&QueryOptions> for IQueryOptions {
                fn from(value: &QueryOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IQueryOptions>> for QueryOptions {
                fn into(self) -> ::winrt::Param<'a, IQueryOptions> {
                    ::winrt::Param::Owned(::std::convert::Into::<IQueryOptions>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IQueryOptions>> for &'a QueryOptions {
                fn into(self) -> ::winrt::Param<'a, IQueryOptions> {
                    ::winrt::Param::Owned(::std::convert::Into::<IQueryOptions>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<QueryOptions> for IQueryOptionsWithProviderFilter {
                fn from(value: QueryOptions) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&QueryOptions> for IQueryOptionsWithProviderFilter {
                fn from(value: &QueryOptions) -> Self {
                    <QueryOptions as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IQueryOptionsWithProviderFilter>>
                for QueryOptions
            {
                fn into(self) -> ::winrt::Param<'a, IQueryOptionsWithProviderFilter> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IQueryOptionsWithProviderFilter>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IQueryOptionsWithProviderFilter>>
                for &'a QueryOptions
            {
                fn into(self) -> ::winrt::Param<'a, IQueryOptionsWithProviderFilter> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IQueryOptionsWithProviderFilter>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<QueryOptions> for ::winrt::Object {
                fn from(value: QueryOptions) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&QueryOptions> for ::winrt::Object {
                fn from(value: &QueryOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for QueryOptions {}
            unsafe impl ::std::marker::Sync for QueryOptions {}
            #[repr(C)]
            #[derive(Clone, Default, Debug, PartialEq)]
            pub struct SortEntry {
                pub property_name: ::winrt::HString,
                pub ascending_order: bool,
            }
            unsafe impl ::winrt::RuntimeType for SortEntry {
                fn signature() -> String {
                    "struct(Windows.Storage.Search.SortEntry;string;b1)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for SortEntry {
                type Abi = Self;
                fn get_abi(&self) -> Self::Abi {
                    self.clone()
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self as *mut Self::Abi
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct StorageFileQueryResult {
                ptr: ::winrt::ComPtr<IStorageFileQueryResult>,
            }
            impl StorageFileQueryResult {
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
                pub fn get_files_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_files_async)(
                            this,
                            start_index,
                            max_number_of_items,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFile,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_files_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_files_async_default_start_and_count)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFile,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_matching_properties_with_ranges<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::StorageFile>>,
                >(
                    &self,
                    file: T0__,
                ) -> ::winrt::Result<
                    super::super::foundation::collections::IMap<
                        ::winrt::HString,
                        super::super::foundation::collections::IVectorView<
                            super::super::data::text::TextSegment,
                        >,
                    >,
                > {
                    <IStorageFileQueryResult2 as ::std::convert::From<&Self>>::from(self)
                        .get_matching_properties_with_ranges(file)
                }
            }
            impl ::winrt::RuntimeName for StorageFileQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageFileQueryResult";
            }
            unsafe impl ::winrt::ComInterface for StorageFileQueryResult {
                type VTable = abi_IStorageFileQueryResult;
                fn iid() -> ::winrt::Guid {
                    <IStorageFileQueryResult as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for StorageFileQueryResult {
                fn signature() -> String {
                    "rc(Windows.Storage.Search.StorageFileQueryResult;{52fda447-2baa-412c-b29f-d4b1778efa1e})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for StorageFileQueryResult {
                type Abi = ::winrt::RawComPtr<IStorageFileQueryResult>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IStorageFileQueryResult> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IStorageFileQueryResult> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for StorageFileQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "StorageFileQueryResult",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: &StorageFileQueryResult) -> Self {
                    <StorageFileQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for StorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for IStorageFileQueryResult {
                fn from(value: StorageFileQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for IStorageFileQueryResult {
                fn from(value: &StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFileQueryResult>>
                for StorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageFileQueryResult> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFileQueryResult>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageFileQueryResult> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for IStorageFileQueryResult2 {
                fn from(value: StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for IStorageFileQueryResult2 {
                fn from(value: &StorageFileQueryResult) -> Self {
                    <StorageFileQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFileQueryResult2>>
                for StorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageFileQueryResult2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult2>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFileQueryResult2>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageFileQueryResult2> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for ::winrt::Object {
                fn from(value: StorageFileQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for ::winrt::Object {
                fn from(value: &StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct StorageFolderQueryResult {
                ptr: ::winrt::ComPtr<IStorageFolderQueryResult>,
            }
            impl StorageFolderQueryResult {
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
                pub fn get_folders_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_folders_async)(
                            this,
                            start_index,
                            max_number_of_items,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFolder,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_folders_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_folders_async_default_start_and_count)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::StorageFolder,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for StorageFolderQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageFolderQueryResult";
            }
            unsafe impl ::winrt::ComInterface for StorageFolderQueryResult {
                type VTable = abi_IStorageFolderQueryResult;
                fn iid() -> ::winrt::Guid {
                    <IStorageFolderQueryResult as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for StorageFolderQueryResult {
                fn signature() -> String {
                    "rc(Windows.Storage.Search.StorageFolderQueryResult;{6654c911-7d66-46fa-aecf-e4a4baa93ab8})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for StorageFolderQueryResult {
                type Abi = ::winrt::RawComPtr<IStorageFolderQueryResult>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IStorageFolderQueryResult > as ::
                    winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IStorageFolderQueryResult > as ::
                    winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for StorageFolderQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "StorageFolderQueryResult",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<StorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: StorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: &StorageFolderQueryResult) -> Self {
                    <StorageFolderQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for StorageFolderQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a StorageFolderQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFolderQueryResult> for IStorageFolderQueryResult {
                fn from(value: StorageFolderQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageFolderQueryResult> for IStorageFolderQueryResult {
                fn from(value: &StorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolderQueryResult>>
                for StorageFolderQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageFolderQueryResult> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageFolderQueryResult>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageFolderQueryResult>>
                for &'a StorageFolderQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageFolderQueryResult> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageFolderQueryResult>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFolderQueryResult> for ::winrt::Object {
                fn from(value: StorageFolderQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageFolderQueryResult> for ::winrt::Object {
                fn from(value: &StorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct StorageItemQueryResult {
                ptr: ::winrt::ComPtr<IStorageItemQueryResult>,
            }
            impl StorageItemQueryResult {
                pub fn get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_item_count_async()
                }
                pub fn folder(&self) -> ::winrt::Result<super::StorageFolder> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self).folder()
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .contents_changed(handler)
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_contents_changed(event_cookie)
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::winrt::Result<super::super::foundation::EventRegistrationToken>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .options_changed(changed_handler)
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .remove_options_changed(event_cookie)
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .find_start_index_async(value)
                }
                pub fn get_current_query_options(&self) -> ::winrt::Result<QueryOptions> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .get_current_query_options()
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::winrt::Result<()> {
                    <IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .apply_new_query_options(new_query_options)
                }
                pub fn get_items_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_items_async)(
                            this,
                            start_index,
                            max_number_of_items,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_items_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > = ::std::mem::zeroed();
                        (this.vtable().get_items_async_default_start_and_count)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                super::super::foundation::collections::IVectorView<
                                    super::IStorageItem,
                                >,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            impl ::winrt::RuntimeName for StorageItemQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageItemQueryResult";
            }
            unsafe impl ::winrt::ComInterface for StorageItemQueryResult {
                type VTable = abi_IStorageItemQueryResult;
                fn iid() -> ::winrt::Guid {
                    <IStorageItemQueryResult as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for StorageItemQueryResult {
                fn signature() -> String {
                    "rc(Windows.Storage.Search.StorageItemQueryResult;{e8948079-9d58-47b8-b2b2-41b07f4795f9})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for StorageItemQueryResult {
                type Abi = ::winrt::RawComPtr<IStorageItemQueryResult>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IStorageItemQueryResult> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IStorageItemQueryResult> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for StorageItemQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "StorageItemQueryResult",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<StorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: StorageItemQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: &StorageItemQueryResult) -> Self {
                    <StorageItemQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for StorageItemQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageQueryResultBase>>
                for &'a StorageItemQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageQueryResultBase> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemQueryResult> for IStorageItemQueryResult {
                fn from(value: StorageItemQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemQueryResult> for IStorageItemQueryResult {
                fn from(value: &StorageItemQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemQueryResult>>
                for StorageItemQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemQueryResult> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageItemQueryResult>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IStorageItemQueryResult>>
                for &'a StorageItemQueryResult
            {
                fn into(self) -> ::winrt::Param<'a, IStorageItemQueryResult> {
                    ::winrt::Param::Owned(::std::convert::Into::<IStorageItemQueryResult>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemQueryResult> for ::winrt::Object {
                fn from(value: StorageItemQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemQueryResult> for ::winrt::Object {
                fn from(value: &StorageItemQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
        }
        pub mod streams {
            #[repr(transparent)]
            pub struct IBuffer {
                ptr: ::winrt::ComPtr<IBuffer>,
            }
            impl IBuffer {
                pub fn capacity(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().capacity)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn length(&self) -> ::winrt::Result<u32> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u32 = ::std::mem::zeroed();
                        (this.vtable().length)(
                            this,
                            <u32 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_length(&self, value: u32) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_length)(this, value).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for IBuffer {
                type VTable = abi_IBuffer;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821408,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for IBuffer {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IBuffer {
                base__: [usize; 6],
                pub capacity: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IBuffer>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub length: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IBuffer>,
                    result__: *mut u32,
                ) -> ::winrt::ErrorCode,
                pub set_length: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IBuffer>,
                    value: u32,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IBuffer {
                fn signature() -> String {
                    "{905a0fe0-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IBuffer {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IBuffer> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IBuffer> as ::winrt::AbiTransferable>::set_abi(&mut self.ptr)
                }
            }
            impl ::std::fmt::Debug for IBuffer {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IBuffer",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IBuffer {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IBuffer {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IBuffer> for ::winrt::Object {
                fn from(value: IBuffer) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IBuffer> for ::winrt::Object {
                fn from(value: &IBuffer) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IContentTypeProvider {
                ptr: ::winrt::ComPtr<IContentTypeProvider>,
            }
            impl IContentTypeProvider {
                pub fn content_type(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: ::winrt::HString = ::std::mem::zeroed();
                        (this.vtable().content_type)(
                            this,
                            <::winrt::HString as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IContentTypeProvider {
                type VTable = abi_IContentTypeProvider;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2547030181,
                        15257,
                        19945,
                        [136, 165, 225, 29, 47, 80, 199, 149],
                    )
                }
            }
            impl ::std::clone::Clone for IContentTypeProvider {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IContentTypeProvider {
                base__: [usize; 6],
                pub content_type: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IContentTypeProvider>,
                    result__: *mut <::winrt::HString as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IContentTypeProvider {
                fn signature() -> String {
                    "{97d098a5-3b99-4de9-88a5-e11d2f50c795}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IContentTypeProvider {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IContentTypeProvider> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IContentTypeProvider> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IContentTypeProvider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IContentTypeProvider",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IContentTypeProvider {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IContentTypeProvider {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IContentTypeProvider> for ::winrt::Object {
                fn from(value: IContentTypeProvider) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IContentTypeProvider> for ::winrt::Object {
                fn from(value: &IContentTypeProvider) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IInputStream {
                ptr: ::winrt::ComPtr<IInputStream>,
            }
            impl IInputStream {
                pub fn read_async<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperationWithProgress<IBuffer, u32>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperationWithProgress<
                            IBuffer,
                            u32,
                        > = ::std::mem::zeroed();
                        (this . vtable() . read_async)
                        (this, buffer . into() . get_abi(), count, :: winrt ::
                         AbiTransferable :: get_abi(& options), < super ::
                         super :: foundation :: IAsyncOperationWithProgress ::
                         < IBuffer, u32 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn close(&self) -> ::winrt::Result<()> {
                    <super::super::foundation::IClosable as ::std::convert::From<&Self>>::from(self)
                        .close()
                }
            }
            unsafe impl ::winrt::ComInterface for IInputStream {
                type VTable = abi_IInputStream;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821410,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for IInputStream {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IInputStream {
                base__: [usize; 6],
                pub read_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IInputStream>,
                    buffer: <IBuffer as ::winrt::AbiTransferable>::Abi,
                    count: u32,
                    options: <InputStreamOptions as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <super::super::foundation::IAsyncOperationWithProgress<
                        IBuffer,
                        u32,
                    > as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IInputStream {
                fn signature() -> String {
                    "{905a0fe2-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IInputStream {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IInputStream> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IInputStream> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IInputStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IInputStream",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IInputStream {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IInputStream {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IInputStream> for super::super::foundation::IClosable {
                fn from(value: IInputStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IInputStream> for super::super::foundation::IClosable {
                fn from(value: &IInputStream) -> Self {
                    <IInputStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for IInputStream
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for &'a IInputStream
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IInputStream> for ::winrt::Object {
                fn from(value: IInputStream) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IInputStream> for ::winrt::Object {
                fn from(value: &IInputStream) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IInputStreamReference {
                ptr: ::winrt::ComPtr<IInputStreamReference>,
            }
            impl IInputStreamReference {
                pub fn open_sequential_read_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<IInputStream>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<IInputStream> =
                            ::std::mem::zeroed();
                        (this . vtable() . open_sequential_read_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < IInputStream > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IInputStreamReference {
                type VTable = abi_IInputStreamReference;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1133681944,
                        24265,
                        19290,
                        [145, 156, 66, 5, 176, 200, 4, 182],
                    )
                }
            }
            impl ::std::clone::Clone for IInputStreamReference {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IInputStreamReference where
            {
                base__ : [usize ; 6], pub open_sequential_read_async : unsafe
                extern "system"
                fn(:: winrt :: NonNullRawComPtr < IInputStreamReference >,
                   result__ : * mut < super :: super :: foundation ::
                   IAsyncOperation :: < IInputStream > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IInputStreamReference {
                fn signature() -> String {
                    "{43929d18-5ec9-4b5a-919c-4205b0c804b6}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IInputStreamReference {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IInputStreamReference> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IInputStreamReference> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IInputStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IInputStreamReference",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IInputStreamReference {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IInputStreamReference {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IInputStreamReference> for ::winrt::Object {
                fn from(value: IInputStreamReference) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IInputStreamReference> for ::winrt::Object {
                fn from(value: &IInputStreamReference) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IOutputStream {
                ptr: ::winrt::ComPtr<IOutputStream>,
            }
            impl IOutputStream {
                pub fn write_async<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32, u32>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperationWithProgress<
                            u32,
                            u32,
                        > = ::std::mem::zeroed();
                        (this . vtable() . write_async)
                        (this, buffer . into() . get_abi(), < super :: super
                         :: foundation :: IAsyncOperationWithProgress :: <
                         u32, u32 > as :: winrt :: AbiTransferable > ::
                         set_abi(& mut result__)) . and_then(|| result__)
                    }
                }
                pub fn flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<bool> =
                            ::std::mem::zeroed();
                        (this . vtable() . flush_async)
                        (this, < super :: super :: foundation ::
                         IAsyncOperation :: < bool > as :: winrt ::
                         AbiTransferable > :: set_abi(& mut result__)) .
                        and_then(|| result__)
                    }
                }
                pub fn close(&self) -> ::winrt::Result<()> {
                    <super::super::foundation::IClosable as ::std::convert::From<&Self>>::from(self)
                        .close()
                }
            }
            unsafe impl ::winrt::ComInterface for IOutputStream {
                type VTable = abi_IOutputStream;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821414,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for IOutputStream {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IOutputStream where
            {
                base__ : [usize ; 6], pub write_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IOutputStream >, buffer : <
                   IBuffer as :: winrt :: AbiTransferable > :: Abi, result__ :
                   * mut < super :: super :: foundation ::
                   IAsyncOperationWithProgress :: < u32, u32 > as :: winrt ::
                   AbiTransferable > :: Abi,) -> :: winrt :: ErrorCode, pub
                flush_async : unsafe extern "system"
                fn(:: winrt :: NonNullRawComPtr < IOutputStream >, result__ :
                   * mut < super :: super :: foundation :: IAsyncOperation ::
                   < bool > as :: winrt :: AbiTransferable > :: Abi,) -> ::
                winrt :: ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IOutputStream {
                fn signature() -> String {
                    "{905a0fe6-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IOutputStream {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IOutputStream> as ::winrt::AbiTransferable>::get_abi(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IOutputStream> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IOutputStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IOutputStream",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IOutputStream {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IOutputStream {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IOutputStream> for super::super::foundation::IClosable {
                fn from(value: IOutputStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IOutputStream> for super::super::foundation::IClosable {
                fn from(value: &IOutputStream) -> Self {
                    <IOutputStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for IOutputStream
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for &'a IOutputStream
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IOutputStream> for ::winrt::Object {
                fn from(value: IOutputStream) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IOutputStream> for ::winrt::Object {
                fn from(value: &IOutputStream) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStream {
                ptr: ::winrt::ComPtr<IRandomAccessStream>,
            }
            impl IRandomAccessStream {
                pub fn size(&self) -> ::winrt::Result<u64> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u64 = ::std::mem::zeroed();
                        (this.vtable().size)(
                            this,
                            <u64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn set_size(&self, value: u64) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().set_size)(this, value).ok() }
                }
                pub fn get_input_stream_at(&self, position: u64) -> ::winrt::Result<IInputStream> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IInputStream = ::std::mem::zeroed();
                        (this.vtable().get_input_stream_at)(
                            this,
                            position,
                            <IInputStream as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn get_output_stream_at(
                    &self,
                    position: u64,
                ) -> ::winrt::Result<IOutputStream> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IOutputStream = ::std::mem::zeroed();
                        (this.vtable().get_output_stream_at)(
                            this,
                            position,
                            <IOutputStream as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn position(&self) -> ::winrt::Result<u64> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: u64 = ::std::mem::zeroed();
                        (this.vtable().position)(
                            this,
                            <u64 as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn seek(&self, position: u64) -> ::winrt::Result<()> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe { (this.vtable().seek)(this, position).ok() }
                }
                pub fn clone_stream(&self) -> ::winrt::Result<IRandomAccessStream> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: IRandomAccessStream = ::std::mem::zeroed();
                        (this.vtable().clone_stream)(
                            this,
                            <IRandomAccessStream as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn can_read(&self) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().can_read)(
                            this,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn can_write(&self) -> ::winrt::Result<bool> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: bool = ::std::mem::zeroed();
                        (this.vtable().can_write)(
                            this,
                            <bool as ::winrt::AbiTransferable>::set_abi(&mut result__),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn close(&self) -> ::winrt::Result<()> {
                    <super::super::foundation::IClosable as ::std::convert::From<&Self>>::from(self)
                        .close()
                }
                pub fn read_async<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperationWithProgress<IBuffer, u32>,
                > {
                    <IInputStream as ::std::convert::From<&Self>>::from(self)
                        .read_async(buffer, count, options)
                }
                pub fn write_async<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32, u32>>
                {
                    <IOutputStream as ::std::convert::From<&Self>>::from(self).write_async(buffer)
                }
                pub fn flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    <IOutputStream as ::std::convert::From<&Self>>::from(self).flush_async()
                }
            }
            unsafe impl ::winrt::ComInterface for IRandomAccessStream {
                type VTable = abi_IRandomAccessStream;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821409,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for IRandomAccessStream {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStream {
                base__: [usize; 6],
                pub size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    result__: *mut u64,
                ) -> ::winrt::ErrorCode,
                pub set_size: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    value: u64,
                ) -> ::winrt::ErrorCode,
                pub get_input_stream_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    position: u64,
                    result__: *mut <IInputStream as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub get_output_stream_at: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    position: u64,
                    result__: *mut <IOutputStream as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub position: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    result__: *mut u64,
                ) -> ::winrt::ErrorCode,
                pub seek: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    position: u64,
                ) -> ::winrt::ErrorCode,
                pub clone_stream: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    result__: *mut <IRandomAccessStream as ::winrt::AbiTransferable>::Abi,
                ) -> ::winrt::ErrorCode,
                pub can_read: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
                pub can_write: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStream>,
                    result__: *mut bool,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IRandomAccessStream {
                fn signature() -> String {
                    "{905a0fe1-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IRandomAccessStream {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<IRandomAccessStream> as ::winrt::AbiTransferable>::get_abi(
                        &self.ptr,
                    )
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    <::winrt::ComPtr<IRandomAccessStream> as ::winrt::AbiTransferable>::set_abi(
                        &mut self.ptr,
                    )
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IRandomAccessStream",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IRandomAccessStream {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IRandomAccessStream {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for super::super::foundation::IClosable {
                fn from(value: IRandomAccessStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for super::super::foundation::IClosable {
                fn from(value: &IRandomAccessStream) -> Self {
                    <IRandomAccessStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for IRandomAccessStream
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for &'a IRandomAccessStream
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for IInputStream {
                fn from(value: IRandomAccessStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for IInputStream {
                fn from(value: &IRandomAccessStream) -> Self {
                    <IRandomAccessStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IInputStream>> for IRandomAccessStream {
                fn into(self) -> ::winrt::Param<'a, IInputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IInputStream>> for &'a IRandomAccessStream {
                fn into(self) -> ::winrt::Param<'a, IInputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for IOutputStream {
                fn from(value: IRandomAccessStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for IOutputStream {
                fn from(value: &IRandomAccessStream) -> Self {
                    <IRandomAccessStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOutputStream>> for IRandomAccessStream {
                fn into(self) -> ::winrt::Param<'a, IOutputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOutputStream>> for &'a IRandomAccessStream {
                fn into(self) -> ::winrt::Param<'a, IOutputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for ::winrt::Object {
                fn from(value: IRandomAccessStream) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for ::winrt::Object {
                fn from(value: &IRandomAccessStream) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStreamReference {
                ptr: ::winrt::ComPtr<IRandomAccessStreamReference>,
            }
            impl IRandomAccessStreamReference {
                pub fn open_read_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<IRandomAccessStreamWithContentType>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            IRandomAccessStreamWithContentType,
                        > = ::std::mem::zeroed();
                        (this.vtable().open_read_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                IRandomAccessStreamWithContentType,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IRandomAccessStreamReference {
                type VTable = abi_IRandomAccessStreamReference;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        871248180,
                        7638,
                        20026,
                        [128, 103, 209, 193, 98, 232, 100, 43],
                    )
                }
            }
            impl ::std::clone::Clone for IRandomAccessStreamReference {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStreamReference {
                base__: [usize; 6],
                pub open_read_async: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStreamReference>,
                    result__: *mut <super::super::foundation::IAsyncOperation<
                        IRandomAccessStreamWithContentType,
                    > as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IRandomAccessStreamReference {
                fn signature() -> String {
                    "{33ee3134-1dd6-4e3a-8067-d1c162e8642b}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IRandomAccessStreamReference {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamReference > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamReference > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IRandomAccessStreamReference",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IRandomAccessStreamReference {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IRandomAccessStreamReference {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IRandomAccessStreamReference> for ::winrt::Object {
                fn from(value: IRandomAccessStreamReference) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamReference> for ::winrt::Object {
                fn from(value: &IRandomAccessStreamReference) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStreamReferenceStatics {
                ptr: ::winrt::ComPtr<IRandomAccessStreamReferenceStatics>,
            }
            impl IRandomAccessStreamReferenceStatics {
                pub fn create_from_file<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::IStorageFile>>,
                >(
                    &self,
                    file: T0__,
                ) -> ::winrt::Result<RandomAccessStreamReference> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: RandomAccessStreamReference = ::std::mem::zeroed();
                        (this.vtable().create_from_file)(
                            this,
                            file.into().get_abi(),
                            <RandomAccessStreamReference as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_from_uri<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    &self,
                    uri: T0__,
                ) -> ::winrt::Result<RandomAccessStreamReference> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: RandomAccessStreamReference = ::std::mem::zeroed();
                        (this.vtable().create_from_uri)(
                            this,
                            uri.into().get_abi(),
                            <RandomAccessStreamReference as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_from_stream<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, IRandomAccessStream>>,
                >(
                    &self,
                    stream: T0__,
                ) -> ::winrt::Result<RandomAccessStreamReference> {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: RandomAccessStreamReference = ::std::mem::zeroed();
                        (this.vtable().create_from_stream)(
                            this,
                            stream.into().get_abi(),
                            <RandomAccessStreamReference as ::winrt::AbiTransferable>::set_abi(
                                &mut result__,
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for IRandomAccessStreamReferenceStatics {
                type VTable = abi_IRandomAccessStreamReferenceStatics;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2238908892,
                        16319,
                        20093,
                        [152, 111, 239, 59, 26, 7, 169, 100],
                    )
                }
            }
            impl ::std::clone::Clone for IRandomAccessStreamReferenceStatics {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStreamReferenceStatics {
                base__: [usize; 6],
                pub create_from_file: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStreamReferenceStatics>,
                    file: <super::IStorageFile as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <RandomAccessStreamReference as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub create_from_uri: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStreamReferenceStatics>,
                    uri: <super::super::foundation::Uri as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <RandomAccessStreamReference as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub create_from_stream: unsafe extern "system" fn(
                    ::winrt::NonNullRawComPtr<IRandomAccessStreamReferenceStatics>,
                    stream: <IRandomAccessStream as ::winrt::AbiTransferable>::Abi,
                    result__: *mut <RandomAccessStreamReference as ::winrt::AbiTransferable>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for IRandomAccessStreamReferenceStatics {
                fn signature() -> String {
                    "{857309dc-3fbf-4e7d-986f-ef3b1a07a964}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IRandomAccessStreamReferenceStatics {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamReferenceStatics
                    > as :: winrt :: AbiTransferable > ::
                    get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamReferenceStatics
                    > as :: winrt :: AbiTransferable > ::
                    set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStreamReferenceStatics {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IRandomAccessStreamReferenceStatics",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IRandomAccessStreamReferenceStatics {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IRandomAccessStreamReferenceStatics {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IRandomAccessStreamReferenceStatics> for ::winrt::Object {
                fn from(value: IRandomAccessStreamReferenceStatics) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamReferenceStatics> for ::winrt::Object {
                fn from(value: &IRandomAccessStreamReferenceStatics) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStreamWithContentType {
                ptr: ::winrt::ComPtr<IRandomAccessStreamWithContentType>,
            }
            impl IRandomAccessStreamWithContentType {
                pub fn close(&self) -> ::winrt::Result<()> {
                    <super::super::foundation::IClosable as ::std::convert::From<&Self>>::from(self)
                        .close()
                }
                pub fn read_async<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperationWithProgress<IBuffer, u32>,
                > {
                    <IInputStream as ::std::convert::From<&Self>>::from(self)
                        .read_async(buffer, count, options)
                }
                pub fn write_async<'a, T0__: ::std::convert::Into<::winrt::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32, u32>>
                {
                    <IOutputStream as ::std::convert::From<&Self>>::from(self).write_async(buffer)
                }
                pub fn flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    <IOutputStream as ::std::convert::From<&Self>>::from(self).flush_async()
                }
                pub fn size(&self) -> ::winrt::Result<u64> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).size()
                }
                pub fn set_size(&self, value: u64) -> ::winrt::Result<()> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).set_size(value)
                }
                pub fn get_input_stream_at(&self, position: u64) -> ::winrt::Result<IInputStream> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .get_input_stream_at(position)
                }
                pub fn get_output_stream_at(
                    &self,
                    position: u64,
                ) -> ::winrt::Result<IOutputStream> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .get_output_stream_at(position)
                }
                pub fn position(&self) -> ::winrt::Result<u64> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).position()
                }
                pub fn seek(&self, position: u64) -> ::winrt::Result<()> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).seek(position)
                }
                pub fn clone_stream(&self) -> ::winrt::Result<IRandomAccessStream> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).clone_stream()
                }
                pub fn can_read(&self) -> ::winrt::Result<bool> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).can_read()
                }
                pub fn can_write(&self) -> ::winrt::Result<bool> {
                    <IRandomAccessStream as ::std::convert::From<&Self>>::from(self).can_write()
                }
                pub fn content_type(&self) -> ::winrt::Result<::winrt::HString> {
                    <IContentTypeProvider as ::std::convert::From<&Self>>::from(self).content_type()
                }
            }
            unsafe impl ::winrt::ComInterface for IRandomAccessStreamWithContentType {
                type VTable = abi_IRandomAccessStreamWithContentType;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3424995367,
                        19261,
                        17295,
                        [146, 50, 16, 199, 107, 199, 224, 56],
                    )
                }
            }
            impl ::std::clone::Clone for IRandomAccessStreamWithContentType {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStreamWithContentType {
                base__: [usize; 6],
            }
            unsafe impl ::winrt::RuntimeType for IRandomAccessStreamWithContentType {
                fn signature() -> String {
                    "{cc254827-4b3d-438f-9232-10c76bc7e038}".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for IRandomAccessStreamWithContentType {
                type Abi = ::winrt::RawComPtr<Self>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamWithContentType
                    > as :: winrt :: AbiTransferable > ::
                    get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamWithContentType
                    > as :: winrt :: AbiTransferable > ::
                    set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStreamWithContentType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "IRandomAccessStreamWithContentType",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::default::Default for IRandomAccessStreamWithContentType {
                fn default() -> Self {
                    Self {
                        ptr: ::winrt::ComPtr::default(),
                    }
                }
            }
            impl ::std::cmp::PartialEq<Self> for IRandomAccessStreamWithContentType {
                fn eq(&self, other: &Self) -> bool {
                    self.ptr == other.ptr
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType>
                for super::super::foundation::IClosable
            {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType>
                for super::super::foundation::IClosable
            {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    <IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, super::super::foundation::IClosable>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, super::super::foundation::IClosable> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<super::super::foundation::IClosable>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IInputStream {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IInputStream {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    <IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IInputStream>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IInputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IInputStream>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IInputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IOutputStream {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IOutputStream {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    <IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOutputStream>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IOutputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IOutputStream>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IOutputStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IRandomAccessStream {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IRandomAccessStream {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    <IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IRandomAccessStream>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IRandomAccessStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IRandomAccessStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IRandomAccessStream>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IRandomAccessStream> {
                    ::winrt::Param::Owned(::std::convert::Into::<IRandomAccessStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IContentTypeProvider {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IContentTypeProvider {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    <IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IContentTypeProvider>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IContentTypeProvider> {
                    ::winrt::Param::Owned(::std::convert::Into::<IContentTypeProvider>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IContentTypeProvider>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::winrt::Param<'a, IContentTypeProvider> {
                    ::winrt::Param::Owned(::std::convert::Into::<IContentTypeProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for ::winrt::Object {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for ::winrt::Object {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct InputStreamOptions {
                value: u32,
            }
            impl InputStreamOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self { value: 0u32 };
                pub const Partial: Self = Self { value: 1u32 };
                pub const ReadAhead: Self = Self { value: 2u32 };
            }
            unsafe impl ::winrt::RuntimeType for InputStreamOptions {
                fn signature() -> String {
                    "enum(Windows.Storage.Streams.InputStreamOptions;u4)".to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for InputStreamOptions {
                type Abi = u32;
                fn get_abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for InputStreamOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for InputStreamOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct RandomAccessStreamReference {
                ptr: ::winrt::ComPtr<IRandomAccessStreamReference>,
            }
            impl RandomAccessStreamReference {
                pub fn open_read_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::foundation::IAsyncOperation<IRandomAccessStreamWithContentType>,
                > {
                    let this = <Self as ::winrt::AbiTransferable>::get_abi(self)
                        .expect("The `this` pointer was null when calling method");
                    unsafe {
                        let mut result__: super::super::foundation::IAsyncOperation<
                            IRandomAccessStreamWithContentType,
                        > = ::std::mem::zeroed();
                        (this.vtable().open_read_async)(
                            this,
                            <super::super::foundation::IAsyncOperation<
                                IRandomAccessStreamWithContentType,
                            > as ::winrt::AbiTransferable>::set_abi(
                                &mut result__
                            ),
                        )
                        .and_then(|| result__)
                    }
                }
                pub fn create_from_file<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::IStorageFile>>,
                >(
                    file: T0__,
                ) -> ::winrt::Result<RandomAccessStreamReference> {
                    Self::IRandomAccessStreamReferenceStatics(|f| f.create_from_file(file))
                }
                pub fn create_from_uri<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, super::super::foundation::Uri>>,
                >(
                    uri: T0__,
                ) -> ::winrt::Result<RandomAccessStreamReference> {
                    Self::IRandomAccessStreamReferenceStatics(|f| f.create_from_uri(uri))
                }
                pub fn create_from_stream<
                    'a,
                    T0__: ::std::convert::Into<::winrt::Param<'a, IRandomAccessStream>>,
                >(
                    stream: T0__,
                ) -> ::winrt::Result<RandomAccessStreamReference> {
                    Self::IRandomAccessStreamReferenceStatics(|f| f.create_from_stream(stream))
                }
                #[allow(non_snake_case)]
                fn IRandomAccessStreamReferenceStatics<
                    R,
                    F: FnOnce(&IRandomAccessStreamReferenceStatics) -> ::winrt::Result<R>,
                >(
                    callback: F,
                ) -> ::winrt::Result<R> {
                    static mut SHARED: ::winrt::FactoryCache<
                        RandomAccessStreamReference,
                        IRandomAccessStreamReferenceStatics,
                    > = ::winrt::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::winrt::RuntimeName for RandomAccessStreamReference {
                const NAME: &'static str = "Windows.Storage.Streams.RandomAccessStreamReference";
            }
            unsafe impl ::winrt::ComInterface for RandomAccessStreamReference {
                type VTable = abi_IRandomAccessStreamReference;
                fn iid() -> ::winrt::Guid {
                    <IRandomAccessStreamReference as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for RandomAccessStreamReference {
                fn signature() -> String {
                    "rc(Windows.Storage.Streams.RandomAccessStreamReference;{33ee3134-1dd6-4e3a-8067-d1c162e8642b})"
                    . to_owned()
                }
            }
            unsafe impl ::winrt::AbiTransferable for RandomAccessStreamReference {
                type Abi = ::winrt::RawComPtr<IRandomAccessStreamReference>;
                fn get_abi(&self) -> Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamReference > as
                    :: winrt :: AbiTransferable > :: get_abi(& self . ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    < :: winrt :: ComPtr < IRandomAccessStreamReference > as
                    :: winrt :: AbiTransferable > :: set_abi(& mut self . ptr)
                }
            }
            impl ::std::fmt::Debug for RandomAccessStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "{}",
                        ::std::format!(
                            "{}({:?})",
                            "RandomAccessStreamReference",
                            <Self as ::winrt::AbiTransferable>::get_abi(self)
                        )
                    )
                }
            }
            impl ::std::convert::From<RandomAccessStreamReference> for IRandomAccessStreamReference {
                fn from(value: RandomAccessStreamReference) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&RandomAccessStreamReference> for IRandomAccessStreamReference {
                fn from(value: &RandomAccessStreamReference) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IRandomAccessStreamReference>>
                for RandomAccessStreamReference
            {
                fn into(self) -> ::winrt::Param<'a, IRandomAccessStreamReference> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IRandomAccessStreamReference>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::winrt::Param<'a, IRandomAccessStreamReference>>
                for &'a RandomAccessStreamReference
            {
                fn into(self) -> ::winrt::Param<'a, IRandomAccessStreamReference> {
                    ::winrt::Param::Owned(
                        ::std::convert::Into::<IRandomAccessStreamReference>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<RandomAccessStreamReference> for ::winrt::Object {
                fn from(value: RandomAccessStreamReference) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&RandomAccessStreamReference> for ::winrt::Object {
                fn from(value: &RandomAccessStreamReference) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            unsafe impl ::std::marker::Send for RandomAccessStreamReference {}
            unsafe impl ::std::marker::Sync for RandomAccessStreamReference {}
        }
    }
    pub mod ui {
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct Color {
            pub a: u8,
            pub r: u8,
            pub g: u8,
            pub b: u8,
        }
        unsafe impl ::winrt::RuntimeType for Color {
            fn signature() -> String {
                "struct(Windows.UI.Color;u1;u1;u1;u1)".to_owned()
            }
        }
        unsafe impl ::winrt::AbiTransferable for Color {
            type Abi = Self;
            fn get_abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
    }
}
